[{"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\index.js":"1","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\App.js":"2","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\Theme.js":"3","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\Firebaseconfig.js":"4","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ManagementAPI.js":"5","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\pages\\About.js":"6","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\layout\\Header.js":"7","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\pages\\SignIn.js":"8","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllPersonList.js":"9","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllProjectList.js":"10","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\LoadingProgress.js":"11","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ContextErrorMessage.js":"12","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\PersonDetails.js":"13","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ProjectDetails.js":"14","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllRatingList.js":"15","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\PersonList.js":"16","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\PersonListEntry.js":"17","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\PersonForm.js":"18","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\PersonDeleteDialog.js":"19","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\StudentList.js":"20","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\RatingList.js":"21","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ProjectList.js":"22","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\RatingListEntry.js":"23","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ProjectForm.js":"24","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ProjectListEntry.js":"25","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ProjectDeleteDialog.js":"26","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllModuleList.js":"27","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllParticipationList.js":"28","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ModuleBO.js":"29","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ParticipationBO.js":"30","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\SemesterBO.js":"31","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\RatingBO.js":"32","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\StatusBO.js":"33","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\StudentBO.js":"34","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\Role.js":"35","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ProjectTypeBO.js":"36","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ProjectBO.js":"37","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\NamedBusinessObject.js":"38","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\BusinessObject.js":"39","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\PersonBO.js":"40","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\RatingDeleteDialog.js":"41","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\RatingForm.js":"42","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ParticipationList.js":"43","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\StudentListEntry.js":"44","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\StudentForm.js":"45","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ParticipationForm.js":"46","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ParticipationListEntry.js":"47","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ParticipationDeleteDialog.js":"48","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\StudentDeleteDialog.js":"49"},{"size":149,"mtime":1610582476542,"results":"50","hashOfConfig":"51"},{"size":5717,"mtime":1610978193418,"results":"52","hashOfConfig":"51"},{"size":1786,"mtime":1610582476486,"results":"53","hashOfConfig":"51"},{"size":451,"mtime":1610582476485,"results":"54","hashOfConfig":"51"},{"size":43100,"mtime":1610996978994,"results":"55","hashOfConfig":"51"},{"size":0,"mtime":1610582476540,"results":"56","hashOfConfig":"51"},{"size":311,"mtime":1610582476540,"results":"57","hashOfConfig":"51"},{"size":1883,"mtime":1610582476541,"results":"58","hashOfConfig":"51"},{"size":2328,"mtime":1610835293657,"results":"59","hashOfConfig":"51"},{"size":2352,"mtime":1610978193430,"results":"60","hashOfConfig":"51"},{"size":1151,"mtime":1610832223111,"results":"61","hashOfConfig":"51"},{"size":2305,"mtime":1610832223111,"results":"62","hashOfConfig":"51"},{"size":3012,"mtime":1610835293668,"results":"63","hashOfConfig":"51"},{"size":3432,"mtime":1610914449991,"results":"64","hashOfConfig":"51"},{"size":2414,"mtime":1611008047825,"results":"65","hashOfConfig":"51"},{"size":7388,"mtime":1610978193440,"results":"66","hashOfConfig":"51"},{"size":4909,"mtime":1610982127958,"results":"67","hashOfConfig":"51"},{"size":8452,"mtime":1610982127966,"results":"68","hashOfConfig":"51"},{"size":4290,"mtime":1610978193446,"results":"69","hashOfConfig":"51"},{"size":7636,"mtime":1610984630355,"results":"70","hashOfConfig":"51"},{"size":7397,"mtime":1610982127961,"results":"71","hashOfConfig":"51"},{"size":7635,"mtime":1610912122076,"results":"72","hashOfConfig":"51"},{"size":5394,"mtime":1610982127961,"results":"73","hashOfConfig":"51"},{"size":20989,"mtime":1610996978997,"results":"74","hashOfConfig":"51"},{"size":5923,"mtime":1611008242589,"results":"75","hashOfConfig":"51"},{"size":5022,"mtime":1610978193447,"results":"76","hashOfConfig":"51"},{"size":2190,"mtime":1610926064384,"results":"77","hashOfConfig":"51"},{"size":2336,"mtime":1610978193427,"results":"78","hashOfConfig":"51"},{"size":729,"mtime":1610982127952,"results":"79","hashOfConfig":"51"},{"size":969,"mtime":1610978193424,"results":"80","hashOfConfig":"51"},{"size":988,"mtime":1610582476494,"results":"81","hashOfConfig":"51"},{"size":1425,"mtime":1610982127954,"results":"82","hashOfConfig":"51"},{"size":788,"mtime":1610582476495,"results":"83","hashOfConfig":"51"},{"size":1028,"mtime":1610982127956,"results":"84","hashOfConfig":"51"},{"size":935,"mtime":1610904682720,"results":"85","hashOfConfig":"51"},{"size":808,"mtime":1610986850991,"results":"86","hashOfConfig":"51"},{"size":3994,"mtime":1610991108786,"results":"87","hashOfConfig":"51"},{"size":922,"mtime":1610838392599,"results":"88","hashOfConfig":"51"},{"size":575,"mtime":1610996978991,"results":"89","hashOfConfig":"51"},{"size":761,"mtime":1610986850990,"results":"90","hashOfConfig":"51"},{"size":4472,"mtime":1610978193448,"results":"91","hashOfConfig":"51"},{"size":10826,"mtime":1610996978998,"results":"92","hashOfConfig":"51"},{"size":8128,"mtime":1610986850994,"results":"93","hashOfConfig":"51"},{"size":5415,"mtime":1611007332650,"results":"94","hashOfConfig":"51"},{"size":9509,"mtime":1610986850996,"results":"95","hashOfConfig":"51"},{"size":8972,"mtime":1610982127964,"results":"96","hashOfConfig":"51"},{"size":5418,"mtime":1610978193438,"results":"97","hashOfConfig":"51"},{"size":4471,"mtime":1610982127963,"results":"98","hashOfConfig":"51"},{"size":3811,"mtime":1610998249471,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1jov6x2",{"filePath":"103","messages":"104","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"102"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"102"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"102"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":3,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"102"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"150","messages":"151","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"102"},{"filePath":"153","messages":"154","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"102"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"165","messages":"166","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"102"},{"filePath":"168","messages":"169","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"102"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"102"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"188","messages":"189","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"190","usedDeprecatedRules":"102"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"195","messages":"196","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":5,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"102"},{"filePath":"205","messages":"206","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"102"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\index.js",[],["214","215"],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\App.js",["216","217","218","219","220","221","222","223"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\nimport { Container, ThemeProvider, CssBaseline } from '@material-ui/core';\r\nimport ManagementAPI from './api/ManagementAPI';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport firebaseConfig from './Firebaseconfig';\r\nimport Theme from './Theme';\r\nimport Header from './components/layout/Header';\r\nimport About from './components/pages/About';\r\nimport SignIn from './components/pages/SignIn';\r\nimport LoadingProgress from './components/dialogs/LoadingProgress';\r\nimport ContextErrorMessage from './components/dialogs/ContextErrorMessage';\r\nimport AllPersonList from './components/AllPersonList';\r\nimport AllProjectList from './components/AllProjectList';\r\nimport AllRatingList from \"./components/AllRatingList\";\r\n\r\nimport AllParticipationList from \"./components/AllParticipationList\";\r\nimport ProjectList from \"./components/ProjectList\";\r\nimport PersonList from \"./components/PersonList\";\r\nimport RatingList from \"./components/RatingList\";\r\nimport StudentList from \"./components/StudentList\";\r\n\r\n//import { ParticipationList } from \"./components/ParticipationList\";\r\n\r\n/**\r\n * The main bank administration app. It uses Googles firebase to log into the bank end. For routing the\r\n * user to the respective pages, react-router-dom ist used.\r\n *\r\n * @see See Google [firebase.auth()](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\r\n * @see See Google [firebase.auth().signInWithRedirect](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signinwithredirect)\r\n * @see [react-router-dom](https://reacttraining.com/react-router/web/guides/quick-start)\r\n *\r\n *\r\n */\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n    //Constrcutor welcher Firebase initialisiert\r\n    constructor (props) {\r\n        super(props)\r\n\r\n\r\n    //Dann wird ein leeres state initalisiert\r\n\t    this.state = {\r\n            person: null,\r\n            appError: null,\r\n            authError: null,\r\n            authLoading: false\r\n        };\r\n    }\r\n\r\n\r\n\r\n    static getDerivedStateFromError(error) {   //Status wird aktualisiert\r\n                                               //so dass beim nächsten Rendern die Fallback UI angezeigt wird\r\n\r\n\t\treturn { appError: error };\r\n\t}\r\n\r\n    \t// Firebase Nutzer logt sich ein und der state wechselt den Zustand\r\n\thandleAuthStateChange = person => {\r\n\t\tif (person) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tauthLoading: true\r\n\t\t\t});\r\n\t\t\t//Person ist eingeloggt\r\n\t\t\tperson.getIdToken().then(token => {\r\n\t\t\t\t// Add the token to the browser's cookies. The server will then be\r\n\t\t\t\t// able to verify the token against the API.\r\n\t\t\t\t// SECURITY NOTE: As cookies can easily be modified, only put the\r\n\t\t\t\t// token (which is verified server-side) in a cookie; do not add other\r\n\t\t\t\t// user information.\r\n\t\t\t\tdocument.cookie = `token=${token};path=/`;\r\n\r\n\t\t\t\t// setzt den Nutzer auf Not bevor der Token angekommt\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tperson: person,\r\n\t\t\t\t\tauthError: null,\r\n\t\t\t\t\tauthLoading: false\r\n\t\t\t\t});\r\n\r\n\r\n\r\n\t\t\t}).catch(e => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tauthError: e,\r\n\t\t\t\t\tauthLoading: false\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Person hat sich ausgeloggt, also clear token\r\n\t\t\tdocument.cookie = 'token=;path=/';\r\n\r\n\t\t\t// setze die ausgeloggte Person auf null\r\n\t\t\tthis.setState({\r\n\t\t\t\tperson: null,\r\n\t\t\t\tauthLoading: false\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Handles the sign in request of the SignIn component uses the firebase.auth() component to sign in.\r\n\t * @see See Google [firebase.auth()](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\r\n\t * @see See Google [firebase.auth().signInWithRedirect](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signinwithredirect)\r\n\t */\r\n\thandleSignIn = () => {\r\n\t\tthis.setState({\r\n\t\t\tauthLoading: true\r\n\t\t});\r\n\t\tconst provider = new firebase.auth.GoogleAuthProvider(); //Erstelle eine Instanz des Google-Provider-Objekts\r\n\t\tfirebase.auth().signInWithRedirect(provider);\r\n    }\r\n\r\n\r\n    /**\r\n\t * Lifecycle method, which is called when the component gets inserted into the browsers DOM.\r\n\t * Initializes the firebase SDK.\r\n\t *\r\n\t * @see See Googles [firebase init process](https://firebase.google.com/docs/web/setup)\r\n\t */\r\n\tcomponentDidMount() {\r\n\t\tfirebase.initializeApp(firebaseConfig);\r\n\t\tfirebase.auth().languageCode = 'en';\r\n\t\tfirebase.auth().onAuthStateChanged(this.handleAuthStateChange);\r\n\t}\r\n\r\n\r\n\r\n\t/** Renders the whole app */\r\n    render() {\r\n\t\tconst { person, appError, authError, authLoading } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<ThemeProvider theme={Theme}>\r\n\t\t\t\t{/* Global CSS reset and browser normalization. CssBaseline kickstarts an elegant, consistent, and simple baseline to build upon. */}\r\n\t\t\t\t<CssBaseline />\r\n\t\t\t\t<Router basename={process.env.PUBLIC_URL}>\r\n\t\t\t\t\t<Container maxWidth='md'>\r\n\t\t\t\t\t\t<Header user={person} />\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Is a user signed in?\r\n\t\t\t\t\t\t\tperson ?\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t<Redirect from='/' to='persons' />\r\n\t\t\t\t\t\t\t\t\t<Route exact path='/persons'>\r\n\t\t\t\t\t\t\t\t\t\t<AllPersonList />\r\n\t\t\t\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t\t\t\t<Route path='/about' component={About} />\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t// else show the sign in page\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t<Redirect to='/index.html' />\r\n\t\t\t\t\t\t\t\t\t<SignIn onSignIn={this.handleSignIn} />\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<LoadingProgress show={authLoading} />\r\n\t\t\t\t\t\t<ContextErrorMessage error={authError} contextErrorMsg={`Something went wrong during sighn in process.`} onReload={this.handleSignIn} />\r\n\t\t\t\t\t\t<ContextErrorMessage error={appError} contextErrorMsg={`Something went wrong inside the app. Please reload the page.`} />\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t</Router>\r\n\t\t\t</ThemeProvider>\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;\r\n","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\Theme.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\Firebaseconfig.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ManagementAPI.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\pages\\About.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\layout\\Header.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\pages\\SignIn.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllPersonList.js",["224"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core';\r\nimport ManagementAPI from '../api/ManagementAPI';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport PersonDetails from './PersonDetails';\r\n\r\n/**\r\n * Shows all accounts of the bank.\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass AllPersonList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init an empty state\r\n    this.state = {\r\n      accounts: [],\r\n      loadingInProgress: false,\r\n      loadingError: null,\r\n    };\r\n  }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    this.loadPersons();\r\n  }\r\n\r\n  /** gets the account list for this account */\r\n  loadPersons = () => {\r\n    ManagementAPI.getAPI().getAllPersons().then(persons =>\r\n      this.setState({\r\n        persons: persons,\r\n        loadingInProgress: false, // loading indicator\r\n        loadingError: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          loadingInProgress: false,\r\n          loadingError: e\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { persons, loadingInProgress, loadingError } = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n          {\r\n            persons.map(person => <PersonDetails key={person.getID()}\r\n            personID={person.getRole().toString()} personID={person.getID().toString()} />)\r\n          }\r\n          <LoadingProgress show={loadingInProgress} />\r\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The list of all person of the bank could not be loaded.`} onReload={this.loadPersons} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nAllPersonList.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(AllPersonList);\r\n","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllProjectList.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\LoadingProgress.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ContextErrorMessage.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\PersonDetails.js",["225"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Paper } from '@material-ui/core';\r\nimport ManagementAPI from '../api/ManagementAPI';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\n/**\r\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it.\r\n *\r\n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\r\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass PersonDetails extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init state\r\n    this.state = {\r\n      Person: null,\r\n      loadingInProgress: false,\r\n      loadingError: null,\r\n    };\r\n  }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    this.getPerson();\r\n  }\r\n\r\n  /** gets the balance for this account */\r\n  getPerson = () => {\r\n    ManagementAPI.getAPI().getPerson(this.props.personID).then(person =>\r\n      this.setState({\r\n        person: person,\r\n        loadingInProgress: false,\r\n        loadingError: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          person: null,\r\n          loadingInProgress: false,\r\n          loadingError: e\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, PersonID } = this.props;\r\n    const { person, loadingInProgress, loadingError } = this.state;\r\n\r\n    return (\r\n      <Paper variant='outlined' className={classes.root}>\r\n\r\n        <Typography variant='h6'>\r\n          Person\r\n        </Typography>\r\n        <Typography>\r\n          ID: {person.getID()}\r\n        </Typography>\r\n        {\r\n          person ?\r\n            <Typography>\r\n              Person: {person.getRole()}\r\n            </Typography>\r\n            : null\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={loadingError} contextErrorMsg={`The data of person id ${person.getID()} could not be loaded.`} onReload={this.getPerson} />\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n    padding: theme.spacing(1),\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  accountEntry: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nPersonDetails.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The customerID to be rendered */\r\n  StudentID: PropTypes.string.isRequired,\r\n  /** The accountID to be rendered */\r\n  PersonID: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(PersonDetails);\r\n","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ProjectDetails.js",["226","227"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Paper } from '@material-ui/core';\r\nimport ManagementAPI from '../api/ManagementAPI';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\n/**\r\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it.\r\n *\r\n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\r\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass ProjectDetail extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init state\r\n    this.state = {\r\n      customer: null,\r\n      loadingInProgress: false,\r\n      loadingError: null,\r\n    };\r\n  }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    this.getProject();\r\n  }\r\n\r\n  /** gets the balance for this account */\r\n  getProject = () => {\r\n    ManagementAPI.getAPI().getProject(this.props.projectID).then(project =>\r\n      this.setState({\r\n        project: project,\r\n        loadingInProgress: false,\r\n        loadingError: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          project: null,\r\n          loadingInProgress: false,\r\n          loadingError: e\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, projectID, ownerID } = this.props;\r\n    const { project, loadingInProgress, loadingError } = this.state;\r\n\r\n    return (\r\n      <Paper variant='outlined' className={classes.root}>\r\n\r\n        <Typography variant='h6'>\r\n          Project\r\n        </Typography>\r\n        <Typography className={classes.ProjectEntry}>\r\n          ID: {projectID}\r\n        </Typography>\r\n        {\r\n          project ?\r\n            <Typography>\r\n              Project: {project.getName()}, {project.getSemester()},{project.getModule()},\r\n              {project.getShortDescription()}, {project.getExternalPartnerlist()}, {project.getCapacity()},\r\n              {project.getBDAP()}, {project.getBBLP()}, {project.getBDLP()}, {project.getPDL()}, {project.getLanguage()},\r\n              {project.getRoom()}, {project.getSpecialRoom()}, {project.getFlag()}, {project.getStatus()},\r\n              {project.getProjectType()}, {project.getOwner()}\r\n            </Typography>\r\n            : null\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={loadingError} contextErrorMsg={`The data of project id ${projectID} could not be loaded.`} onReload={this.getProject} />\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n    padding: theme.spacing(1),\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  projectEntry: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nProjectDetail.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The projectID to be rendered */\r\n  projectID: PropTypes.string.isRequired,\r\n  /** The projectID to be rendered */\r\n  projectID: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ProjectDetail);","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllRatingList.js",["228","229","230","231","232"],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\PersonList.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\PersonListEntry.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\PersonForm.js",["233","234","235","236"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { ManagementAPI, PersonBO } from '../../api/ManagementAPI';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\n\r\n/**\r\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured\r\n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object.\r\n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\r\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer.\r\n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.\r\n * When the dialog is canceled, onClose is called with null.\r\n *\r\n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\r\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass PersonForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let na = '', ro = '';\r\n    if (props.person) {\r\n      na = props.person.getName();\r\n      ro = props.person.getRole();\r\n    }\r\n\r\n    // Init the state\r\n    this.state = {\r\n      name: na,\r\n      nameValidationFailed: false,\r\n      nameEdited: false,\r\n      role: ro,\r\n      roleValidationFailed: false,\r\n      roleEdited: false,\r\n      addingInProgress: false,\r\n      updatingInProgress: false,\r\n      addingError: null,\r\n      updatingError: null\r\n    };\r\n    // save this state for canceling\r\n    this.baseState = this.state;\r\n  }\r\n\r\n  /** Adds the person */\r\n  addPerson = () => {\r\n    let newPerson = new PersonBO(this.state.name, this.state.role);\r\n    ProjectAPI.getAPI().addPerson(newPerson).then(person => {\r\n      // Backend call sucessfull\r\n      // reinit the dialogs state for a new empty person\r\n      this.setState(this.baseState);\r\n      this.props.onClose(person); // call the parent with the person object from backend\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,    // disable loading indicator\r\n        updatingError: e              // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,       // show loading indicator\r\n      updatingError: null             // disable error message\r\n    });\r\n  }\r\n\r\n  /** Updates the person */\r\n  updatePerson = () => {\r\n    // clone the original person, in case the backend call fails\r\n    let updatedPerson = Object.assign(new PersonBO(), this.props.person);\r\n    // set the new attributes from our dialog\r\n    updatedPerson.setName(this.state.name);\r\n    updatedPerson.setRole(this.state.role);\r\n    ProjectAPI.getAPI().updatePerson(updatedPerson).then(person => {\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: null                     // no error message\r\n      });\r\n      // keep the new state as base state\r\n      this.baseState.name = this.state.name;\r\n      this.baseState.role = this.state.role;\r\n      this.props.onClose(updatedPerson);      // call the parent with the new person\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,                 // show loading indicator\r\n      updatingError: null                       // disable error message\r\n    });\r\n  }\r\n\r\n  /** Handles value changes of the forms textfields and validates them */\r\n  textFieldValueChange = (event) => {\r\n    const value = event.target.value;\r\n\r\n    let error = false;\r\n    if (value.trim().length === 0) {\r\n      error = true;\r\n    }\r\n\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n      [event.target.id + 'ValidationFailed']: error,\r\n      [event.target.id + 'Edited']: true\r\n    });\r\n  }\r\n\r\n  /** Handles the close / cancel button click event */\r\n  handleClose = () => {\r\n    // Reset the state\r\n    this.setState(this.baseState);\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, person, show } = this.props;\r\n    const { name, nameValidationFailed, nameEdited, role, roleValidationFailed, roleEdited, addingInProgress,\r\n      addingError, updatingInProgress, updatingError } = this.state;\r\n\r\n    let title = '';\r\n    let header = '';\r\n\r\n    if (person) {\r\n      // person defindet, so ist an edit dialog\r\n      title = 'Update a person';\r\n      header = `Person ID: ${person.getID()}`;\r\n    } else {\r\n      title = 'Create a new person';\r\n      header = 'Enter person data';\r\n    }\r\n\r\n    return (\r\n      show ?\r\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\r\n          <DialogTitle id='form-dialog-title'>{title}\r\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              {header}\r\n            </DialogContentText>\r\n            <form className={classes.root} noValidate autoComplete='off'>\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='name' label='Name:' value={name}\r\n                onChange={this.textFieldValueChange} error={nameValidationFailed}\r\n                helperText={nameValidationFailed ? 'The name must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='role' label='Role:' value={role}\r\n                onChange={this.textFieldValueChange} error={roleValidationFailed}\r\n                helperText={roleValidationFailed ? 'The role must contain at least one character' : ' '} />\r\n            </form>\r\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n            {\r\n              // Show error message in dependency of person prop\r\n              person ?\r\n                <ContextErrorMessage error={updatingError} contextErrorMsg={`The person ${person.getID()} could not be updated.`} onReload={this.updatePerson} />\r\n                :\r\n                <ContextErrorMessage error={addingError} contextErrorMsg={`The person could not be added.`} onReload={this.addPerson} />\r\n            }\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color='secondary'>\r\n              Cancel\r\n            </Button>\r\n            {\r\n              // If a person is given, show an update button, else an add button\r\n              customer ?\r\n                <Button disabled={nameValidationFailed || roleValidationFailed} variant='contained' onClick={this.updatePerson} color='primary'>\r\n                  Update\r\n              </Button>\r\n                : <Button disabled={nameValidationFailed || !nameEdited || roleValidationFailed || !roleEdited} variant='contained' onClick={this.addPerson} color='primary'>\r\n                  Add\r\n             </Button>\r\n            }\r\n          </DialogActions>\r\n        </Dialog>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\n/** PropTypes */\r\nPersonForm.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The PersonBO to be edited */\r\n  person: PropTypes.object,\r\n  /** If true, the form is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**\r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the edited or created CustomerBO as parameter or null, if cancel was pressed.\r\n   *\r\n   * Signature: onClose(PersonBO person);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(PersonForm);","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\PersonDeleteDialog.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\StudentList.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\RatingList.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ProjectList.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\RatingListEntry.js",["237"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport RatingForm from './dialogs/RatingForm';\r\nimport RatingDeleteDialog from './dialogs/RatingDeleteDialog';\r\nimport RatingList from './RatingList';\r\n\r\n\r\n/**\r\n * Renders a CustomerBO object within a expandable/collapsible CustomerListEntry with the customer manipulation\r\n * functions. If expanded, it renders a AccountList.\r\n *\r\n * @see See [RatingList](#accountlist)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass RatingListEntry extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init the state\r\n    this.state = {\r\n      rating: props.rating,\r\n      showRatingForm: false,\r\n      showRatingDeleteDialog: false,\r\n    };\r\n  }\r\n\r\n  /** Handles onChange events of the underlying ExpansionPanel */\r\n  expansionPanelStateChanged = () => {\r\n    this.props.onExpandedStateChange(this.props.rating);\r\n  }\r\n\r\n  /** Handles onAccountDelete events from an AccountListEntry\r\n  deleteAccountHandler = (deletedAccount) => {\r\n    // console.log(deletedAccount.getID());\r\n    this.setState({\r\n      accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\r\n    })\r\n  }\r\n\r\n  /** Handles the onClick event of the edit customer button */\r\n  editRatingButtonClicked = (event) => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      showRatingForm: true\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the RatingForm */\r\n  ratingFormClosed = (rating => {\r\n    // customer is not null and therefor changed\r\n    if (rating) {\r\n      this.setState({\r\n        rating: rating,\r\n        showRatingForm: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showRatingForm: false\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handles the onClick event of the delete rating button */\r\n  deleteRatingButtonClicked = (event) => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      showRatingDeleteDialog: true\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the RatingDeleteDialog */\r\n  deleteRatingDialogClosed = (rating) => {\r\n    // if rating is not null, delete it\r\n    if (rating) {\r\n      this.props.onRatingDeleted(rating);\r\n    };\r\n\r\n    // Don´t show the dialog\r\n    this.setState({\r\n      showRatingDeleteDialog: false\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, expandedState } = this.props;\r\n    // Use the states rating\r\n    const { rating, showRatingForm, showRatingDeleteDialog } = this.state;\r\n\r\n    // console.log(this.state);\r\n    return (\r\n      <div>\r\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            id={`rating${rating.getID()}accountpanel-header`}\r\n          >\r\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n              <Grid item>\r\n                <Typography variant='body1' className={classes.heading}>{rating.getProject()}, {rating.getEvaluator()},{rating.getToBeAssessed()},{rating.getGrade()},{rating.getPassed()}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <ButtonGroup variant='text' size='small'>\r\n                  <Button color='primary' onClick={this.editRatingButtonClicked}>\r\n                    edit\r\n                  </Button>\r\n                  <Button color='secondary' onClick={this.deleteRatingButtonClicked}>\r\n                    delete\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Grid>\r\n              <Grid item xs />\r\n              <Grid item>\r\n                <Typography variant='body2' color={'textSecondary'}>List of accounts</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <AccountList show={expandedState} rating={rating} />\r\n          </AccordionDetails>\r\n        </Accordion>\r\n        <RatingForm show={showRatingForm} rating={rating} onClose={this.ratingFormClosed} />\r\n        <RatingDeleteDialog show={showRatingDeleteDialog} rating={crating} onClose={this.deleteRatingDialogClosed} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nRatingListEntry.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The RatingBO to be rendered */\r\n  rating: PropTypes.object.isRequired,\r\n  /** The state of this RatingListEntry. If true the rating is shown with its accounts */\r\n  expandedState: PropTypes.bool.isRequired,\r\n  /** The handler responsible for handle expanded state changes (exanding/collapsing) of this RatingListEntry\r\n   *\r\n   * Signature: onExpandedStateChange(RatingBO rating)\r\n   */\r\n  onExpandedStateChange: PropTypes.func.isRequired,\r\n  /**\r\n   *  Event Handler function which is called after a sucessfull delete of this rating.\r\n   *\r\n   * Signature: onRatingDelete(RatingBO rating)\r\n   */\r\n  onRatingDeleted: PropTypes.func.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(RatingListEntry);\r\n","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ProjectForm.js",["238"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ManagementAPI from '../../api/ManagementAPI';\r\nimport ProjectBO from  '../../api/ProjectBO';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\n\r\n/**\r\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured\r\n * as an edit dialog and the text fields of the form are filled from the given RatingBO object.\r\n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\r\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer.\r\n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.\r\n * When the dialog is canceled, onClose is called with null.\r\n *\r\n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\r\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass ProjectForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let n = '', se = '', mo= '', sd='', ep='', c='', bdep='', bblp='', bdlp='', pbdl='', la='', ro='', sr='', fl='',\r\n    st='', pt='', ow='';\r\n    if (props.project) {\r\n      n = props.project.getName();\r\n      se = props.project.getSemester();\r\n      mo = props.project.getModule();\r\n      sd = props.project.getShortDescription();\r\n      ep = props.project.getExternalPartnerList();\r\n      c = props.project.getCapacity();\r\n      bdep = props.project.getBdDuringExamPeriod();\r\n      bblp = props.project.getBdBeforeLecturePeriod();\r\n      bdlp = props.project.getBdDuringLecturePeriod();\r\n      pbdl = props.project.getPreferredBdDuringLecturePeriod();\r\n      la = props.project.getLanguage();\r\n      ro = props.project.getRoom();\r\n      sr = props.project.getSpecialRoom();\r\n      fl = props.project.getFlag();\r\n      st = props.project.getStatus();\r\n      pt = props.project.getProjectType();\r\n      ow = props.project.getOwner();\r\n    }\r\n\r\n    // Init the state\r\n    this.state = {\r\n      name: n,\r\n      nameValidationFailed: false,\r\n      nameEdited: false,\r\n      semester: se,\r\n      semesterValidationFailed: false,\r\n      semesterEdited: false,\r\n      module: mo,\r\n      moduleValidationFailed: false,\r\n      moduleEdited: false,\r\n      shortDescription: sd,\r\n      shortDescriptionValidationFailed: false,\r\n      shortDescriptionEdited: false,\r\n      externalPartnerList: ep,\r\n      externalPartnerListValidationFailed: false,\r\n      externalPartnerListEdited: false,\r\n      capacity: c,\r\n      capacityValidationFailed: false,\r\n      capacityEdited: false,\r\n      bdDuringExamPeriod: bdep,\r\n      bdDuringExamPeriodValidationFailed: false,\r\n      bdDuringExamPeriodEdited: false,\r\n      bdBeforeLecturePeriod: bblp,\r\n      bdBeforeLecturePeriodValidationFailed: false,\r\n      bdBeforeLecturePeriodEdited: false,\r\n      bdDuringLecturePeriod: bdlp,\r\n      bdDuringLecturePeriodValidationFailed: false,\r\n      bdDuringLecturePeriodEdited: false,\r\n      preferredBdDuringLecturePeriod: pbdl,\r\n      preferredBdDuringLecturePeriodValidationFailed: false,\r\n      preferredBdDuringLecturePeriodEdited: false,\r\n      language: la,\r\n      languageValidationFailed: false,\r\n      languageEdited: false,\r\n      room: ro,\r\n      roomValidationFailed: false,\r\n      roomEdited: false,\r\n      specialRoom: sr,\r\n      specialRoomValidationFailed: false,\r\n      specialRoomEdited: false,\r\n      flag: fl,\r\n      flagValidationFailed: false,\r\n      flagEdited: false,\r\n      status: st,\r\n      statusValidationFailed: false,\r\n      statusEdited: false,\r\n      projectType: pt,\r\n      projectTypeValidationFailed: false,\r\n      projectTypeEdited: false,\r\n      owner: ow,\r\n      ownerValidationFailed: false,\r\n      ownerEdited: false,\r\n\r\n      addingInProgress: false,\r\n      updatingInProgress: false,\r\n      addingError: null,\r\n      updatingError: null\r\n\r\n    };\r\n    // save this state for canceling\r\n    this.baseState = this.state;\r\n  }\r\n\r\n  /** Adds the project */\r\n  addProject = () => {\r\n    let newProject = new ProjectBO(this.state.name, this.state.semester, this.state.module, this.state.shortDescription,\r\n    this.state.externalPartnerList, this.state.capacity, this.state.bdDuringExamPeriod, this.state.bdBeforeLecturePeriod, this.state.bdDuringLecturePeriod,\r\n    this.state.preferredBdDuringLecturePeriod, this.state.language, this.state.room, this.state.specialRoom, this.state.status,\r\n    this.state.projectType, this.state.owner);\r\n    ManagementAPI.getAPI().addProject(newProject).then(project => {\r\n      // Backend call sucessfull\r\n      // reinit the dialogs state for a new empty project\r\n      this.setState(this.baseState);\r\n      this.props.onClose(project); // call the parent with the customer object from backend\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,    // disable loading indicator\r\n        updatingError: e              // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,       // show loading indicator\r\n      updatingError: null             // disable error message\r\n    });\r\n  }\r\n\r\n  /** Updates the project */\r\n  updateProject = () => {\r\n    // clone the original project, in case the backend call fails\r\n    let updatedProject = Object.assign(new ProjectBO(), this.props.project);\r\n    // set the new attributes from our dialog\r\n    updatedProject.setName(this.state.name);\r\n    updatedProject.setSemester(this.state.semester);\r\n    updatedProject.setModule(this.state.module);\r\n    updatedProject.setShortDescription(this.state.shortDescription);\r\n    updatedProject.setExternalPartnerList(this.state.externalPartnerList);\r\n    updatedProject.setCapacity(this.state.capacity);\r\n    updatedProject.setBdDuringExamPeriod(this.state.bdDuringExamPeriod);\r\n    updatedProject.setBdBeforeLecturePeriod(this.state.bdBeforeLecturePeriod);\r\n    updatedProject.setBdDuringLecturePeriod (this.state.bdDuringLecturePeriod);\r\n    updatedProject.setPreferredBdDuringLecturePeriod (this.state.preferredBdDuringLecturePeriod);\r\n    updatedProject.setLanguage (this.state.language);\r\n    updatedProject.setRoom (this.state.room);\r\n    updatedProject.setSpecialRoom (this.state.specialRoom);\r\n    updatedProject.setStatus (this.state.status);\r\n    updatedProject.setProjectType (this.state.projectType);\r\n    updatedProject.setOwner (this.state.owner);\r\n    updatedProject.setFlag (this.state.flag);\r\n    ManagementAPI.getAPI().updateProject(updatedProject).then(project => {\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: null                     // no error message\r\n      });\r\n\r\n      // keep the new state as base state\r\n      this.baseState.name = this.state.name;\r\n      this.baseState.semester = this.state.semester;\r\n      this.baseState.module = this.state.module;\r\n      this.baseState.shortDescription = this.state.shortDescription;\r\n      this.baseState.externalPartnerList = this.state.externalPartnerList;\r\n      this.baseState.capacity = this.state.capacity;\r\n      this.baseState.bdDuringExamPeriod = this.state.bdDuringExamPeriod;\r\n      this.baseState.bdBeforeLecturePeriod = this.state.bdBeforeLecturePeriod;\r\n      this.baseState.bdDuringLecturePeriod = this.state.bdDuringLecturePeriod;\r\n      this.baseState.preferredBdDuringLecturePeriod = this.state.preferredBdDuringLecturePeriod;\r\n      this.baseState.language = this.state.language;\r\n      this.baseState.room = this.state.room;\r\n      this.baseState.specialRoom = this.state.specialRoom;\r\n      this.baseState.status = this.state.status;\r\n      this.baseState.projectType = this.state.projectType;\r\n      this.baseState.owner = this.state.owner;\r\n      this.baseState.flag = this.state.flag;\r\n      this.props.onClose(updatedProject); // call the parent with the new project\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,                 // show loading indicator\r\n      updatingError: null                       // disable error message\r\n    });\r\n  }\r\n\r\n  /** Handles value changes of the forms textfields and validates them */\r\n  textFieldValueChange = (event) => {\r\n    const value = event.target.value;\r\n\r\n    let error = false;\r\n    if (value.trim().length === 0) {\r\n      error = true;\r\n    }\r\n\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n      [event.target.id + 'ValidationFailed']: error,\r\n      [event.target.id + 'Edited']: true\r\n    });\r\n  }\r\n\r\n  /** Handles the close / cancel button click event */\r\n  handleClose = () => {\r\n    // Reset the state\r\n    this.setState(this.baseState);\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, project, show } = this.props;\r\n    const { name, nameValidationFailed, nameEdited, semester,semesterValidationFailed, semesterEdited,module,\r\n    moduleValidationFailed,moduleEdited, shortDescription, shortDescriptionValidationFailed, shortDescriptionEdited,\r\n    externalPartnerList, externalPartnerListValidationFailed, externalPartnerListEdited, capacity,\r\n    capacityValidationFailed, capacityEdited, bdDuringExamPeriod, bdDuringExamPeriodValidationFailed, bdDuringExamPeriodEdited, bdBeforeLecturePeriod, bdBeforeLecturePeriodValidationFailed,\r\n    bdBeforeLecturePeriodEdited, bdDuringLecturePeriod, bdDuringLecturePeriodValidationFailed, bdDuringLecturePeriodEdited, preferredBdDuringLecturePeriod, preferredBdDuringLecturePeriodValidationFailed, preferredBdDuringLecturePeriodEdited, language,\r\n    languageValidationFailed, languageEdited, room, roomValidationFailed, roomEdited, specialRoom,\r\n    specialRoomValidationFailed, specialRoomEdited, status, statusValidationFailed, statusEdited, projectType,\r\n    projectTypeValidationFailed, projectTypeEdited, owner, ownerValidationFailed, ownerEdited, addingInProgress,\r\n      addingError, updatingInProgress, updatingError } = this.state;\r\n\r\n    let title = '';\r\n    let header = '';\r\n\r\n    if (project) {\r\n      // project defindet, so ist an edit dialog\r\n      title = 'Update a project';\r\n      header = `Project ID: ${project.getID()}`;\r\n    } else {\r\n      title = 'Create a new project';\r\n      header = 'Enter project data';\r\n    }\r\n\r\n    return (\r\n      show ?\r\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\r\n          <DialogTitle id='form-dialog-title'>{title}\r\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              {header}\r\n            </DialogContentText>\r\n            <form className={classes.root} noValidate autoComplete='off'>\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='name' label='Name:' value={name}\r\n                onChange={this.textFieldValueChange} error={nameValidationFailed}\r\n                helperText={nameValidationFailed ? 'The name must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester}\r\n                onChange={this.textFieldValueChange} error={semesterValidationFailed}\r\n                helperText={semesterValidationFailed ? 'The semester must contain at least one character' : ' '} />\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='module' label='Module:' value={module}\r\n                onChange={this.textFieldValueChange} error={moduleValidationFailed}\r\n                helperText={moduleValidationFailed ? 'The Module must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='shortDescription' label='Short Description:' value={shortDescription}\r\n                onChange={this.textFieldValueChange} error={shortDescriptionValidationFailed}\r\n                helperText={shortDescriptionValidationFailed ? 'The short description must contain at least one character' : ' '} />\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='externalPartnerList' label='External PartnerList:' value={externalPartnerList}\r\n                onChange={this.textFieldValueChange} error={externalPartnerListValidationFailed}\r\n                helperText={externalPartnerListValidationFailed ? 'The external PartnerList must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='capacity' label='Capacity:' value={capacity}\r\n                onChange={this.textFieldValueChange} error={capacityValidationFailed}\r\n                helperText={capacityValidationFailed ? 'The capacity must contain at least one character' : ' '} />\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='bdDuringExamPeriod' label='BlockDays during exam period :' value={bdDuringExamPeriod}\r\n                onChange={this.textFieldValueChange} error={bdDuringExamPeriodValidationFailed}\r\n                helperText={bdDuringExamPeriodValidationFailed ? 'You must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='bdBeforeLecturePeriod' label='BlockDays before lecture period:' value={bdBeforeLecturePeriod}\r\n                onChange={this.textFieldValueChange} error={bdBeforeLecturePeriodValidationFailed}\r\n                helperText={bdBeforeLecturePeriodValidationFailed ? 'You must contain at least one character' : ' '} />\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='bdDuringLecturePeriod' label='BlockDays during lecture period:' value={bdDuringLecturePeriod}\r\n                onChange={this.textFieldValueChange} error={bdDuringLecturePeriodValidationFailed}\r\n                helperText={bdDuringLecturePeriodValidationFailed ? 'You must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='preferredBdDuringLecturePeriod' label='Preferred BlockDays during lecture period:' value={preferredBdDuringLecturePeriod}\r\n                onChange={this.textFieldValueChange} error={preferredBdDuringLecturePeriodValidationFailed}\r\n                helperText={preferredBdDuringLecturePeriodValidationFailed ? 'You must contain at least one character' : ' '} />\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='language' label='Language:' value={language}\r\n                onChange={this.textFieldValueChange} error={languageValidationFailed}\r\n                helperText={languageValidationFailed ? 'The language must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='room' label='Room:' value={room}\r\n                onChange={this.textFieldValueChange} error={roomValidationFailed}\r\n                helperText={roomValidationFailed ? 'The room must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='room' label='Room:' value={room}\r\n                onChange={this.textFieldValueChange} error={roomValidationFailed}\r\n                helperText={roomValidationFailed ? 'The room must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='specialRoom' label='Special room:' value={specialRoom}\r\n                onChange={this.textFieldValueChange} error={specialRoomValidationFailed}\r\n                helperText={specialRoomValidationFailed ? 'The special room must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='status' label='Status:' value={status}\r\n                onChange={this.textFieldValueChange} error={statusValidationFailed}\r\n                helperText={statusValidationFailed ? 'The status must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='projectType' label='Project Type:' value={projectType}\r\n                onChange={this.textFieldValueChange} error={projectTypeValidationFailed}\r\n                helperText={projectTypeValidationFailed ? 'The project type must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='owner' label='Owner:' value={owner}\r\n                onChange={this.textFieldValueChange} error={ownerValidationFailed}\r\n                helperText={ownerValidationFailed ? 'The owner must contain at least one character' : ' '} />\r\n\r\n            </form>\r\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n            {\r\n              // Show error message in dependency of project prop\r\n              project ?\r\n                <ContextErrorMessage error={updatingError} contextErrorMsg={`The project ${project.getID()} could not be updated.`} onReload={this.updateProject} />\r\n                :\r\n                <ContextErrorMessage error={addingError} contextErrorMsg={`The project could not be added.`} onReload={this.addProject} />\r\n            }\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color='secondary'>\r\n              Cancel\r\n            </Button>\r\n            {\r\n              // If a project is given, show an update button, else an add button\r\n              customer ?\r\n                <Button disabled={nameValidationFailed || semesterValidationFailed || moduleValidationFailed ||\r\n                shortDescriptionValidationFailed || externalPartnerListValidationFailed || capacityValidationFailed ||\r\n                bdDuringExamPeriodValidationFailed || bdBeforeLecturePeriodValidationFailed || bdDuringLecturePeriodValidationFailed || preferredBdDuringLecturePeriodValidationFailed ||\r\n                languageValidationFailed || roomValidationFailed || specialRoomValidationFailed || statusValidationFailed ||\r\n                projectTypeValidationFailed || ownerValidationFailed} variant='contained' onClick={this.updateProject} color='primary'>\r\n                  Update\r\n              </Button>\r\n                : <Button disabled={nameValidationFailed || !nameEdited || semesterValidationFailed || !semesterEdited ||\r\n                moduleValidationFailed || !moduleEdited || shortDescriptionValidationFailed || !shortDescriptionEdited ||\r\n                externalPartnerListValidationFailed || !externalPartnerListEdited || capacityValidationFailed ||\r\n                !capacityEdited || bdDuringExamPeriodValidationFailed || !bdDuringExamPeriodEdited || bdBeforeLecturePeriodValidationFailed || !bdBeforeLecturePeriodEdited ||\r\n               bdDuringLecturePeriodValidationFailed || !bdDuringLecturePeriodEdited || preferredBdDuringLecturePeriodValidationFailed || !preferredBdDuringLecturePeriodEdited || languageValidationFailed ||\r\n                !languageEdited || roomValidationFailed || !roomEdited || specialRoomValidationFailed || !specialRoomEdited ||\r\n                statusValidationFailed || !statusEdited || projectTypeValidationFailed || !projectTypeEdited ||\r\n                ownerValidationFailed || !ownerEdited} variant='contained' onClick={this.addCustomer} color='primary'>\r\n                  Add\r\n             </Button>\r\n            }\r\n          </DialogActions>\r\n        </Dialog>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\n/** PropTypes */\r\nProjectForm.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ProjectBO to be edited */\r\n  project: PropTypes.object,\r\n  /** If true, the form is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**\r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the edited or created CustomerBO as parameter or null, if cancel was pressed.\r\n   *\r\n   * Signature: onClose(ProjectBO project);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ProjectForm);","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ProjectListEntry.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ProjectDeleteDialog.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllModuleList.js",[],["239","240"],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllParticipationList.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ModuleBO.js",["241","242","243"],"import  NamedBusinessObject from './NamedBusinessObject';\r\n\r\n/**\r\n * .\r\n */\r\nexport default class ModuleBO extends NamedBusinessObject {\r\n\r\n/**\r\n   *\r\n   *\r\n   */\r\n  constructor(aEdv_nr) {\r\n    super();\r\n    this.edv_nr = aEdv_nr;\r\n  }\r\n\r\n  setEdvNr(aEdv_nr) {\r\n  this.edv_nr = aEdv_nr;\r\n  }\r\n\r\n  getEdvNr() {\r\n    return this.edv_nr;\r\n  }\r\n\r\n  static fromJSON(modules) {\r\n    let result = [];\r\n\r\n    if (Array.isArray(modules)) {\r\n      modules.forEach((m) => {\r\n        Object.setPrototypeOf(m, ModuleBO.prototype);\r\n        result.push(m);\r\n      })\r\n    } else {\r\n      //\r\n      let m = modules;\r\n      Object.setPrototypeOf(m, ModuleBO.prototype);\r\n      result.push(m);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ParticipationBO.js",["244"],"import  BusinessObject from './BusinessObject';\r\n\r\n/**\r\n * Zeigt eine Teilnahme  am Project an.\r\n */\r\nexport default class ParticipationBO extends BusinessObject {\r\n\r\n/**\r\n   *\r\n   *\r\n   */\r\n  constructor(aProject, aStudent) {\r\n    super();\r\n    this.project = aProject;\r\n    this.student = aStudent;\r\n  }\r\n\r\n  setProject(aProject) {\r\n  this.project = aProject;\r\n  }\r\n\r\n  getProject() {\r\n    return this.project;\r\n  }\r\n\r\n  setStudent(aStudent) {\r\n  this.student = aStudent;\r\n  }\r\n\r\n  getStudent() {\r\n    return this.student;\r\n\r\n\r\n  static fromJSON(participations) {\r\n    let result = [];\r\n\r\n    if (Array.isArray(participations)) {\r\n      participations.forEach((p) => {\r\n        Object.setPrototypeOf(p, ParticipationBO.prototype);\r\n        result.push(p);\r\n      })\r\n    } else {\r\n\r\n      let p = participations;\r\n      Object.setPrototypeOf(p, ParticipationBO.prototype);\r\n      result.push(p);\r\n    }\r\n    return result;\r\n\r\n  }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\SemesterBO.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\RatingBO.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\StatusBO.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\StudentBO.js",["245","246","247"],"import PersonBO from './PersonBO';\r\n\r\n/**\r\n * Represents a customer of the bank.\r\n */\r\nexport default class StudentBO extends PersonBO {\r\n\r\nconstructor(aCourse_abbr,aMatriculation_nr) {\r\n    super();\r\n    this.course_abbr = aCourseAbbr;\r\n    this.matriculation_nr = aMatriculationNr;\r\n\r\n  }\r\n\r\n\r\n  setCourseAbbr(aCourseAbbr) {\r\n    this.course_abbr = aCourse_abbr;\r\n  }\r\n\r\n  getCourseAbbr() {\r\n    return this.course_abbr;\r\n  }\r\n\r\n\r\n  setMatriculationNr(aMatriculationNr) {\r\n    this.matriculation_nr = aMatriculationNr;\r\n  }\r\n\r\n\r\n  getMatriculationNr() {\r\n    return this.matriculation_nr;\r\n  }\r\n\r\n\r\n  static fromJSON(students) {\r\n    let result = [];\r\n\r\n    if (Array.isArray(students)) {\r\n      students.forEach((u) => {\r\n        Object.setPrototypeOf(u, StudentBO.prototype);\r\n        result.push(u);\r\n      })\r\n    } else {\r\n      // Es handelt sich offenbar um ein singuläres Objekt\r\n      let u = students\r\n      Object.setPrototypeOf(u, StudentBO.prototype);\r\n      result.push(u);\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\n","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\Role.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ProjectTypeBO.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ProjectBO.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\NamedBusinessObject.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\BusinessObject.js",["248","249"],"\r\n\r\nexport default class BusinessObject {\r\n\r\n\r\n\r\n    constructor() {\r\n        this.id = 0;\r\n        this.creationTime = aDateTime.now();\r\n    }\r\n\r\n\r\n    setCreationTime(aDateTime) {\r\n        this.creationTime = aDateTime.now();\r\n    }\r\n\r\n    getCreationTime() {\r\n        return this.creationTime;\r\n    }\r\n\r\n\r\n    setID(aId) {\r\n        this.id = aId;\r\n    }\r\n\r\n    getID() {\r\n        return this.id;\r\n    }\r\n\r\n    toString() {\r\n        let result = \" \";\r\n        for (var prop in this) {\r\n        result += prop + \":\" + this [prop] +\" \";\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\PersonBO.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\RatingDeleteDialog.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\RatingForm.js",["250","251"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ManagementAPI from '../../api/ManagementAPI';\r\nimport RatingBO from '../../api/RatingBO'\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\n\r\n\r\n/**\r\n * Shows a modal form dialog for a RatingBO in prop Rating. If the Rating is set, the dialog is configured\r\n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object.\r\n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\r\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer.\r\n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.\r\n * When the dialog is canceled, onClose is called with null.\r\n *\r\n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\r\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass RatingForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let pr = '', ev = '', tb = '', gr= '', pa= '';\r\n    if (props.rating) {\r\n      pr = props.rating.getProject();\r\n      ev = props.rating.getEvaluator();\r\n      tb = props.rating.getToBeAssessed();\r\n      gr = props.rating.getGrade();\r\n      pa = props.rating.getPassed();\r\n    }\r\n\r\n    // Init the state\r\n    this.state = {\r\n      project: pr,\r\n      projectValidationFailed: false,\r\n      projectEdited: false,\r\n      evaluator: ev,\r\n      evaluatorValidationFailed: false,\r\n      evaluatorEdited: false,\r\n      toBeAssessed: tb,\r\n      toBeAssessedValidationFailed: false,\r\n      toBeAssessedEdited: false,\r\n      grade: gr,\r\n      gradeValidationFailed: false,\r\n      gradeEdited: false,\r\n      passed: pa,\r\n      passedValidationFailed: false,\r\n      passedEdited: false,\r\n\r\n      addingInProgress: false,\r\n      updatingInProgress: false,\r\n      addingError: null,\r\n      updatingError: null\r\n    };\r\n    // save this state for canceling\r\n    this.baseState = this.state;\r\n  }\r\n\r\n  /** Adds the rating */\r\n  addRating = () => {\r\n    let newRating = new RatingBO(this.state.project, this.state.evaluator, this.state.toBeAssessed, this.state.grade, this.state.passed);\r\n    ManagementAPI.getAPI().addRating(newRating).then(rating => {\r\n      // Backend call sucessfull\r\n      // reinit the dialogs state for a new empty projecttype\r\n      this.setState(this.baseState);\r\n      this.props.onClose(rating); // call the parent with the rating object from backend\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,    // disable loading indicator\r\n        updatingError: e              // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,       // show loading indicator\r\n      updatingError: null             // disable error message\r\n    });\r\n  }\r\n\r\n  /** Updates the rating */\r\n  updateRating = () => {\r\n    // clone the original rating, in case the backend call fails\r\n    let updatedRating = Object.assign(new RatingBO(), this.props.rating);\r\n    // set the new attributes from our dialog\r\n    updatedRating.setProject(this.state.project);\r\n    updatedRating.setEvaluator(this.state.evaluator);\r\n    updatedRating.setToBeAssessed(this.state.toBeAssessed);\r\n    updatedRating.setGrade(this.state.grade);\r\n    updatedRating.setPassed(this.state.passed);\r\n    ManagementAPI.getAPI().updateProjectType(updatedProjectType).then(rating => {\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: null                     // no error message\r\n      });\r\n      // keep the new state as base state\r\n      this.baseState.project = this.state.project;\r\n      this.baseState.evaluator = this.state.evaluator;\r\n      this.baseState.toBeAssessed = this.state.toBeAssessed;\r\n      this.baseState.grade = this.state.grade;\r\n      this.baseState.passed = this.state.passed;\r\n      this.props.onClose(updatedRating);      // call the parent with the new projecttype\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,                 // show loading indicator\r\n      updatingError: null                       // disable error message\r\n    });\r\n  }\r\n\r\n  /** Handles value changes of the forms textfields and validates them */\r\n  textFieldValueChange = (event) => {\r\n    const value = event.target.value;\r\n\r\n    let error = false;\r\n    if (value.trim().length === 0) {\r\n      error = true;\r\n    }\r\n\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n      [event.target.id + 'ValidationFailed']: error,\r\n      [event.target.id + 'Edited']: true\r\n    });\r\n  }\r\n\r\n  /** Handles the close / cancel button click event */\r\n  handleClose = () => {\r\n    // Reset the state\r\n    this.setState(this.baseState);\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, rating, show } = this.props;\r\n    const { project, projectValidationFailed, projectEdited, evaluator, evaluatorValidationFailed, evaluatorEdited,\r\n    toBeAssessed, toBeAssessedValidationFailed, toBeAssessedEdited, grade, gradeValidationFailed, gradeEdited,\r\n    passed, passedValidationFailed, passedEdited, addingInProgress, addingError, updatingInProgress, updatingError } = this.state;\r\n\r\n    let title = '';\r\n    let header = '';\r\n\r\n    if (rating) {\r\n      // customer defindet, so ist an edit dialog\r\n      title = 'Update a rating';\r\n      header = `Rating ID: ${rating.getID()}`;\r\n    } else {\r\n      title = 'Create a new rating';\r\n      header = 'Enter rating data';\r\n    }\r\n\r\n    return (\r\n      show ?\r\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\r\n          <DialogTitle id='form-dialog-title'>{title}\r\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              {header}\r\n            </DialogContentText>\r\n            <form className={classes.root} noValidate autoComplete='off'>\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='project' label='Project:' value={project}\r\n                onChange={this.textFieldValueChange} error={projectValidationFailed}\r\n                helperText={projectValidationFailed ? 'The project must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='evaluator' label='Evaluator:' value={evaluator}\r\n                onChange={this.textFieldValueChange} error={evaluatorValidationFailed}\r\n                helperText={swsValidationFailed ? 'The evaluator must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='toBeAssessed' label='To be assessed' value={toBeAssessed}\r\n                onChange={this.textFieldValueChange} error={toBeAssessedValidationFailed}\r\n                helperText={toBeAssessedValidationFailed ? 'To be assessed must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='grade' label='Grade' value={grade}\r\n                onChange={this.textFieldValueChange} error={gradeValidationFailed}\r\n                helperText={gradeValidationFailed ? 'The grade must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='passed' label='Passed' value={passed}\r\n                onChange={this.textFieldValueChange} error={passedValidationFailed}\r\n                helperText={passedValidationFailed ? 'Passed must contain at least one character' : ' '} />\r\n            </form>\r\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n            {\r\n              // Show error message in dependency of rating prop\r\n              rating ?\r\n                <ContextErrorMessage error={updatingError} contextErrorMsg={`The rating ${rating.getID()} could not be updated.`} onReload={this.updateRating} />\r\n                :\r\n                <ContextErrorMessage error={addingError} contextErrorMsg={`The rating could not be added.`} onReload={this.addRating} />\r\n            }\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color='secondary'>\r\n              Cancel\r\n            </Button>\r\n            {\r\n              // If a rating is given, show an update button, else an add button\r\n              rating ?\r\n                <Button disabled={projectValidationFailed || evaluatorValidationFailed || toBeAssessedValidationFailed||\r\n                gradeValidationFailed || passedValidationFailed} variant='contained' onClick={this.updateRating} color='primary'>\r\n                  Update\r\n              </Button>\r\n                : <Button disabled={projectValidationFailed || !projectEdited || evaluatorValidationFailed || !evaluatorEdited ||\r\n                toBeAssessedValidationFailed || !toBeAssessedEdited || gradeValidationFailed || !gradeEdited ||\r\n                passedValidationFailed || !passedEdited} variant='contained' onClick={this.addProjectType} color='primary'>\r\n                  Add\r\n             </Button>\r\n            }\r\n          </DialogActions>\r\n        </Dialog>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\n/** PropTypes */\r\nRatingForm.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The RatingBO to be edited */\r\n  rating: PropTypes.object,\r\n  /** If true, the form is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**\r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the edited or created ProjectTypeBO as parameter or null, if cancel was pressed.\r\n   *\r\n   * Signature: onClose(RatingBO rating);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(RatingForm);","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ParticipationList.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\StudentListEntry.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\StudentForm.js",["252","253","254","255","256","257"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ManagementAPI from \"../../api/ManagementAPI\";\r\nimport StudentBO from '../../api/StudentBO'\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\n\r\n/**\r\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured\r\n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object.\r\n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\r\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer.\r\n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.\r\n * When the dialog is canceled, onClose is called with null.\r\n *\r\n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\r\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass StudentForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let n = '', ca = '', mn = '';\r\n    if (props.student) {\r\n      n = props.student.getName();\r\n      ca = props.student.getCourseAbbr();\r\n      mn = props.student.getMatriculationNr();\r\n    }\r\n\r\n    // Init the state\r\n    this.state = {\r\n      name: n,\r\n      nameValidationFailed: false,\r\n      nameEdited: false,\r\n      courseAbbr: ca,\r\n      courseAbbrValidationFailed: false,\r\n      courseAbbrEdited: false,\r\n      matriculationNr: mn,\r\n      matriculationNrValidationFailed: false,\r\n      matriculationNrEdited: false,\r\n      addingInProgress: false,\r\n      updatingInProgress: false,\r\n      addingError: null,\r\n      updatingError: null\r\n    };\r\n    // save this state for canceling\r\n    this.baseState = this.state;\r\n  }\r\n\r\n  /** Adds the student */\r\n  addStudent = () => {\r\n    let newStudent = new StudentBO(this.state.name, this.state.courseAbbr, this.state.matriculationNr);\r\n    ManagementAPI.getAPI().addStudent(newStudent).then(student => {\r\n      // Backend call sucessfull\r\n      // reinit the dialogs state for a new empty student\r\n      this.setState(this.baseState);\r\n      this.props.onClose(student); // call the parent with the student object from backend\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,    // disable loading indicator\r\n        updatingError: e              // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,       // show loading indicator\r\n      updatingError: null             // disable error message\r\n    });\r\n  }\r\n\r\n  /** Updates the student */\r\n  updateStudent = () => {\r\n    // clone the original student, in case the backend call fails\r\n    let updatedStudent = Object.assign(new StudentBO(), this.props.student);\r\n    // set the new attributes from our dialog\r\n    updatedStudent.setName(this.state.name);\r\n    updatedStudent.setCourseAbbr(this.state.courseAbbr);\r\n    updatedStudent.setMatriculationNr(this.state.matriculationNr);\r\n    ManagementAPI.getAPI().updateStudent(updatedStudent).then(student => {\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: null                     // no error message\r\n      });\r\n      // keep the new state as base state\r\n      this.baseState.name = this.state.name;\r\n      this.baseState.courseAbbr = this.state.courseAbbr;\r\n      this.baseState.matriculationNr = this.state.matriculationNr;\r\n      this.props.onClose(updatedStudent);     // call the parent with the new student\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,                 // show loading indicator\r\n      updatingError: null                       // disable error message\r\n    });\r\n  }\r\n\r\n  /** Handles value changes of the forms textfields and validates them */\r\n  textFieldValueChange = (event) => {\r\n    const value = event.target.value;\r\n\r\n    let error = false;\r\n    if (value.trim().length === 0) {\r\n      error = true;\r\n    }\r\n\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n      [event.target.id + 'ValidationFailed']: error,\r\n      [event.target.id + 'Edited']: true\r\n    });\r\n  }\r\n\r\n  /** Handles the close / cancel button click event */\r\n  handleClose = () => {\r\n    // Reset the state\r\n    this.setState(this.baseState);\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, student, show } = this.props;\r\n    const { name, nameValidationFailed, nameEdited, courseAbbr, courseAbbrValidationFailed, courseAbbrEdited,\r\n    matriculationNr, matriculationNrValidationFailed, matriculationNrEdited,\r\n    addingInProgress, addingError, updatingInProgress, updatingError } = this.state;\r\n\r\n    let title = '';\r\n    let header = '';\r\n\r\n    if (student) {\r\n      // student defindet, so ist an edit dialog\r\n      title = 'Update a student';\r\n      header = `Student ID: ${student.getID()}`;\r\n    } else {\r\n      title = 'Create a new student';\r\n      header = 'Enter student data';\r\n    }\r\n\r\n    return (\r\n      show ?\r\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\r\n          <DialogTitle id='form-dialog-title'>{title}\r\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              {header}\r\n            </DialogContentText>\r\n            <form className={classes.root} noValidate autoComplete='off'>\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='name' label='Name:' value={Name}\r\n                onChange={this.textFieldValueChange} error={NameValidationFailed}\r\n                helperText={NameValidationFailed ? 'The name must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='courseAbbr' label='Course Abbr:' value={courseAbbr}\r\n                onChange={this.textFieldValueChange} error={courseAbbrValidationFailed}\r\n                helperText={courseAbbrValidationFailed ? 'The Course Abbr must contain at least one character' : ' '} />\r\n               <TextField type='text' required fullWidth margin='normal' id='matriculationNr' label='Matriculation Nr:' value={matriculationNr}\r\n                onChange={this.textFieldValueChange} error={matriculationNrValidationFailed}\r\n                helperText={matriculationNrValidationFailed ? 'The matriculation number must contain at least one character' : ' '} />\r\n            </form>\r\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n            {\r\n              // Show error message in dependency of customer prop\r\n              customer ?\r\n                <ContextErrorMessage error={updatingError} contextErrorMsg={`The student ${student.getID()} could not be updated.`} onReload={this.updateStudent} />\r\n                :\r\n                <ContextErrorMessage error={addingError} contextErrorMsg={`The student could not be added.`} onReload={this.addStudent} />\r\n            }\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color='secondary'>\r\n              Cancel\r\n            </Button>\r\n            {\r\n              // If a student is given, show an update button, else an add button\r\n              customer ?\r\n                <Button disabled={nameValidationFailed || courseAbbrValidationFailed || matriculationNrValidationFailed} variant='contained' onClick={this.updateSemester} color='primary'>\r\n                  Update\r\n              </Button>\r\n                : <Button disabled={nameValidationFailed || !nameEdited || courseAbbrValidationFailed || !courseAbbrEdited || matriculationNrValidationFailed || !matriculationNrEdited} variant='contained' onClick={this.addStudent} color='primary'>\r\n                  Add\r\n             </Button>\r\n            }\r\n          </DialogActions>\r\n        </Dialog>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\n/** PropTypes */\r\nStudentForm.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The StudentBO to be edited */\r\n  student: PropTypes.object,\r\n  /** If true, the form is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**\r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the edited or created StudentBO as parameter or null, if cancel was pressed.\r\n   *\r\n   * Signature: onClose(StudentBO student);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(StudentForm);","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ParticipationForm.js",["258","259","260"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport  ManagementAPI   from '../../api/ManagementAPI';\r\nimport ParticipationBO from '../../api/ParticipationBO';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\n\r\n/**\r\n * Shows a modal form dialog for a ParticipationBO in prop customer. If the participation is set, the dialog is configured\r\n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object.\r\n * If the participation is null, the dialog is configured as a new participation dialog and the textfields are empty.\r\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer.\r\n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.\r\n * When the dialog is canceled, onClose is called with null.\r\n *\r\n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\r\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass ParticipationForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let pr = '', st = '';\r\n    if (props.participation) {\r\n      pr = props.participation.getProject();\r\n      st = props.participation.getStudent();\r\n    }\r\n\r\n    // Init the state\r\n    this.state = {\r\n      project: pr,\r\n      projectValidationFailed: false,\r\n      projectEdited: false,\r\n      student: st,\r\n      studentValidationFailed: false,\r\n      studentEdited: false,\r\n      addingInProgress: false,\r\n      updatingInProgress: false,\r\n      addingError: null,\r\n      updatingError: null\r\n    };\r\n    // save this state for canceling\r\n    this.baseState = this.state;\r\n  }\r\n\r\n  /** Adds the participation */\r\n  addParticipation = () => {\r\n    let newParticipation = new ParticipationBO(this.state.project, this.state.student);\r\n    ManagementAPI.getAPI().addParticipation(newParticipation).then(participation => {\r\n      // Backend call sucessfull\r\n      // reinit the dialogs state for a new empty participation\r\n      this.setState(this.baseState);\r\n      this.props.onClose(participation); // call the parent with the participation object from backend\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,    // disable loading indicator\r\n        updatingError: e              // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,       // show loading indicator\r\n      updatingError: null             // disable error message\r\n    });\r\n  }\r\n\r\n  /** Updates the participation */\r\n  updateParticipation = () => {\r\n    // clone the original participation, in case the backend call fails\r\n    let updatedParticipation = Object.assign(new ParticipationBO(), this.props.participation);\r\n    // set the new attributes from our dialog\r\n    updatedParticipation.setProject(this.state.project);\r\n    updatedParticipation.setStudent(this.state.student);\r\n    ManagementAPI.getAPI().updateParticipation(updatedParticipation).then(participation => {\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: null                     // no error message\r\n      });\r\n      // keep the new state as base state\r\n      this.baseState.project = this.state.project;\r\n      this.baseState.student = this.state.student;\r\n      this.props.onClose(updatedParticipation);      // call the parent with the new participation\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,                 // show loading indicator\r\n      updatingError: null                       // disable error message\r\n    });\r\n  }\r\n\r\n  /** Handles value changes of the forms textfields and validates them */\r\n  textFieldValueChange = (event) => {\r\n    const value = event.target.value;\r\n\r\n    let error = false;\r\n    if (value.trim().length === 0) {\r\n      error = true;\r\n    }\r\n\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n      [event.target.id + 'ValidationFailed']: error,\r\n      [event.target.id + 'Edited']: true\r\n    });\r\n  }\r\n\r\n  /** Handles the close / cancel button click event */\r\n  handleClose = () => {\r\n    // Reset the state\r\n    this.setState(this.baseState);\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, participation, show } = this.props;\r\n    const { project, projectValidationFailed, projectEdited, student, studentValidationFailed, studentEdited, addingInProgress,\r\n      addingError, updatingInProgress, updatingError } = this.state;\r\n\r\n    let title = '';\r\n    let header = '';\r\n\r\n    if (participation) {\r\n      // participation defindet, so ist an edit dialog\r\n      title = 'Update a participation';\r\n      header = `Participation ID: ${participation.getID()}`;\r\n    } else {\r\n      title = 'Create a new participation';\r\n      header = 'Enter participation data';\r\n    }\r\n\r\n    return (\r\n      show ?\r\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\r\n          <DialogTitle id='form-dialog-title'>{title}\r\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              {header}\r\n            </DialogContentText>\r\n            <form className={classes.root} noValidate autoComplete='off'>\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='project' label='Project:' value={project}\r\n                onChange={this.textFieldValueChange} error={projectValidationFailed}\r\n                helperText={projectValidationFailed ? 'The Project must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='student' label='Student:' value={student}\r\n                onChange={this.textFieldValueChange} error={StudentValidationFailed}\r\n                helperText={StudentValidationFailed ? 'The student must contain at least one character' : ' '} />\r\n            </form>\r\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n            {\r\n              // Show error message in dependency of participation prop\r\n              participation ?\r\n                <ContextErrorMessage error={updatingError} contextErrorMsg={`The participation ${participation.getID()} could not be updated.`} onReload={this.updateParticipation} />\r\n                :\r\n                <ContextErrorMessage error={addingError} contextErrorMsg={`The participation could not be added.`} onReload={this.addParticipation} />\r\n            }\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color='secondary'>\r\n              Cancel\r\n            </Button>\r\n            {\r\n              // If a participation is given, show an update button, else an add button\r\n              customer ?\r\n                <Button disabled={projectValidationFailed || studentValidationFailed} variant='contained' onClick={this.updateParticipation} color='primary'>\r\n                  Update\r\n              </Button>\r\n                : <Button disabled={projectValidationFailed || !projectEdited || studentValidationFailed || !studentEdited} variant='contained' onClick={this.addParticipation} color='primary'>\r\n                  Add\r\n             </Button>\r\n            }\r\n          </DialogActions>\r\n        </Dialog>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\n/** PropTypes */\r\nParticipationForm.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ParticipationBO to be edited */\r\n  participation: PropTypes.object,\r\n  /** If true, the form is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**\r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the edited or created ParticipationBO as parameter or null, if cancel was pressed.\r\n   *\r\n   * Signature: onClose(ParticipationBO customer);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ParticipationForm);","C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ParticipationListEntry.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ParticipationDeleteDialog.js",[],"C:\\Users\\henry\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\StudentDeleteDialog.js",[],{"ruleId":"261","replacedBy":"262"},{"ruleId":"263","replacedBy":"264"},{"ruleId":"265","severity":1,"message":"266","line":4,"column":8,"nodeType":"267","messageId":"268","endLine":4,"endColumn":21},{"ruleId":"265","severity":1,"message":"269","line":15,"column":8,"nodeType":"267","messageId":"268","endLine":15,"endColumn":22},{"ruleId":"265","severity":1,"message":"270","line":16,"column":8,"nodeType":"267","messageId":"268","endLine":16,"endColumn":21},{"ruleId":"265","severity":1,"message":"271","line":18,"column":8,"nodeType":"267","messageId":"268","endLine":18,"endColumn":28},{"ruleId":"265","severity":1,"message":"272","line":19,"column":8,"nodeType":"267","messageId":"268","endLine":19,"endColumn":19},{"ruleId":"265","severity":1,"message":"273","line":20,"column":8,"nodeType":"267","messageId":"268","endLine":20,"endColumn":18},{"ruleId":"265","severity":1,"message":"274","line":21,"column":8,"nodeType":"267","messageId":"268","endLine":21,"endColumn":18},{"ruleId":"265","severity":1,"message":"275","line":22,"column":8,"nodeType":"267","messageId":"268","endLine":22,"endColumn":19},{"ruleId":"276","severity":1,"message":"277","line":62,"column":52,"nodeType":"278","endLine":62,"endColumn":88},{"ruleId":"265","severity":1,"message":"279","line":58,"column":22,"nodeType":"267","messageId":"268","endLine":58,"endColumn":30},{"ruleId":"265","severity":1,"message":"280","line":58,"column":33,"nodeType":"267","messageId":"268","endLine":58,"endColumn":40},{"ruleId":"281","severity":1,"message":"282","line":109,"column":3,"nodeType":"283","messageId":"284","endLine":109,"endColumn":12},{"ruleId":"276","severity":1,"message":"277","line":61,"column":55,"nodeType":"278","endLine":61,"endColumn":98},{"ruleId":"276","severity":1,"message":"277","line":61,"column":99,"nodeType":"278","endLine":61,"endColumn":145},{"ruleId":"276","severity":1,"message":"277","line":61,"column":146,"nodeType":"278","endLine":61,"endColumn":185},{"ruleId":"276","severity":1,"message":"277","line":61,"column":186,"nodeType":"278","endLine":61,"endColumn":226},{"ruleId":"276","severity":1,"message":"277","line":61,"column":227,"nodeType":"278","endLine":61,"endColumn":263},{"ruleId":"265","severity":1,"message":"266","line":5,"column":10,"nodeType":"267","messageId":"268","endLine":5,"endColumn":23},{"ruleId":"285","severity":2,"message":"286","line":54,"column":5,"nodeType":"267","messageId":"287","endLine":54,"endColumn":15},{"ruleId":"285","severity":2,"message":"286","line":80,"column":5,"nodeType":"267","messageId":"287","endLine":80,"endColumn":15},{"ruleId":"285","severity":2,"message":"288","line":179,"column":15,"nodeType":"267","messageId":"287","endLine":179,"endColumn":23},{"ruleId":null,"fatal":true,"severity":2,"message":"289","line":69,"column":3},{"ruleId":"285","severity":2,"message":"288","line":330,"column":15,"nodeType":"267","messageId":"287","endLine":330,"endColumn":23},{"ruleId":"261","replacedBy":"290"},{"ruleId":"263","replacedBy":"291"},{"ruleId":"265","severity":1,"message":"292","line":35,"column":11,"nodeType":"267","messageId":"268","endLine":35,"endColumn":12},{"ruleId":"285","severity":2,"message":"293","line":36,"column":29,"nodeType":"267","messageId":"287","endLine":36,"endColumn":30},{"ruleId":"285","severity":2,"message":"293","line":37,"column":19,"nodeType":"267","messageId":"287","endLine":37,"endColumn":20},{"ruleId":null,"fatal":true,"severity":2,"message":"294","line":34,"column":3},{"ruleId":"285","severity":2,"message":"295","line":10,"column":24,"nodeType":"267","messageId":"287","endLine":10,"endColumn":35},{"ruleId":"285","severity":2,"message":"296","line":11,"column":29,"nodeType":"267","messageId":"287","endLine":11,"endColumn":45},{"ruleId":"285","severity":2,"message":"297","line":17,"column":24,"nodeType":"267","messageId":"287","endLine":17,"endColumn":36},{"ruleId":"285","severity":2,"message":"298","line":10,"column":29,"nodeType":"267","messageId":"287","endLine":10,"endColumn":38},{"ruleId":"299","severity":1,"message":"300","line":34,"column":32,"nodeType":"301","messageId":"302","endLine":34,"endColumn":43,"fix":"303"},{"ruleId":"285","severity":2,"message":"304","line":98,"column":46,"nodeType":"267","messageId":"287","endLine":98,"endColumn":64},{"ruleId":"285","severity":2,"message":"305","line":184,"column":29,"nodeType":"267","messageId":"287","endLine":184,"endColumn":48},{"ruleId":"265","severity":1,"message":"306","line":136,"column":13,"nodeType":"267","messageId":"268","endLine":136,"endColumn":17},{"ruleId":"285","severity":2,"message":"307","line":165,"column":114,"nodeType":"267","messageId":"287","endLine":165,"endColumn":118},{"ruleId":"285","severity":2,"message":"308","line":166,"column":61,"nodeType":"267","messageId":"287","endLine":166,"endColumn":81},{"ruleId":"285","severity":2,"message":"308","line":167,"column":29,"nodeType":"267","messageId":"287","endLine":167,"endColumn":49},{"ruleId":"285","severity":2,"message":"288","line":178,"column":15,"nodeType":"267","messageId":"287","endLine":178,"endColumn":23},{"ruleId":"285","severity":2,"message":"288","line":190,"column":15,"nodeType":"267","messageId":"287","endLine":190,"endColumn":23},{"ruleId":"285","severity":2,"message":"309","line":162,"column":61,"nodeType":"267","messageId":"287","endLine":162,"endColumn":84},{"ruleId":"285","severity":2,"message":"309","line":163,"column":29,"nodeType":"267","messageId":"287","endLine":163,"endColumn":52},{"ruleId":"285","severity":2,"message":"288","line":180,"column":15,"nodeType":"267","messageId":"287","endLine":180,"endColumn":23},"no-native-reassign",["310"],"no-negated-in-lhs",["311"],"no-unused-vars","'ManagementAPI' is defined but never used.","Identifier","unusedVar","'AllProjectList' is defined but never used.","'AllRatingList' is defined but never used.","'AllParticipationList' is defined but never used.","'ProjectList' is defined but never used.","'PersonList' is defined but never used.","'RatingList' is defined but never used.","'StudentList' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'PersonID' is assigned a value but never used.","'ownerID' is assigned a value but never used.","no-dupe-keys","Duplicate key 'projectID'.","ObjectExpression","unexpected","no-undef","'ProjectAPI' is not defined.","undef","'customer' is not defined.","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 67 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 68 | \u001b[39m  \u001b[90m/** Handles the onClick event of the delete rating button */\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 69 | \u001b[39m  deleteRatingButtonClicked \u001b[33m=\u001b[39m (event) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 70 | \u001b[39m    event\u001b[33m.\u001b[39mstopPropagation()\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 71 | \u001b[39m    \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39msetState({\u001b[0m\n\u001b[0m \u001b[90m 72 | \u001b[39m      showRatingDeleteDialog\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m\u001b[0m",["310"],["311"],"'c' is assigned a value but never used.","'m' is not defined.","Parsing error: Unexpected reserved word 'static'\n\n\u001b[0m \u001b[90m 32 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 33 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 34 | \u001b[39m  static fromJSON(participations) {\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 35 | \u001b[39m    let result \u001b[33m=\u001b[39m []\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 36 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 37 | \u001b[39m      \u001b[36mif\u001b[39m (\u001b[33mArray\u001b[39m\u001b[33m.\u001b[39misArray(participations)) {\u001b[0m","'aCourseAbbr' is not defined.","'aMatriculationNr' is not defined.","'aCourse_abbr' is not defined.","'aDateTime' is not defined.","no-whitespace-before-property","Unexpected whitespace before property prop.","MemberExpression","unexpectedWhitespace",{"range":"312","text":"313"},"'updatedProjectType' is not defined.","'swsValidationFailed' is not defined.","'name' is assigned a value but never used.","'Name' is not defined.","'NameValidationFailed' is not defined.","'StudentValidationFailed' is not defined.","no-global-assign","no-unsafe-negation",[513,514],""]