[{"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\index.js":"1","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\App.js":"2","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\Theme.js":"3","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\Firebaseconfig.js":"4","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ManagementAPI.js":"5","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\StudentList.js":"6","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllProjectList.js":"7","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllPersonList.js":"8","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\pages\\About.js":"9","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\layout\\Header.js":"10","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\pages\\SignIn.js":"11","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ContextErrorMessage.js":"12","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\LoadingProgress.js":"13","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\PersonList.js":"14","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllRatingList.js":"15","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\RatingList.js":"16","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ProjectList.js":"17","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ProjectDetails.js":"18","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\PersonDetails.js":"19","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\RatingListEntry.js":"20","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ProjectListEntry.js":"21","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ProjectForm.js":"22","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\PersonListEntry.js":"23","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ParticipationList.js":"24","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\PersonDeleteDialog.js":"25","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\PersonForm.js":"26","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ProjectDeleteDialog.js":"27","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllModuleList.js":"28","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllParticipationList.js":"29","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ParticipationBO.js":"30","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\StatusBO.js":"31","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ProjectTypeBO.js":"32","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\StudentBO.js":"33","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\Role.js":"34","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ProjectBO.js":"35","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\PersonBO.js":"36","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ModuleBO.js":"37","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\SemesterBO.js":"38","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\RatingBO.js":"39","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\NamedBusinessObject.js":"40","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\BusinessObject.js":"41","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\RatingDeleteDialog.js":"42","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\RatingForm.js":"43","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\StudentListEntry.js":"44","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\StudentForm.js":"45"},{"size":149,"mtime":1610665892702,"results":"46","hashOfConfig":"47"},{"size":5830,"mtime":1610912647611,"results":"48","hashOfConfig":"47"},{"size":1786,"mtime":1610665892663,"results":"49","hashOfConfig":"47"},{"size":451,"mtime":1610665892662,"results":"50","hashOfConfig":"47"},{"size":43142,"mtime":1610920075772,"results":"51","hashOfConfig":"47"},{"size":7634,"mtime":1610927714248,"results":"52","hashOfConfig":"47"},{"size":2392,"mtime":1610927714205,"results":"53","hashOfConfig":"47"},{"size":2328,"mtime":1610835554022,"results":"54","hashOfConfig":"47"},{"size":0,"mtime":1610665892701,"results":"55","hashOfConfig":"47"},{"size":311,"mtime":1610665892701,"results":"56","hashOfConfig":"47"},{"size":1883,"mtime":1610665892702,"results":"57","hashOfConfig":"47"},{"size":2305,"mtime":1610835554036,"results":"58","hashOfConfig":"47"},{"size":1151,"mtime":1610835554037,"results":"59","hashOfConfig":"47"},{"size":7391,"mtime":1610912647617,"results":"60","hashOfConfig":"47"},{"size":2330,"mtime":1610912647615,"results":"61","hashOfConfig":"47"},{"size":7386,"mtime":1610912647623,"results":"62","hashOfConfig":"47"},{"size":7635,"mtime":1610912647620,"results":"63","hashOfConfig":"47"},{"size":3432,"mtime":1610917378955,"results":"64","hashOfConfig":"47"},{"size":3012,"mtime":1610835554026,"results":"65","hashOfConfig":"47"},{"size":5395,"mtime":1610917378957,"results":"66","hashOfConfig":"47"},{"size":6015,"mtime":1610927714245,"results":"67","hashOfConfig":"47"},{"size":19649,"mtime":1610926649605,"results":"68","hashOfConfig":"47"},{"size":4867,"mtime":1610835554027,"results":"69","hashOfConfig":"47"},{"size":0,"mtime":1610665892695,"results":"70","hashOfConfig":"47"},{"size":4290,"mtime":1610928254125,"results":"71","hashOfConfig":"47"},{"size":8454,"mtime":1610926649604,"results":"72","hashOfConfig":"47"},{"size":5022,"mtime":1610927802653,"results":"73","hashOfConfig":"47"},{"size":2190,"mtime":1610927748952,"results":"74","hashOfConfig":"47"},{"size":0,"mtime":1610927748964,"results":"75","hashOfConfig":"47"},{"size":969,"mtime":1610927714195,"results":"76","hashOfConfig":"47"},{"size":788,"mtime":1610665892675,"results":"77","hashOfConfig":"47"},{"size":821,"mtime":1610665892671,"results":"78","hashOfConfig":"47"},{"size":1031,"mtime":1610665892675,"results":"79","hashOfConfig":"47"},{"size":935,"mtime":1610908017727,"results":"80","hashOfConfig":"47"},{"size":3852,"mtime":1610926649599,"results":"81","hashOfConfig":"47"},{"size":769,"mtime":1610665892669,"results":"82","hashOfConfig":"47"},{"size":729,"mtime":1610665892666,"results":"83","hashOfConfig":"47"},{"size":988,"mtime":1610665892674,"results":"84","hashOfConfig":"47"},{"size":1405,"mtime":1610927714198,"results":"85","hashOfConfig":"47"},{"size":922,"mtime":1610839383391,"results":"86","hashOfConfig":"47"},{"size":581,"mtime":1610839383390,"results":"87","hashOfConfig":"47"},{"size":4472,"mtime":1610927839464,"results":"88","hashOfConfig":"47"},{"size":10829,"mtime":1610926649608,"results":"89","hashOfConfig":"47"},{"size":5419,"mtime":1610835554035,"results":"90","hashOfConfig":"47"},{"size":9511,"mtime":1610926649611,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"4p61sh",{"filePath":"95","messages":"96","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"94"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"102","messages":"103","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"94"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":3,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"94"},{"filePath":"128","messages":"129","errorCount":3,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"94"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"94"},{"filePath":"142","messages":"143","errorCount":2,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"94"},{"filePath":"145","messages":"146","errorCount":59,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"94"},{"filePath":"148","messages":"149","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"94"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":3,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"94"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"165","messages":"166","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"94"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":5,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"94"},{"filePath":"173","messages":"174","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"94"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"183","messages":"184","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"188","messages":"189","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"94"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"193","messages":"194","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"195","usedDeprecatedRules":"94"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":16,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"94"},{"filePath":"201","messages":"202","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":5,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\index.js",[],["205","206"],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\App.js",["207","208","209","210","211","212","213","214","215"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\nimport { Container, ThemeProvider, CssBaseline } from '@material-ui/core';\r\nimport ManagementAPI from \"./api/ManagementAPI\";\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport firebaseConfig from './Firebaseconfig';\r\nimport Theme from './Theme';\r\nimport Header from './components/layout/Header';\r\nimport About from './components/pages/About';\r\nimport SignIn from './components/pages/SignIn';\r\nimport LoadingProgress from './components/dialogs/LoadingProgress';\r\nimport ContextErrorMessage from './components/dialogs/ContextErrorMessage';\r\nimport AllPersonList from './components/AllPersonList';\r\nimport AllProjectList from './components/AllProjectList';\r\nimport AllRatingList from \"./components/AllRatingList\";\r\nimport AllModuleList from \"./components/AllModuleList\";\r\nimport AllParticipationList from \"./components/AllParticipationList\";\r\nimport ProjectList from \"./components/ProjectList\";\r\nimport PersonList from \"./components/PersonList\";\r\nimport RatingList from \"./components/RatingList\";\r\nimport StudentList from \"./components/StudentList\";\r\n//import { ModuleList } from \"./components/AllModuleList\";\r\n//import { ParticipationList } from \"./components/ParticipationList\";\r\n\r\n/**\r\n * The main bank administration app. It uses Googles firebase to log into the bank end. For routing the\r\n * user to the respective pages, react-router-dom ist used.\r\n *\r\n * @see See Google [firebase.auth()](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\r\n * @see See Google [firebase.auth().signInWithRedirect](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signinwithredirect)\r\n * @see [react-router-dom](https://reacttraining.com/react-router/web/guides/quick-start)\r\n *\r\n *\r\n */\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n    //Constrcutor welcher Firebase initialisiert\r\n    constructor (props) {\r\n        super(props)\r\n\r\n\r\n    //Dann wird ein leeres state initalisiert\r\n\t    this.state = {\r\n            person: null,\r\n            appError: null,\r\n            authError: null,\r\n            authLoading: false\r\n        };\r\n    }\r\n\r\n\r\n\r\n    static getDerivedStateFromError(error) {   //Status wird aktualisiert\r\n                                               //so dass beim nächsten Rendern die Fallback UI angezeigt wird\r\n\r\n\t\treturn { appError: error };\r\n\t}\r\n\r\n    \t// Firebase Nutzer logt sich ein und der state wechselt den Zustand\r\n\thandleAuthStateChange = person => {\r\n\t\tif (person) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tauthLoading: true\r\n\t\t\t});\r\n\t\t\t//Person ist eingeloggt\r\n\t\t\tperson.getIdToken().then(token => {\r\n\t\t\t\t// Add the token to the browser's cookies. The server will then be\r\n\t\t\t\t// able to verify the token against the API.\r\n\t\t\t\t// SECURITY NOTE: As cookies can easily be modified, only put the\r\n\t\t\t\t// token (which is verified server-side) in a cookie; do not add other\r\n\t\t\t\t// user information.\r\n\t\t\t\tdocument.cookie = `token=${token};path=/`;\r\n\r\n\t\t\t\t// setzt den Nutzer auf Not bevor der Token angekommt\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tperson: person,\r\n\t\t\t\t\tauthError: null,\r\n\t\t\t\t\tauthLoading: false\r\n\t\t\t\t});\r\n\r\n\r\n\r\n\t\t\t}).catch(e => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tauthError: e,\r\n\t\t\t\t\tauthLoading: false\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Person hat sich ausgeloggt, also clear token\r\n\t\t\tdocument.cookie = 'token=;path=/';\r\n\r\n\t\t\t// setze die ausgeloggte Person auf null\r\n\t\t\tthis.setState({\r\n\t\t\t\tperson: null,\r\n\t\t\t\tauthLoading: false\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Handles the sign in request of the SignIn component uses the firebase.auth() component to sign in.\r\n\t * @see See Google [firebase.auth()](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\r\n\t * @see See Google [firebase.auth().signInWithRedirect](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signinwithredirect)\r\n\t */\r\n\thandleSignIn = () => {\r\n\t\tthis.setState({\r\n\t\t\tauthLoading: true\r\n\t\t});\r\n\t\tconst provider = new firebase.auth.GoogleAuthProvider(); //Erstelle eine Instanz des Google-Provider-Objekts\r\n\t\tfirebase.auth().signInWithRedirect(provider);\r\n    }\r\n\r\n\r\n    /**\r\n\t * Lifecycle method, which is called when the component gets inserted into the browsers DOM.\r\n\t * Initializes the firebase SDK.\r\n\t *\r\n\t * @see See Googles [firebase init process](https://firebase.google.com/docs/web/setup)\r\n\t */\r\n\tcomponentDidMount() {\r\n\t\tfirebase.initializeApp(firebaseConfig);\r\n\t\tfirebase.auth().languageCode = 'en';\r\n\t\tfirebase.auth().onAuthStateChanged(this.handleAuthStateChange);\r\n\t}\r\n\r\n\r\n\r\n\t/** Renders the whole app */\r\n    render() {\r\n\t\tconst { person, appError, authError, authLoading } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<ThemeProvider theme={Theme}>\r\n\t\t\t\t{/* Global CSS reset and browser normalization. CssBaseline kickstarts an elegant, consistent, and simple baseline to build upon. */}\r\n\t\t\t\t<CssBaseline />\r\n\t\t\t\t<Router basename={process.env.PUBLIC_URL}>\r\n\t\t\t\t\t<Container maxWidth='md'>\r\n\t\t\t\t\t\t<Header user={person} />\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Is a user signed in?\r\n\t\t\t\t\t\t\tperson ?\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t<Redirect from='/' to='persons' />\r\n\t\t\t\t\t\t\t\t\t<Route exact path='/persons'>\r\n\t\t\t\t\t\t\t\t\t\t<AllPersonList />\r\n\t\t\t\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t\t\t\t<Route path='/about' component={About} />\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t// else show the sign in page\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t<Redirect to='/index.html' />\r\n\t\t\t\t\t\t\t\t\t<SignIn onSignIn={this.handleSignIn} />\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<LoadingProgress show={authLoading} />\r\n\t\t\t\t\t\t<ContextErrorMessage error={authError} contextErrorMsg={`Something went wrong during sighn in process.`} onReload={this.handleSignIn} />\r\n\t\t\t\t\t\t<ContextErrorMessage error={appError} contextErrorMsg={`Something went wrong inside the app. Please reload the page.`} />\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t</Router>\r\n\t\t\t</ThemeProvider>\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\Theme.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\Firebaseconfig.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ManagementAPI.js",["216"],"import ModuleBO from './ModuleBO';\r\nimport ParticipationBO from './ParticipationBO';\r\nimport ProjectTypeBO from './ProjectTypeBO';\r\nimport RatingBO from './RatingBO';\r\nimport SemesterBO from './SemesterBO';\r\nimport StatusBO from './StatusBO';\r\nimport StudentBO from './StudentBO';\r\nimport PersonBO from './PersonBO';\r\nimport ProjectBO from './ProjectBO';\r\nimport {Role} from './Role';\r\n\r\n\r\n\r\nexport default class ManagementAPI {\r\n\r\n    static #api = null;\r\n    //Local Python backend\r\n  #managementServerBaseURL = '/management';\r\n\r\n\r\n  // Person  related\r\n  #getPersonsURL = () => `${this.#managementServerBaseURL}/person`;\r\n  #addPersonURL = () => `${this.#managementServerBaseURL}/person`;\r\n  #getPersonURL = (id) => `${this.#managementServerBaseURL}/person/${id}`;\r\n  #updatePersonURL = (id) => `${this.#managementServerBaseURL}/person/${id}`;\r\n  #deletePersonURL = (id) => `${this.#managementServerBaseURL}/person/${id}`;\r\n  #searchPersonURL = (personName) => `${this.#managementServerBaseURL}/person-by-name/${personName}`;\r\n\r\n\r\n  //Project related\r\n  #getProjectsURL = () => `${this.#managementServerBaseURL}/project`;\r\n  #addProjectURL = () => `${this.#managementServerBaseURL}/project`;\r\n  #getProjectURL = (id) => `${this.#managementServerBaseURL}/project/${id}`;\r\n  #updateProjectURL = (id) => `${this.#managementServerBaseURL}/project/${id}`;\r\n  #deleteProjectURL = (id) => `${this.#managementServerBaseURL}/project/${id}`;\r\n  #searchProjectURL = (projectOwner) => `${this.#managementServerBaseURL}/project-by-owner/${projectOwner}`;\r\n\r\n  //Student related\r\n  #getStudentsURL = () => `${this.#managementServerBaseURL}/student`;\r\n  #addStudentURL = () => `${this.#managementServerBaseURL}/student`;\r\n  #getStudentURL = (id) => `${this.#managementServerBaseURL}/student/${id}`;\r\n  #updateStudentURL = (id) => `${this.#managementServerBaseURL}/student/${id}`;\r\n  #deleteStudentURL = (id) => `${this.#managementServerBaseURL}/student/${id}`;\r\n  #searchStudentURL = (studentName) => `${this.#managementServerBaseURL}/student-by-name/${studentName}`;\r\n\r\n\r\n  //Participation related\r\n  #getParticipationsURL = () => `${this.#managementServerBaseURL}/participation`;\r\n  #addParticipationURL = () => `${this.#managementServerBaseURL}/participation`;\r\n  #getParticipationURL = (id) => `${this.#managementServerBaseURL}/participation/${id}`;\r\n  #updateParticipationURL = (id) => `${this.#managementServerBaseURL}/participation/${id}`;\r\n  #deleteParticipationURL = (id) => `${this.#managementServerBaseURL}/participation/${id}`;\r\n  #searchParticipationURL = (participationStudent) => `${this.#managementServerBaseURL}/participation-by-student/${participationStudent}`;\r\n\r\n\r\n  //Semester related\r\n  #getSemestersURL = () => `${this.#managementServerBaseURL}/semester`;\r\n  #addSemesterURL = () => `${this.#managementServerBaseURL}/semester`;\r\n  #getSemesterURL = (id) => `${this.#managementServerBaseURL}/semester/${id}`;\r\n  #updateSemesterURL = (id) => `${this.#managementServerBaseURL}/semester/${id}`;\r\n  #deleteSemesterURL = (id) => `${this.#managementServerBaseURL}/semester/${id}`;\r\n  #searchSemesterURL = (semesterName) => `${this.#managementServerBaseURL}/semester-by-name/${semesterName}`;\r\n\r\n\r\n  //Rating related\r\n  #getRatingsURL = () => `${this.#managementServerBaseURL}/rating`;\r\n  #addRatingURL = () => `${this.#managementServerBaseURL}/rating`;\r\n  #getRatingURL = (id) => `${this.#managementServerBaseURL}/rating/${id}`;\r\n  #updateRatingURL = (id) => `${this.#managementServerBaseURL}/rating/${id}`;\r\n  #deleteRatingURL = (id) => `${this.#managementServerBaseURL}/rating/${id}`;\r\n  #searchRatingURL = (ratingName) => `${this.#managementServerBaseURL}/rating-by-name/${ratingName}`;\r\n\r\n\r\n\r\n\r\n  // Role  related\r\n  #getRolesURL = () => `${this.#managementServerBaseURL}/role`;\r\n  #addRoleURL = () => `${this.#managementServerBaseURL}/role`;\r\n  #getRoleURL = (id) => `${this.#managementServerBaseURL}/role/${id}`;\r\n  #updateRoleURL = (id) => `${this.#managementServerBaseURL}/role/${id}`;\r\n  #deleteRoleURL = (id) => `${this.#managementServerBaseURL}/role/${id}`;\r\n  #searchRoleURL = (roleName) => `${this.#managementServerBaseURL}/role-by-name/${roleName}`;\r\n\r\n\r\n\r\n  // ProjectType  related\r\n  #getProjectTypesURL = () => `${this.#managementServerBaseURL}/project_type`;\r\n  #addProjectTypeURL = () => `${this.#managementServerBaseURL}/project_type`;\r\n  #getProjectTypeURL = (id) => `${this.#managementServerBaseURL}/project_type/${id}`;\r\n  #updateProjectTypeURL = (id) => `${this.#managementServerBaseURL}/project_type/${id}`;\r\n  #deleteProjectTypeURL = (id) => `${this.#managementServerBaseURL}/project_type/${id}`;\r\n  #searchProjectTypeURL = (project_typeName) => `${this.#managementServerBaseURL}/project_type-by-name/${project_typeName}`;\r\n\r\n\r\n  // Status  related\r\n  #getStatusesURL = () => `${this.#managementServerBaseURL}/status`;\r\n  #addStatusURL = () => `${this.#managementServerBaseURL}/status`;\r\n  #getStatusURL = (id) => `${this.#managementServerBaseURL}/status/${id}`;\r\n  #updateStatusURL = (id) => `${this.#managementServerBaseURL}/status/${id}`;\r\n  #deleteStatusURL = (id) => `${this.#managementServerBaseURL}/status/${id}`;\r\n  #searchStatusURL = (statusName) => `${this.#managementServerBaseURL}/status-by-name/${statusName}`;\r\n\r\n\r\n\r\n  // Module related\r\n  #getModulesURL = () => `${this.#managementServerBaseURL}/module`;\r\n  #addModuleURL = () => `${this.#managementServerBaseURL}/module`;\r\n  #getModuleURL = (id) => `${this.#managementServerBaseURL}/module/${id}`;\r\n  #updateModuleURL = (id) => `${this.#managementServerBaseURL}/module/${id}`;\r\n  #deleteModuleURL = (id) => `${this.#managementServerBaseURL}/module/${id}`;\r\n  #searchModuleURL = (ModuleName) => `${this.#managementServerBaseURL}/module-by-name/${ModuleName}`;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  static getAPI() {\r\n    if (this.#api == null) {\r\n      this.#api = new ManagementAPI();\r\n    }\r\n    return this.#api;\r\n  }\r\n\r\n\r\n\r\n  #fetchAdvanced = (url, init) => fetch(url, init)\r\n    .then(res => {\r\n      // The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500.\r\n      if (!res.ok) {\r\n        throw Error(`${res.status} ${res.statusText}`);\r\n      }\r\n      return res.json();\r\n    }\r\n    )\r\n\r\n\r\n\r\n\r\n  getPersons() {\r\n    return this.#fetchAdvanced(this.#getPersonsURL()).then((responseJSON) => {\r\n      let personBOs = PersonBO.fromJSON(responseJSON);\r\n      // console.info(personBOs);\r\n      return new Promise(function (resolve) {\r\n\r\n        resolve(personBOs);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  getPerson(id) {\r\n    return this.#fetchAdvanced(this.#getPersonURL(id)).then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n      let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n      // console.info(responsePersonBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responsePersonBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds a Person and returns a Promise, which resolves to a new PersonBO object with the\r\n   * firstName and lastName of the parameter personBO object.\r\n   *\r\n   * @param {PersonBO} personBO to be added. The ID of the new person is set by the backend\r\n   * @public\r\n   */\r\n  addPerson(id) {\r\n    return this.#fetchAdvanced(this.#addPersonURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(personBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n      let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n      // console.info(personBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responsePersonBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Updates a person and returns a Promise, which resolves to a PersonBO.\r\n   *\r\n   * @param {PersonBO} personBO to be updated\r\n   * @public\r\n   */\r\n\r\n  updatePerson(personBO) {\r\n    return this.#fetchAdvanced(this.#updatePersonURL(personBO.getID()), {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(personBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of CustomerBOs.fromJSON\r\n      let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n      // console.info(personBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responsePersonBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of PersonBOs\r\n   *\r\n   * @param {Number} personID to be deleted\r\n   * @public\r\n   */\r\n\r\n\r\n\r\n  deletePerson(personID) {\r\n    return this.#fetchAdvanced(this.#deletePersonURL(personID), {\r\n      method: 'DELETE'\r\n    }).then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON\r\n      let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n      // console.info(accountBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responsePersonBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n   /**\r\n   * Returns a Promise, which resolves to an Array of PersonBOs\r\n   *\r\n   * @param {Number} personID to be deleted\r\n   * @public\r\n   */\r\n\r\n   searchPerson(personName) {\r\n    return this.#fetchAdvanced(this.#searchPersonURL(personName)).then((responseJSON) => {\r\n      let personBOs = PersonBO.fromJSON(responseJSON);\r\n      // console.info(personBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(personBOs);\r\n      })\r\n    })\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n//Jetzt kommt Project\r\n\r\n  getProjects() {\r\n\r\n    return this.#fetchAdvanced(this.#getProjectsURL()).then((responseJSON) => {\r\n      let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n      // console.info(projectBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(projectBOs);\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  getProject(id) {\r\n    return this.#fetchAdvanced(this.#getProjectURL(id)).then((responseJSON) => {\r\n      // We always get an array of ProjectBOs.fromJSON, but only need one object\r\n      let responseProjectBO = ProjectBO.fromJSON(responseJSON)[0];\r\n      // console.info(responseProjectBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseProjectBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds a Project and returns a Promise, which resolves to a new ProjectBO object with all\r\n   *  the parameter of projectBO object.\r\n   *\r\n   * @param {ProjectBO} projectBO to be added. The ID of the new project is set by the backend\r\n   * @public\r\n   */\r\n\r\n    addProject(projectBO) {\r\n    return this.#fetchAdvanced(this.#addProjectURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(projectBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of ProjectBOs.fromJSON, but only need one object\r\n      let responseProjectBO = ProjectBO.fromJSON(responseJSON)[0];\r\n      // console.info(projectBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseProjectBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Updates a person and returns a Promise, which resolves to a ProjectBO.\r\n   *\r\n   * @param {PersonBO} projectBO to be updated\r\n   * @public\r\n   */\r\n\r\n  updateProject(projectBO) {\r\n    return this.#fetchAdvanced(this.#updateProjectURL(projectBO.getID()), {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(projectBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of projectBOs.fromJSON\r\n      let responseProjectBO = ProjectBO.fromJSON(responseJSON)[0];\r\n      // console.info(projectBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseProjectBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of ProjectBOs\r\n   *\r\n   * @param {Number} ProjectID to be deleted\r\n   * @public\r\n   */\r\n\r\n\r\n\r\n  deleteProject(id) {\r\n    return this.#fetchAdvanced(this.#deleteProjectURL(id), {\r\n      method: 'DELETE'\r\n    }).then((responseJSON) => {\r\n      // We always get an array of ProjectBOs.fromJSON\r\n      let responseProjectBO = ProjectBO.fromJSON(responseJSON)[0];\r\n      // console.info(projectBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseProjectBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n   /**\r\n   * Returns a Promise, which resolves to an Array of ProjectBOs\r\n   *\r\n   * @param {Number} projectID to be deleted\r\n   * @public\r\n   */\r\n\r\n   searchProject(projectOwner) {\r\n     return this.#fetchAdvanced(this.#searchProjectURL(projectOwner)).then((responseJSON) => {\r\n      let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n      // console.info(projectBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(projectBOs);\r\n      })\r\n    })\r\n\r\n   }\r\n\r\n\r\n\r\n   //Hier kommt der Student\r\n\r\n  getStudents(){\r\n    return this.#fetchAdvanced(this.#getStudentsURL()).then((responseJSON) => {\r\n      let studentBOs = StudentBO.fromJSON(responseJSON);\r\n      // console.info(studentBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(studentBOs);\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n\r\n  getStudent(id) {\r\n    return this.#fetchAdvanced(this.#getStudentURL(id)).then((responseJSON) => {\r\n      // We always get an array of StudentBOs.fromJSON, but only need one object\r\n      let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n      // console.info(responseStudentBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStudentBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds a Student and returns a Promise, which resolves to a new StudentBO object with all\r\n   *  the parameter of studentBO object.\r\n   *\r\n   * @param {StudentBO} studentBO to be added. The ID of the new student is set by the backend\r\n   * @public\r\n   */\r\n\r\n  addStudent(studentBO) {\r\n    return this.#fetchAdvanced(this.#addStudentURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(studentBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of StudentBOs.fromJSON, but only need one object\r\n      let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n      // console.info(studentBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStudentBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Updates a student and returns a Promise, which resolves to a StudentBO.\r\n   *\r\n   * @param {StudentBO} studentBO to be updated\r\n   * @public\r\n   */\r\n\r\n  updateStudent(studentBO) {\r\n    return this.#fetchAdvanced(this.#updateStudentURL(studentBO.getID()), {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(studentBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of studentBOs.fromJSON\r\n      let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n      // console.info(studentBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStudentBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of StudentBOs\r\n   *\r\n   * @param {Number} StudentID to be deleted\r\n   * @public\r\n   */\r\n\r\n\r\n\r\n  deleteStudent(id) {\r\n    return this.#fetchAdvanced(this.#deleteStudentURL(id), {\r\n      method: 'DELETE'\r\n    }).then((responseJSON) => {\r\n      // We always get an array of StudentBOs.fromJSON\r\n      let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n      // console.info(studentBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStudentBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n   /**\r\n   * Returns a Promise, which resolves to an Array of StudentBOs\r\n   *\r\n   * @param {Number} studentID to be deleted\r\n   * @public\r\n   */\r\n\r\n   searchStudent(studentName) {\r\n     return this.#fetchAdvanced(this.#searchStudentURL(studentName)).then((responseJSON) => {\r\n      let studentBOs = StudentBO.fromJSON(responseJSON);\r\n      // console.info(studentBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(studentBOs);\r\n      })\r\n    })\r\n\r\n   }\r\n\r\n\r\n\r\n//Jetzt kommt Participation\r\n\r\n  getParticipations(){\r\n    return this.#fetchAdvanced(this.#getParticipationsURL()).then((responseJSON) => {\r\n      let participationBOs = ParticipationBO.fromJSON(responseJSON);\r\n      // console.info(participationBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(participationBOs);\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n\r\n  getParticipation(id) {\r\n    return this.#fetchAdvanced(this.#getParticipationURL(participationID)).then((responseJSON) => {\r\n      // We always get an array of ParticipationBOs.fromJSON, but only need one object\r\n      let responseParticipationBO = ParticipationBO.fromJSON(responseJSON)[0];\r\n      // console.info(responseParticipationBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseParticipationBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds a Participation and returns a Promise, which resolves to a new ParticipationBO object with all\r\n   *  the parameter of participationBO object.\r\n   *\r\n   * @param {ParticipationBO} participationBO to be added. The ID of the new project is set by the backend\r\n   * @public\r\n   */\r\n\r\n  addParticipation(participationBO) {\r\n    return this.#fetchAdvanced(this.#addParticipationURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(participationBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of ParticipationBOs.fromJSON, but only need one object\r\n      let responseParticipationBO = ParticipationBO.fromJSON(responseJSON)[0];\r\n      // console.info(participationBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseParticipationBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Updates a participation and returns a Promise, which resolves to a ParticipationBO.\r\n   *\r\n   * @param {ParticipationBO} participationBO to be updated\r\n   * @public\r\n   */\r\n\r\n  updateParticipation(participationBO) {\r\n    return this.#fetchAdvanced(this.#updateParticipationURL(participationBO.getID()), {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(participationBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of participationBOs.fromJSON\r\n      let responseParticipationBO = ParticipationBO.fromJSON(responseJSON)[0];\r\n      // console.info(participationBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseParticipationBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of ParticipationBOs\r\n   *\r\n   * @param {Number} ParticipationID to be deleted\r\n   * @public\r\n   */\r\n\r\n\r\n\r\n  deleteParticipation(id) {\r\n    return this.#fetchAdvanced(this.#deleteParticipationURL(participationID), {\r\n      method: 'DELETE'\r\n    }).then((responseJSON) => {\r\n      // We always get an array of ParticipationBOs.fromJSON\r\n      let responseParticipationBO = ParticipationBO.fromJSON(responseJSON)[0];\r\n      // console.info(participationBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseParticipationBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n   /**\r\n   * Returns a Promise, which resolves to an Array of ParticipationBOs\r\n   *\r\n   * @param {Number} projectID to be deleted\r\n   * @public\r\n   */\r\n\r\n   searchParticipation(participationStudent) {\r\n     return this.#fetchAdvanced(this.#searchParticipationURL(participationStudent)).then((responseJSON) => {\r\n      let participationBOs = ParticipationBO.fromJSON(responseJSON);\r\n      // console.info(participationBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(participationBOs);\r\n      })\r\n    })\r\n\r\n   }\r\n\r\n// Semester\r\n\r\n   getSemesters() {\r\n    return this.#fetchAdvanced(this.#getSemestersURL()).then((responseJSON) => {\r\n      let semesterBOs = SemesterBO.fromJSON(responseJSON);\r\n      // console.info(personBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(semesterBOs);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  getSemester(id) {\r\n    return this.#fetchAdvanced(this.#getSemesterURL(id)).then((responseJSON) => {\r\n      // We always get an array of SemesterBOs.fromJSON, but only need one object\r\n      let responseSemesterBO = SemesterBO.fromJSON(responseJSON)[0];\r\n      // console.info(responsePersonBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseSemesterBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds a Person and returns a Promise, which resolves to a new PersonBO object with the\r\n   * firstName and lastName of the parameter personBO object.\r\n   *\r\n   * @param {PersonBO} personBO to be added. The ID of the new person is set by the backend\r\n   * @public\r\n   */\r\n\r\n  addSemester(semesterBO) {\r\n    return this.#fetchAdvanced(this.#addSemesterURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(semesterBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n      let responsePersonBO = SemesterBO.fromJSON(responseJSON)[0];\r\n      // console.info(projectBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseSemesterBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Updates a semester and returns a Promise, which resolves to a PersonBO.\r\n   *\r\n   * @param {SemesterBO} semesterBO to be updated\r\n   * @public\r\n   */\r\n\r\n  updateSemester(semesterBO) {\r\n    return this.#fetchAdvanced(this.#updatePersonURL(semesterBO.getID()), {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(personBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of CustomerBOs.fromJSON\r\n      let responseSemesterBO = SemesterBO.fromJSON(responseJSON)[0];\r\n      // console.info(projectBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseSemesterBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of SemesterBOs\r\n   *\r\n   * @param {Number} semesterID to be deleted\r\n   * @public\r\n   */\r\n\r\n\r\n\r\n  deleteSemester(id) {\r\n    return this.#fetchAdvanced(this.#deleteSemesterURL(id), {\r\n      method: 'DELETE'\r\n    }).then((responseJSON) => {\r\n      // We always get an array of SemesterBOs.fromJSON\r\n      let responseSemesterBO = SemesterBO.fromJSON(responseJSON)[0];\r\n      // console.info(accountBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseSemesterBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n   /**\r\n   * Returns a Promise, which resolves to an Array of SemesterBOs\r\n   *\r\n   * @param {Number} semesterID to be deleted\r\n   * @public\r\n   */\r\n\r\n   searchSemester(name) {\r\n    return this.#fetchAdvanced(this.#searchSemesterURL(name)).then((responseJSON) => {\r\n      let semesterBOs = SemesterBO.fromJSON(responseJSON);\r\n      // console.info(personBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(semesterBOs);\r\n      })\r\n    })\r\n  }\r\n\r\n}\r\n\r\n\r\n//Rating\r\n\r\n\r\n    getRating(id) {\r\n    return this.#fetchAdvanced(this.#getRatingURL(id)).then((responseJSON) => {\r\n      // We always get an array of RatingBOs.fromJSON, but only need one object\r\n      let responseRatingBO = RatingBO.fromJSON(responseJSON)[0];\r\n      // console.info(responsePersonBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseRatingBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds a Rating and returns a Promise, which resolves to a new RatingBO object with the\r\n   * firstName and lastName of the parameter personBO object.\r\n   *\r\n   * @param {RatingBO} ratingBO to be added. The ID of the new person is set by the backend\r\n   * @public\r\n   */\r\n\r\n  addRating(ratingBO) {\r\n    return this.#fetchAdvanced(this.#addRatingURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(ratingBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of RatingBOs.fromJSON, but only need one object\r\n      let responseRatingBO = RatingBO.fromJSON(responseJSON)[0];\r\n      // console.info(ratingBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseRatingBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Updates a rating and returns a Promise, which resolves to a RatingBO.\r\n   *\r\n   * @param {RatingBO} ratingBO to be updated\r\n   * @public\r\n   */\r\n\r\n  updateRating(ratingBO) {\r\n    return this.#fetchAdvanced(this.#updateRatingURL(ratingBO.getID()), {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(ratingBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of RatingBOs.fromJSON\r\n      let responseRatingBO = RatingBO.fromJSON(responseJSON)[0];\r\n      // console.info(ratingBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseRatingBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of RatingBOs\r\n   *\r\n   * @param {Number} ratingID to be deleted\r\n   * @public\r\n   */\r\n\r\n\r\n\r\n  deleteRating(id) {\r\n    return this.#fetchAdvanced(this.#deleteRatingURL(id), {\r\n      method: 'DELETE'\r\n    }).then((responseJSON) => {\r\n      // We always get an array of RatingBOs.fromJSON\r\n      let responseRatingBO = RatingBO.fromJSON(responseJSON)[0];\r\n      // console.info(ratingBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseRatingBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n   /**\r\n   * Returns a Promise, which resolves to an Array of RatingBOs\r\n   *\r\n   * @param {Number} ratingID to be deleted\r\n   * @public\r\n   */\r\n\r\n   searchRating(ratingName) {\r\n    return this.#fetchAdvanced(this.#searchRatingURL(personName)).then((responseJSON) => {\r\n      let ratingOs = RatingBO.fromJSON(responseJSON);\r\n      // console.info(ratingBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(ratingBOs);\r\n      })\r\n    })\r\n  }\r\n\r\n}\r\n\r\n//Role\r\n     getRoles() {\r\n    return this.#fetchAdvanced(this.#getRolesURL()).then((responseJSON) => {\r\n      let roleBOs = RoleBO.fromJSON(responseJSON);\r\n      // console.info(roleBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(roleBOs);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  getRole(id) {\r\n    return this.#fetchAdvanced(this.#getRoleURL(id)).then((responseJSON) => {\r\n      // We always get an array of RoleBOs.fromJSON, but only need one object\r\n      let responseRoleBO = RoleBO.fromJSON(responseJSON)[0];\r\n      // console.info(responseRoleBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseRoleBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds a Role and returns a Promise, which resolves to a new RoleBO object with the\r\n   * firstName and lastName of the parameter personBO object.\r\n   *\r\n   * @param {RoleBO} roleBO to be added. The ID of the new role is set by the backend\r\n   * @public\r\n   */\r\n\r\n  addRole(roleBO) {\r\n    return this.#fetchAdvanced(this.#addRoleURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(roleBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of RoleBOs.fromJSON, but only need one object\r\n      let responseRoleBO = RoleBO.fromJSON(responseJSON)[0];\r\n      // console.info(roleBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseRoleBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Updates a role and returns a Promise, which resolves to a RoleBO.\r\n   *\r\n   * @param {RoleBO} roleBO to be updated\r\n   * @public\r\n   */\r\n\r\n  updateRole(roleBO) {\r\n    return this.#fetchAdvanced(this.#updateRoleURL(roleBO.getID()), {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(roleBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of RoleBOs.fromJSON\r\n      let responseRoleBO = RoleBO.fromJSON(responseJSON)[0];\r\n      // console.info(roleBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseRoleBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of RoleBOs\r\n   *\r\n   * @param {Number} roleID to be deleted\r\n   * @public\r\n   */\r\n\r\n\r\n\r\n  deleteRole(id) {\r\n    return this.#fetchAdvanced(this.#deleteRoleURL(id), {\r\n      method: 'DELETE'\r\n    }).then((responseJSON) => {\r\n      // We always get an array of RoleBOs.fromJSON\r\n      let responseRoleBO = RoleBO.fromJSON(responseJSON)[0];\r\n      // console.info(roleBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseRoleBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n   /**\r\n   * Returns a Promise, which resolves to an Array of RoleBOs\r\n   *\r\n   * @param {Number} roleID to be deleted\r\n   * @public\r\n   */\r\n\r\n   searchRole(roleName) {\r\n    return this.#fetchAdvanced(this.#searchRoleURL(roleName)).then((responseJSON) => {\r\n      let roleBOs = RoleBO.fromJSON(responseJSON);\r\n      // console.info(roleBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(roleBOs);\r\n      })\r\n    })\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n//ProjectType\r\n   getProjectTypes() {\r\n    return this.#fetchAdvanced(this.#getProjectTypesURL()).then((responseJSON) => {\r\n      let project_typeBOs = ProjectTypeBO.fromJSON(responseJSON);\r\n      // console.info(projectTypeBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(project_typeBOs);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  getProjectType(id) {\r\n    return this.#fetchAdvanced(this.#getProjectTypeURL(id)).then((responseJSON) => {\r\n      // We always get an array of ProjectTypeBOs.fromJSON, but only need one object\r\n      let responseProjectTypeBO = ProjectTypeBO.fromJSON(responseJSON)[0];\r\n      // console.info(responseProjectTypeBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseProjectTypeBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds a ProjectType and returns a Promise, which resolves to a new PersonBO object with the\r\n   * firstName and lastName of the parameter projectTypeBO object.\r\n   *\r\n   * @param {PersonBO} personBO to be added. The ID of the new person is set by the backend\r\n   * @public\r\n   */\r\n\r\n  addProjectType(projectTypeBO) {\r\n    return this.#fetchAdvanced(this.#addProjectTypeURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(projectTypeBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of ProjectTypePBOs.fromJSON, but only need one object\r\n      let responseProjectTypeBO = ProjectTypeBO.fromJSON(responseJSON)[0];\r\n      // console.info(projectTypeBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseProjectTypeBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Updates a project_type and returns a Promise, which resolves to a ProjectTypeBO.\r\n   *\r\n   * @param {ProjectTypeBO} projectTypeBO to be updated\r\n   * @public\r\n   */\r\n\r\n  updateProjectType(projectTypeBO) {\r\n    return this.#fetchAdvanced(this.#updateProjectTypeURL(projectTypeBO.getID()), {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(projectTypeBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of ProjectTypeBOs.fromJSON\r\n      let responseProjectTypeBO = ProjectTypeBO.fromJSON(responseJSON)[0];\r\n      // console.info(projectTypeBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseProjectTypeBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of ProjectTypeBOs\r\n   *\r\n   * @param {Number} projectTypeID to be deleted\r\n   * @public\r\n   */\r\n\r\n\r\n\r\n  deleteProjectType(id) {\r\n    return this.#fetchAdvanced(this.#deleteProjectTypeURL(id), {\r\n      method: 'DELETE'\r\n    }).then((responseJSON) => {\r\n      // We always get an array of ProjectTypeBOs.fromJSON\r\n      let responseProjectTypeBO = ProjectTypePersonBO.fromJSON(responseJSON)[0];\r\n      // console.info(projectTypeBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseProjectTypeBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n   /**\r\n   * Returns a Promise, which resolves to an Array of ProjectTypeBOs\r\n   *\r\n   * @param {Number} projectTypeID to be deleted\r\n   * @public\r\n   */\r\n\r\n   searchProjectType(projectTypeName) {\r\n    return this.#fetchAdvanced(this.#searchProjectTypeURL(projectTypeName)).then((responseJSON) => {\r\n      let projectTypeBOs = ProjectTypeBO.fromJSON(responseJSON);\r\n      // console.info(personBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(projectTypeBOs);\r\n      })\r\n    })\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n  getModules(){\r\n    return this.#fetchAdvanced(this.#getModulesURL()).then((responseJSON) => {\r\n      let moduleBOs = ModuleBO.fromJSON(responseJSON);\r\n      // console.info(moduleBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(moduleBOs);\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n\r\n  getModule(id) {\r\n    return this.#fetchAdvanced(this.#getModuleURL(id)).then((responseJSON) => {\r\n      // We always get an array of ModuleBOs.fromJSON, but only need one object\r\n      let responseModuleBO = ModuleBO.fromJSON(responseJSON)[0];\r\n      // console.info(responseModuleBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseModuleBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds a Module and returns a Promise, which resolves to a new ModuleBO object with all\r\n   *  the parameter of moduleBO object.\r\n   *\r\n   * @param {ModuleBO} moduleBO to be added. The ID of the new module is set by the backend\r\n   * @public\r\n   */\r\n\r\n  addModule(moduleBO) {\r\n    return this.#fetchAdvanced(this.#addModuleURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(moduleBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of ModuleBOs.fromJSON, but only need one object\r\n      let responseModuleBO = ModuleBO.fromJSON(responseJSON)[0];\r\n      // console.info(moduleBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseModuleBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Updates a module and returns a Promise, which resolves to a ModuleBO.\r\n   *\r\n   * @param {ModuleBO} moduleBO to be updated\r\n   * @public\r\n   */\r\n\r\n  updateModule(moduleBO) {\r\n    return this.#fetchAdvanced(this.#updateModuleURL(moduleBO.getID()), {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(moduleBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of moduleBOs.fromJSON\r\n      let responseModuleBO = ModuleBO.fromJSON(responseJSON)[0];\r\n      // console.info(moduleBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseModuleBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of ModuleBOs\r\n   *\r\n   * @param {Number} ModuleID to be deleted\r\n   * @public\r\n   */\r\n\r\n\r\n\r\n  deleteModule(id) {\r\n    return this.#fetchAdvanced(this.#deleteModuleURL(moduleID), {\r\n      method: 'DELETE'\r\n    }).then((responseJSON) => {\r\n      // We always get an array of moduleBOs.fromJSON\r\n      let responseModuleBO = ModuleBO.fromJSON(responseJSON)[0];\r\n      // console.info(moduleBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseModuleBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n   /**\r\n   * Returns a Promise, which resolves to an Array of ModuleBOs\r\n   *\r\n   * @param {Number} moduleID to be deleted\r\n   * @public\r\n   */\r\n\r\n   searchModule(moduleName) {\r\n     return this.#fetchAdvanced(this.#searchModuleURL(moduleName)).then((responseJSON) => {\r\n      let moduleBOs = ModuleBO.fromJSON(responseJSON);\r\n      // console.info(moduleBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(moduleBOs);\r\n      })\r\n    })\r\n\r\n   }\r\n\r\n\r\n    /Jetzt kommt Status\r\n\r\n   getStatuses () {\r\n    return this.#fetchAdvanced(this.#getStatusesURL()).then((responseJSON) => {\r\n      let statusBOs = StatusBO.fromJSON(responseJSON);\r\n      // console.info(statusBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(statusBOs);\r\n      })\r\n    }}\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  getStatus(id) {\r\n    return this.#fetchAdvanced(this.#getStatusURL(id)).then((responseJSON) => {\r\n      // We always get an array of StatusBOs.fromJSON, but only need one object\r\n      let responseStatusBO = StatusBO.fromJSON(responseJSON)[0];\r\n      // console.info(responseStatusBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStatusBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds a Status and returns a Promise, which resolves to a new StatusBO object with all\r\n   *  the parameter of statusBO object.\r\n   *\r\n   * @param {StatusBO} statusBO to be added. The ID of the new status is set by the backend\r\n   * @public\r\n   */\r\n\r\n  addStatus(statusBO) {\r\n    return this.#fetchAdvanced(this.#addStatusURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(statusBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of StatusBOs.fromJSON, but only need one object\r\n      let responseStatusBO = StatusBO.fromJSON(responseJSON)[0];\r\n      // console.info(statusBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStatusBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Updates a status and returns a Promise, which resolves to a StatusBO.\r\n   *\r\n   * @param {StatusBO} statusBO to be updated\r\n   * @public\r\n   */\r\n\r\n  updateStatus(statusBO) {\r\n    return this.#fetchAdvanced(this.#updateStatusURL(statusBO.getID()), {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(statusBO)\r\n    }).then((responseJSON) => {\r\n      // We always get an array of statusBOs.fromJSON\r\n      let responseStatusBO = StatusBO.fromJSON(responseJSON)[0];\r\n      // console.info(statusBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStatusBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of StatusBOs\r\n   *\r\n   * @param {Number} PStatusID to be deleted\r\n   * @public\r\n   */\r\n\r\n\r\n\r\n  deleteStatus(statusID) {\r\n    return this.#fetchAdvanced(this.#deleteStatusURL(id), {\r\n      method: 'DELETE'\r\n    }).then((responseJSON) => {\r\n      // We always get an array of StatusBOs.fromJSON\r\n      let responseStatusBO = StatusO.fromJSON(responseJSON)[0];\r\n      // console.info(statusBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStatusBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n   /**\r\n   * Returns a Promise, which resolves to an Array of StatusBOs\r\n   *\r\n   * @param {Number} statusID to be deleted\r\n   * @public\r\n   */\r\n\r\n   searchStatus(statusOwner) {\r\n     return this.#fetchAdvanced(this.#searchStatusURL(statusOwner)).then((responseJSON) => {\r\n      let statusBOs = StatusBO.fromJSON(responseJSON);\r\n      // console.info(statusBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(statusBOs);\r\n      })\r\n    })\r\n\r\n   }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\StudentList.js",["217"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport { withRouter } from 'react-router-dom';\r\nimport ManagementAPI from '../api/ManagementAPI';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport StudentForm from './dialogs/StudentForm';\r\nimport StudentListEntry from './StudentListEntry';\r\n\r\n/**\r\n * Controlls a list of CustomerListEntrys to create a accordion for each customer.\r\n *\r\n * @see See [CustomerListEntry](#customerlistentry)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass StudentList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // console.log(props);\r\n    let expandedID = null;\r\n\r\n    if (this.props.location.expandStudent) {\r\n      expandedID = this.props.location.expandStudent.getID();\r\n    }\r\n\r\n    // Init an empty state\r\n    this.state = {\r\n      student: [],\r\n      filteredStudent: [],\r\n      studentFilter: '',\r\n      error: null,\r\n      loadingInProgress: false,\r\n      expandedStudentID: expandedID,\r\n      showStudentForm: false\r\n    };\r\n  }\r\n\r\n  /** Fetches all CustomerBOs from the backend */\r\n  getStudent = () => {\r\n    ManagementAPI.getAPI().getStudent()\r\n\r\n      .then(studentBOs =>\r\n        this.setState({               // Set new state when CustomerBOs have been fetched\r\n         student: studentBOs,\r\n          filteredStudent: [...studentBOs], // store a copy\r\n          loadingInProgress: false,   // disable loading indicator\r\n          error: null\r\n        })).catch(e =>\r\n          this.setState({             // Reset state with error from catch\r\n           student: [],\r\n            loadingInProgress: false, // disable loading indicator\r\n            error: e\r\n          })\r\n        );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      error: null\r\n    });\r\n  }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    this.getStudent();\r\n  }\r\n\r\n  /**\r\n   * Handles onExpandedStateChange events from the CustomerListEntry component. Toggels the expanded state of\r\n   * the CustomerListEntry of the given CustomerBO.\r\n   *\r\n   * @param {customer} CustomerBO of the CustomerListEntry to be toggeled\r\n   */\r\n  onExpandedStateChange = student => {\r\n    // console.log(customerID);\r\n    // Set expandend customer entry to null by default\r\n    let newID = null;\r\n\r\n    // If same customer entry is clicked, collapse it else expand a new one\r\n    if (student.getID() !== this.state.expandedStudentID) {\r\n      // Expand the customer entry with customerID\r\n      newID = student.getID();\r\n    }\r\n    // console.log(newID);\r\n    this.setState({\r\n      expandedStudentID: newID,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles onCustomerDeleted events from the CustomerListEntry component\r\n   *\r\n   * @param {customer} CustomerBO of the CustomerListEntry to be deleted\r\n   */\r\n  studentDeleted = student => {\r\n    const newStudenList = this.state.student.filter(studentFromState => studentFromState.getID() !== student.getID());\r\n    this.setState({\r\n      student: newCustomrList,\r\n      filteredCustomers: [...newStudenList],\r\n      showStudentForm: false\r\n    });\r\n  }\r\n\r\n  /** Handles the onClick event of the add customer button */\r\n  addStudentButtonClicked = event => {\r\n    // Do not toggle the expanded state\r\n    event.stopPropagation();\r\n    //Show the CustmerForm\r\n    this.setState({\r\n      showStudentForm: true\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the CustomerForm */\r\n  studentFormClosed = student => {\r\n    // customer is not null and therefore created\r\n    if (student) {\r\n      const newStudenList = [...this.state.student, student];\r\n      this.setState({\r\n        student: newStudenList,\r\n        filteredStudent: [...newStudenList],\r\n        showStudentForm: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showStudentForm: false\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handels onChange events of the customer filter text field */\r\n  filterFieldValueChange = event => {\r\n    const value = event.target.value.toLowerCase();\r\n    this.setState({\r\n      filteredStudent: this.state.student.filter(student => {\r\n        let CourseAbbrContainsValue = student.getCourseAbbr().toLowerCase().includes(value);\r\n        let MatriculationNrContainsValue = student.getMatriculationNr().toLowerCase().includes(value);\r\n        return CourseAbbrContainsValue || MatriculationNrContainsValue;\r\n      }),\r\n      studentFilter: value\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the clear filter button */\r\n  clearFilterFieldButtonClicked = () => {\r\n    // Reset the filter\r\n    this.setState({\r\n      filtereStudent: [...this.state.student],\r\n      studentFilter: ''\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { filteredStudent, studentFilter, expandedStudentID, loadingInProgress, error, showStudentForm } = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <Grid className={classes.studentFilter} container spacing={1} justify='flex-start' alignItems='center'>\r\n          <Grid item>\r\n            <Typography>\r\n              Filter student list course_abbr :\r\n              </Typography>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              autoFocus\r\n              fullWidth\r\n              id='studentFilter'\r\n              type='text'\r\n              value={studentFilter}\r\n              onChange={this.filterFieldValueChange}\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position='end'>\r\n                  <IconButton onClick={this.clearFilterFieldButtonClicked}>\r\n                    <ClearIcon />\r\n                  </IconButton>\r\n                </InputAdornment>,\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs />\r\n          <Grid item>\r\n            <Button variant='contained' color='primary' startIcon={<AddIcon />} onClick={this.addCustomerButtonClicked}>\r\n              Add Customer\r\n          </Button>\r\n          </Grid>\r\n        </Grid>\r\n        {\r\n          // Show the list of CustomerListEntry components\r\n          // Do not use strict comparison, since expandedCustomerID maybe a string if given from the URL parameters\r\n          filteredStudent.map(student =>\r\n            <StudentListEntry key={student.getID()} student{student} expandedState={expandedStudentID === student.getID()}\r\n              onExpandedStateChange={this.onExpandedStateChange}\r\n              onStudentDeleted={this.studentDeleted}\r\n            />)\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of student could not be loaded.`} onReload={this.getStudent} />\r\n        <StudentForm show={showStudentForm} onClose={this.studentFormClosed} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  studentFilter: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nStudentList.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(StudentList));","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllProjectList.js",["218"],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllPersonList.js",["219"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core';\r\nimport ManagementAPI from '../api/ManagementAPI';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\nimport PersonDetails from './PersonDetails';\r\n\r\n/**\r\n * Shows all accounts of the bank.\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass AllPersonList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init an empty state\r\n    this.state = {\r\n      accounts: [],\r\n      loadingInProgress: false,\r\n      loadingError: null,\r\n    };\r\n  }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    this.loadPersons();\r\n  }\r\n\r\n  /** gets the account list for this account */\r\n  loadPersons = () => {\r\n    ManagementAPI.getAPI().getAllPersons().then(persons =>\r\n      this.setState({\r\n        persons: persons,\r\n        loadingInProgress: false, // loading indicator\r\n        loadingError: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          loadingInProgress: false,\r\n          loadingError: e\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { persons, loadingInProgress, loadingError } = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n          {\r\n            persons.map(person => <PersonDetails key={person.getID()}\r\n            personID={person.getRole().toString()} personID={person.getID().toString()} />)\r\n          }\r\n          <LoadingProgress show={loadingInProgress} />\r\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The list of all person of the bank could not be loaded.`} onReload={this.loadPersons} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nAllPersonList.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(AllPersonList);\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\pages\\About.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\layout\\Header.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\pages\\SignIn.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ContextErrorMessage.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\LoadingProgress.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\PersonList.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllRatingList.js",["220","221","222","223","224"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core';\r\nimport {ManagementAPI} from '../api/ManagementAPI';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n/**import Detail from './AccountDetail';\r\n\r\n/**\r\n * Shows all accounts of the bank.\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass AllRatingList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init an empty state\r\n    this.state = {\r\n      ratings: [],\r\n      loadingInProgress: false,\r\n      loadingError: null,\r\n    };\r\n  }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    this.loadAccounts();\r\n  }\r\n\r\n  /** gets the account list for this account */\r\n  loadAccounts = () => {\r\n    ManagementAPI.getAPI().getAllRatings().then(ratings =>\r\n      this.setState({\r\n        ratings: ratings,\r\n        loadingInProgress: false, // loading indicator\r\n        loadingError: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          loadingInProgress: false,\r\n          loadingError: e\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { accounts, loadingInProgress, loadingError } = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n          {\r\n            ratings.map(rating => <RatingDetail key={rating.getID()}\r\n            ratingID={rating.getOwner().toString()} ratingID={account.getID().toString()} />)\r\n          }\r\n          <LoadingProgress show={loadingInProgress} />\r\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The list of all accounts of the bank could not be loaded.`} onReload={this.loadAccounts} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nAllRatingList.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(AllRatingList);\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\RatingList.js",["225","226","227","228","229"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { ManagementAPI } from '../api/ManagementAPI';\r\nimport ContextErrorMessage from '../dialogs/ContextErrorMessage';\r\nimport LoadingProgress from '../dialogs/LoadingProgress';\r\nimport RatingForm from '../dialogs/RatingForm';\r\nimport RatingListEntry from './RatingListEntry';\r\n\r\n/**\r\n * Controlls a list of RatingListEntrys to create a accordion for each person.\r\n *\r\n * @see See [RatingListEntry](#ratinglistentry)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass RatingList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // console.log(props);\r\n    let expandedID = null;\r\n\r\n    if (this.props.location.expandPerson) {\r\n      expandedID = this.props.location.expandPerson.getID();\r\n    }\r\n\r\n    // Init an empty state\r\n    this.state = {\r\n      ratings: [],\r\n      filteredRatings: [],\r\n      ratingFilter: '',\r\n      error: null,\r\n      loadingInProgress: false,\r\n      expandedRatingID: expandedID,\r\n      showRatingForm: false\r\n    };\r\n  }\r\n\r\n  /** Fetches all RatingBOs from the backend */\r\n  getRatings = () => {\r\n  console.log(\"vor fetch\")\r\n    ManagementAPI.getAPI().getRatings()\r\n\r\n\r\n      .then(ratingBOs =>\r\n        this.setState({               // Set new state when RatingBOs have been fetched\r\n          ratings: ratingBOs,\r\n          filteredRatings: [...ratingBOs], // store a copy\r\n          loadingInProgress: false,   // disable loading indicator\r\n          error: null\r\n        })).catch(e =>\r\n          this.setState({             // Reset state with error from catch\r\n            ratings: [],\r\n            loadingInProgress: false, // disable loading indicator\r\n            error: e\r\n          })\r\n        );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      error: null\r\n    });\r\n  }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    this.getRatings();\r\n  }\r\n\r\n  /**\r\n   * Handles onExpandedStateChange events from the PersonListEntry component. Toggels the expanded state of\r\n   * the PersonListEntry of the given PersonBO.\r\n   *\r\n   * @param {person} PersonBO of the PersonListEntry to be toggeled\r\n   */\r\n  onExpandedStateChange = rating => {\r\n    // console.log(personID);\r\n    // Set expandend person entry to null by default\r\n    let newID = null;\r\n\r\n    // If same person entry is clicked, collapse it else expand a new one\r\n    if (rating.getID() !== this.state.expandedRatingID) {\r\n      // Expand the person entry with personID\r\n      newID =rating.getID();\r\n    }\r\n    // console.log(newID);\r\n    this.setState({\r\n      expandedRatingID: newID,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles onPersonDeleted events from the PersonListEntry component\r\n   *\r\n   * @param {person} PersonBO of the PersonListEntry to be deleted\r\n   */\r\n  ratingDeleted = rating => {\r\n    const newRatingList = this.state.ratings.filter(ratingFromState => ratingFromState.getID() !== rating.getID());\r\n    this.setState({\r\n      ratings: newRatingList,\r\n      filteredRatings: [...newRatingList],\r\n      showPersonForm: false\r\n    });\r\n  }\r\n\r\n  /** Handles the onClick event of the add person button */\r\n  addRatingButtonClicked = event => {\r\n    // Do not toggle the expanded state\r\n    event.stopPropagation();\r\n    //Show the CustmerForm\r\n    this.setState({\r\n      showRatingForm: true\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the RatingForm */\r\n  ratingFormClosed = rating => {\r\n    // rating is not null and therefore created\r\n    if (rating) {\r\n      const newRatingList = [...this.state.ratings, person];\r\n      this.setState({\r\n        ratings: newRatingList,\r\n        filteredRating: [...newRatingList],\r\n        showRatingForm: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showRatingForm: false\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handels onChange events of the rating filter text field */\r\n  filterFieldValueChange = event => {\r\n    const value = event.target.value.toLowerCase();\r\n    this.setState({\r\n      filteredRatings: this.state.ratings.filter(rating => {\r\n        let nameContainsValue = rating.getName().toLowerCase().includes(value);\r\n\r\n        return nameContainsValue\r\n      }),\r\n      ratingFilter: value\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the clear filter button */\r\n  clearFilterFieldButtonClicked = () => {\r\n    // Reset the filter\r\n    this.setState({\r\n      filteredPersons: [...this.state.ratings],\r\n      ratingFilter: ''\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { filteredRatings,ratingFilter, expandedRatingID, loadingInProgress, error, showRatingForm } = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <Grid className={classes.ratingFilter} container spacing={1} justify='flex-start' alignItems='center'>\r\n          <Grid item>\r\n            <Typography>\r\n              Filter rating list by name:\r\n              </Typography>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              autoFocus\r\n              fullWidth\r\n              id='ratingFilter'\r\n              type='text'\r\n              value={ratingilter}\r\n              onChange={this.filterFieldValueChange}\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position='end'>\r\n                  <IconButton onClick={this.clearFilterFieldButtonClicked}>\r\n                    <ClearIcon />\r\n                  </IconButton>\r\n                </InputAdornment>,\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs />\r\n          <Grid item>\r\n            <Button variant='contained' color='primary' startIcon={<AddIcon />} onClick={this.addRatingButtonClicked}>\r\n              Add Rating\r\n          </Button>\r\n          </Grid>\r\n        </Grid>\r\n        {\r\n          // Show the list of RatingListEntry components\r\n          // Do not use strict comparison, since expandedRatingID maybe a string if given from the URL parameters\r\n          filteredRating.map(rating =>\r\n            <RatingListEntry key={rating.getID()} rating={rating} expandedState={expandedRatingID === rating.getID()}\r\n              onExpandedStateChange={this.onExpandedStateChange}\r\n              onRatingDeleted={this.ratingDeleted}\r\n            />)\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of ratings could not be loaded.`} onReload={this.getRatings} />\r\n        <RatingForm show={showRatingForm} onClose={this.ratingFormClosed} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  ratingFilter: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nRatingList.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(RatingList));","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ProjectList.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ProjectDetails.js",["230","231"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Paper } from '@material-ui/core';\r\nimport ManagementAPI from '../api/ManagementAPI';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\n/**\r\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it.\r\n *\r\n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\r\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass ProjectDetail extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init state\r\n    this.state = {\r\n      customer: null,\r\n      loadingInProgress: false,\r\n      loadingError: null,\r\n    };\r\n  }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    this.getProject();\r\n  }\r\n\r\n  /** gets the balance for this account */\r\n  getProject = () => {\r\n    ManagementAPI.getAPI().getProject(this.props.projectID).then(project =>\r\n      this.setState({\r\n        project: project,\r\n        loadingInProgress: false,\r\n        loadingError: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          project: null,\r\n          loadingInProgress: false,\r\n          loadingError: e\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, projectID, ownerID } = this.props;\r\n    const { project, loadingInProgress, loadingError } = this.state;\r\n\r\n    return (\r\n      <Paper variant='outlined' className={classes.root}>\r\n\r\n        <Typography variant='h6'>\r\n          Project\r\n        </Typography>\r\n        <Typography className={classes.ProjectEntry}>\r\n          ID: {projectID}\r\n        </Typography>\r\n        {\r\n          project ?\r\n            <Typography>\r\n              Project: {project.getName()}, {project.getSemester()},{project.getModule()},\r\n              {project.getShortDescription()}, {project.getExternalPartnerlist()}, {project.getCapacity()},\r\n              {project.getBDAP()}, {project.getBBLP()}, {project.getBDLP()}, {project.getPDL()}, {project.getLanguage()},\r\n              {project.getRoom()}, {project.getSpecialRoom()}, {project.getFlag()}, {project.getStatus()},\r\n              {project.getProjectType()}, {project.getOwner()}\r\n            </Typography>\r\n            : null\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={loadingError} contextErrorMsg={`The data of project id ${projectID} could not be loaded.`} onReload={this.getProject} />\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n    padding: theme.spacing(1),\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  projectEntry: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nProjectDetail.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The projectID to be rendered */\r\n  projectID: PropTypes.string.isRequired,\r\n  /** The projectID to be rendered */\r\n  projectID: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ProjectDetail);","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\PersonDetails.js",["232"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Paper } from '@material-ui/core';\r\nimport ManagementAPI from '../api/ManagementAPI';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\n/**\r\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it.\r\n *\r\n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\r\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass PersonDetails extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init state\r\n    this.state = {\r\n      Person: null,\r\n      loadingInProgress: false,\r\n      loadingError: null,\r\n    };\r\n  }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    this.getPerson();\r\n  }\r\n\r\n  /** gets the balance for this account */\r\n  getPerson = () => {\r\n    ManagementAPI.getAPI().getPerson(this.props.personID).then(person =>\r\n      this.setState({\r\n        person: person,\r\n        loadingInProgress: false,\r\n        loadingError: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          person: null,\r\n          loadingInProgress: false,\r\n          loadingError: e\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, PersonID } = this.props;\r\n    const { person, loadingInProgress, loadingError } = this.state;\r\n\r\n    return (\r\n      <Paper variant='outlined' className={classes.root}>\r\n\r\n        <Typography variant='h6'>\r\n          Person\r\n        </Typography>\r\n        <Typography>\r\n          ID: {person.getID()}\r\n        </Typography>\r\n        {\r\n          person ?\r\n            <Typography>\r\n              Person: {person.getRole()}\r\n            </Typography>\r\n            : null\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={loadingError} contextErrorMsg={`The data of person id ${person.getID()} could not be loaded.`} onReload={this.getPerson} />\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n    padding: theme.spacing(1),\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  accountEntry: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nPersonDetails.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The customerID to be rendered */\r\n  StudentID: PropTypes.string.isRequired,\r\n  /** The accountID to be rendered */\r\n  PersonID: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(PersonDetails);\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\RatingListEntry.js",["233"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport RatingForm from './dialogs/RatingForm';\r\nimport RatingDeleteDialog from './dialogs/RatingDeleteDialog';\r\nimport RatingList from './RatingList';\r\n\r\n\r\n/**\r\n * Renders a CustomerBO object within a expandable/collapsible CustomerListEntry with the customer manipulation\r\n * functions. If expanded, it renders a AccountList.\r\n *\r\n * @see See [RatingList](#accountlist)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass RatingListEntry extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init the state\r\n    this.state = {\r\n      rating: props.rating,\r\n      showRatingForm: false,\r\n      showRatingDeleteDialog: false,\r\n    };\r\n  }\r\n\r\n  /** Handles onChange events of the underlying ExpansionPanel */\r\n  expansionPanelStateChanged = () => {\r\n    this.props.onExpandedStateChange(this.props.rating);\r\n  }\r\n\r\n  /** Handles onAccountDelete events from an AccountListEntry\r\n  deleteAccountHandler = (deletedAccount) => {\r\n    // console.log(deletedAccount.getID());\r\n    this.setState({\r\n      accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\r\n    })\r\n  }\r\n\r\n  /** Handles the onClick event of the edit customer button */\r\n  editRatingButtonClicked = (event) => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      showRatingForm: true\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the RatingForm */\r\n  ratingFormClosed = (rating => {\r\n    // customer is not null and therefor changed\r\n    if (rating) {\r\n      this.setState({\r\n        rating: rating,\r\n        showRatingForm: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showRatingForm: false\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handles the onClick event of the delete rating button */\r\n  deleteRatingButtonClicked = (event) => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      showRatingDeleteDialog: true\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the RatingDeleteDialog */\r\n  deleteRatingDialogClosed = (rating) => {\r\n    // if rating is not null, delete it\r\n    if (rating) {\r\n      this.props.onRatingDeleted(rating);\r\n    };\r\n\r\n    // Don´t show the dialog\r\n    this.setState({\r\n      showRatingDeleteDialog: false\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, expandedState } = this.props;\r\n    // Use the states rating\r\n    const { rating, showRatingForm, showRatingDeleteDialog } = this.state;\r\n\r\n    // console.log(this.state);\r\n    return (\r\n      <div>\r\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            id={`rating${rating.getID()}accountpanel-header`}\r\n          >\r\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n              <Grid item>\r\n                <Typography variant='body1' className={classes.heading}>{rating.getProject()}, {rating.getEvaluator()},{rating.getToBeAssessed()},{rating.getGrade()},{rating.getPassed()}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <ButtonGroup variant='text' size='small'>\r\n                  <Button color='primary' onClick={this.editRatingButtonClicked}>\r\n                    edit\r\n                  </Button>\r\n                  <Button color='secondary' onClick={this.deleteRatingButtonClicked}>\r\n                    delete\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Grid>\r\n              <Grid item xs />\r\n              <Grid item>\r\n                <Typography variant='body2' color={'textSecondary'}>List of accounts</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <AccountList show={expandedState} rating={rating} />\r\n          </AccordionDetails>\r\n        </Accordion>\r\n        <RatingForm show={showRatingForm} rating={rating} onClose={this.ratingFormClosed} />\r\n        <RatingDeleteDialog show={showRatingDeleteDialog} rating={crating} onClose={this.deleteRatingDialogClosed} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nRatingListEntry.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The RatingBO to be rendered */\r\n  rating: PropTypes.object.isRequired,\r\n  /** The state of this RatingListEntry. If true the rating is shown with its accounts */\r\n  expandedState: PropTypes.bool.isRequired,\r\n  /** The handler responsible for handle expanded state changes (exanding/collapsing) of this RatingListEntry\r\n   *\r\n   * Signature: onExpandedStateChange(RatingBO rating)\r\n   */\r\n  onExpandedStateChange: PropTypes.func.isRequired,\r\n  /**\r\n   *  Event Handler function which is called after a sucessfull delete of this rating.\r\n   *\r\n   * Signature: onRatingDelete(RatingBO rating)\r\n   */\r\n  onRatingDeleted: PropTypes.func.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(RatingListEntry);\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ProjectListEntry.js",["234","235","236","237"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n//import ProjectForm from './dialogs/ProjectForm';\r\n//import ProjectDeleteDialog from './dialogs/ProjectDeleteDialog';\r\nimport {ManagementAPI} from './ManagementAPI';\r\nimport {ProjectBO} from './ManagementAPI';\r\nimport ParticipationList from './ParticipationList'\r\n\r\n\r\n/**\r\n * Renders a ProjectBO object within a expandable/collapsible ProjectListEntry with the project manipulation\r\n * functions. If expanded, it renders a ParticipationList.\r\n *\r\n * @see See [AccountList](#participationlist)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass ProjectListEntry extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init the state\r\n    this.state = {\r\n      project: props.project,\r\n      showProjectForm: false,\r\n      showProjectDeleteDialog: false,\r\n    };\r\n  }\r\n\r\n  /** Handles onChange events of the underlying ExpansionPanel */\r\n  expansionPanelStateChanged = () => {\r\n    this.props.onExpandedStateChange(this.props.project);\r\n  }\r\n\r\n  /** Handles onParticipationDelete events from an ParticipationListEntry  */\r\n  deleteParticipationHandler = (deletedParticipation) => {\r\n    // console.log(deletedParticipation.getID());\r\n    this.setState({\r\n      participations: this.state.participations.filter(participation => participation.getID() !== deletedParticipation.getID())\r\n    })\r\n  }\r\n\r\n  /** Handles the onClick event of the edit project button */\r\n  editProjectButtonClicked = (event) => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      showProjectForm: true\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the ProjectForm */\r\n  projectFormClosed = (project) => {\r\n    // project is not null and therefor changed\r\n    if (project) {\r\n      this.setState({\r\n        project: project,\r\n        showProjectForm: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showProjectForm: false\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handles the onClick event of the delete project button */\r\n  deleteProjectButtonClicked = (event) => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      showProjectDeleteDialog: true\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the ProjectDeleteDialog */\r\n  deleteProjectDialogClosed = (project) => {\r\n    // if project is not null, delete it\r\n    if (project) {\r\n      this.props.onProjectDeleted(project);\r\n    };\r\n\r\n    // Don´t show the dialog\r\n    this.setState({\r\n      showProjectDeleteDialog: false\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, expandedState } = this.props;\r\n    // Use the states project\r\n    const { project, showProjectForm, showProjectDeleteDialog } = this.state;\r\n\r\n    // console.log(this.state);\r\n    return (\r\n      <div>\r\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            id={`project${project.getID()}accountpanel-header`}\r\n          >\r\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n              <Grid item>\r\n                <Typography variant='body1' className={classes.heading}>{project.getName()}, {project.getSemester()},\r\n                {project.getModule()}, {project.getShortDescription()}, {project.getExternalPartnerlist()},\r\n                {project.getCapacity()}, {project.getBDAP()}, {project.getBBLP()}, {project.getBDLP()},\r\n                {project.getPDL()}, {project.getLanguage()}, {project.getRoom()}, {project.getSpecialRoom()},\r\n                {project.getFlag()}, {project.getStatus()}, {project.getProjectType()}, {project.getOwner()}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <ButtonGroup variant='text' size='small'>\r\n                  <Button color='primary' onClick={this.editProjectButtonClicked}>\r\n                    edit\r\n                  </Button>\r\n                  <Button color='secondary' onClick={this.deleteProjectButtonClicked}>\r\n                    delete\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Grid>\r\n              <Grid item xs />\r\n              <Grid item>\r\n                <Typography variant='body2' color={'textSecondary'}>List of accounts</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <ParticipationList show={expandedState} project={project} />\r\n          </AccordionDetails>\r\n        </Accordion>\r\n        <ProjectForm show={showProjectForm} project={project} onClose={this.projectFormClosed} />\r\n        <ProjectDeleteDialog show={showProjectDeleteDialog} project={project} onClose={this.deleteProjectDialogClosed} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nProjectListEntry.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ProjectBO to be rendered */\r\n  project: PropTypes.object.isRequired,\r\n  /** The state of this ProjectListEntry. If true the customer is shown with its participations */\r\n  expandedState: PropTypes.bool.isRequired,\r\n  /** The handler responsible for handle expanded state changes (exanding/collapsing) of this ProjectListEntry\r\n   *\r\n   * Signature: onExpandedStateChange(ProjectBO project)\r\n   */\r\n  onExpandedStateChange: PropTypes.func.isRequired,\r\n  /**\r\n   *  Event Handler function which is called after a sucessfull delete of this project.\r\n   *\r\n   * Signature: onProjectDelete(ProjectBO project)\r\n   */\r\n  onProjectDeleted: PropTypes.func.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(ProjectListEntry);\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ProjectForm.js",["238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { ManagementAPI, ProjectBO } from '../../api/ManagementAPI';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\n\r\n/**\r\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured\r\n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object.\r\n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\r\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer.\r\n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.\r\n * When the dialog is canceled, onClose is called with null.\r\n *\r\n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\r\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass ProjectForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let n = '', se = ''; mo= ''; sd=''; ep=''; c=''; bdap=''; bblp=''; bdlp=''; pdl=''; la=''; ro=''; sr='';fl='';\r\n    st=''; pt=''; ow='';\r\n    if (props.project) {\r\n      n = props.project.getName();\r\n      se = props.project.getSemester();\r\n      mo = props.project.getModule();\r\n      sd = props.project.getShortDescription();\r\n      ep = props.project.getExternalPartnerlist();\r\n      c = props.project.getCapacity();\r\n      bdap = props.project.getBDAP();\r\n      bblp = props.project.getBBLP();\r\n      bdlp = props.project.getBDLP();\r\n      pdl = props.project.getPDL();\r\n      la = props.project.getLanguage();\r\n      ro = props.project.getRoom();\r\n      sr = props.project.getSpecialRoom();\r\n      fl = props.project.getFlag();\r\n      st = props.project.getStatus();\r\n      pt = props.project.getProjectType();\r\n      ow = props.project.getOwner();\r\n    }\r\n\r\n    // Init the state\r\n    this.state = {\r\n      name: n,\r\n      nameValidationFailed: false,\r\n      nameEdited: false,\r\n      semester: se,\r\n      semesterValidationFailed: false,\r\n      semesterEdited: false,\r\n      module: mo,\r\n      moduleValidationFailed: false,\r\n      moduleEdited: false,\r\n      shortDescription: sd,\r\n      shortDescriptionValidationFailed: false,\r\n      shortDescriptionEdited: false,\r\n      externalPartnerlist: ep,\r\n      externalPartnerlistValidationFailed: false,\r\n      externalPartnerlistEdited: false,\r\n      capacity: c,\r\n      capacityValidationFailed: false,\r\n      capacityEdited: false,\r\n      BDAP: bdap,\r\n      BDAPValidationFailed: false,\r\n      BDAPEdited: false,\r\n      BBLP: bblp,\r\n      BBLPValidationFailed: false,\r\n      BBLPEdited: false,\r\n      BDLP: bdlp,\r\n      BDLPValidationFailed: false,\r\n      BDLPEdited: false,\r\n      PDL: pdl,\r\n      PDLValidationFailed: false,\r\n      PDLEdited: false,\r\n      language: la,\r\n      languageValidationFailed: false,\r\n      languageEdited: false,\r\n      room: ro,\r\n      roomValidationFailed: false,\r\n      roomEdited: false,\r\n      specialRoom: sr,\r\n      specialRoomValidationFailed: false,\r\n      specialRoomEdited: false,\r\n      status: st,\r\n      statusValidationFailed: false,\r\n      statusEdited: false,\r\n      projectType: pt,\r\n      projectTypeValidationFailed: false,\r\n      projectTypeEdited: false,\r\n      owner: ow,\r\n      ownerValidationFailed: false,\r\n      ownerEdited: false,\r\n\r\n      addingInProgress: false,\r\n      updatingInProgress: false,\r\n      addingError: null,\r\n      updatingError: null\r\n\r\n    };\r\n    // save this state for canceling\r\n    this.baseState = this.state;\r\n  }\r\n\r\n  /** Adds the project */\r\n  addProject = () => {\r\n    let newProject = new ProjectBO(this.state.name, this.state.semester, this.state.module, this.state.shortDescription,\r\n    this.state.externalPartnerlist, this.state.capacity, this.state.BDAP, this.state.BBLP, this.state.BDLP,\r\n    this.state.PDL, this.state.language, this.state.room, this.state.specialRoom, this.state.status,\r\n    this.state.projectType, this.state.owner);\r\n    ProjectAPI.getAPI().addProject(newProject).then(project => {\r\n      // Backend call sucessfull\r\n      // reinit the dialogs state for a new empty project\r\n      this.setState(this.baseState);\r\n      this.props.onClose(project); // call the parent with the customer object from backend\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,    // disable loading indicator\r\n        updatingError: e              // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,       // show loading indicator\r\n      updatingError: null             // disable error message\r\n    });\r\n  }\r\n\r\n  /** Updates the project */\r\n  updateProject = () => {\r\n    // clone the original project, in case the backend call fails\r\n    let updatedProject = Object.assign(new ProjectBO(), this.props.project);\r\n    // set the new attributes from our dialog\r\n    updatedProject.setName(this.state.name);\r\n    updatedProject.setSemester(this.state.semester);\r\n    updatedProject.setModule(this.state.module);\r\n    updatedProject.setShortDescription(this.state.shortDescription);\r\n    updatedProject.setExternalPartnerlist(this.state.externalPartnerlist);\r\n    updatedProject.setCapacity(this.state.capacity);\r\n    updatedProject.setBDAP(this.state.BDAP);\r\n    updatedProject.setBBLP(this.state.BBLP);\r\n    updatedProject.setBDLP (this.state.BDLP);\r\n    updatedProject.setPDL (this.state.PDL);\r\n    updatedProject.setLanguage (this.state.language);\r\n    updatedProject.setRoom (this.state.room);\r\n    updatedProject.setSpecialRoom (this.state.specialRoom);\r\n    updatedProject.setStatus (this.state.status);\r\n    updatedProject.setProjectType (this.state.projectType);\r\n    updatedProject.setOwner (this.state.owner);\r\n\r\n    ProjectAPI.getAPI().updateProject(updatedProject).then(project => {\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: null                     // no error message\r\n      });\r\n      // keep the new state as base state\r\n      this.baseState.name = this.state.name;\r\n      this.baseState.semester = this.state.semester;\r\n      this.baseState.module = this.state.module;\r\n      this.baseState.shortDescription = this.state.shortDescription;\r\n      this.baseState.externalPartnerlist = this.state.externalPartnerlist;\r\n      this.baseState.capacity = this.state.capacity;\r\n      this.baseState.bdap = this.state.bdap;\r\n      this.baseState.bblp = this.state.bblp;\r\n      this.baseState.bdlp = this.state.bdlp;\r\n      this.baseState.pdl = this.state.pdl;\r\n      this.baseState.language = this.state.language;\r\n      this.baseState.room = this.state.room;\r\n      this.baseState.specialRoom = this.state.specialRoom;\r\n      this.baseState.status = this.state.status;\r\n      this.baseState.projectType = this.state.projectType;\r\n      this.baseState.owner = this.state.owner;\r\n      this.props.onClose(updatedProject);      // call the parent with the new project\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,                 // show loading indicator\r\n      updatingError: null                       // disable error message\r\n    });\r\n  }\r\n\r\n  /** Handles value changes of the forms textfields and validates them */\r\n  textFieldValueChange = (event) => {\r\n    const value = event.target.value;\r\n\r\n    let error = false;\r\n    if (value.trim().length === 0) {\r\n      error = true;\r\n    }\r\n\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n      [event.target.id + 'ValidationFailed']: error,\r\n      [event.target.id + 'Edited']: true\r\n    });\r\n  }\r\n\r\n  /** Handles the close / cancel button click event */\r\n  handleClose = () => {\r\n    // Reset the state\r\n    this.setState(this.baseState);\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, project, show } = this.props;\r\n    const { name, nameValidationFailed, nameEdited, semester,semesterValidationFailed, semesterEdited,module,\r\n    moduleValidationFailed,moduleEdited, shortDescription, shortDescriptionValidationFailed, shortDescriptionEdited,\r\n    externalPartnerlist, externalPartnerlistValidationFailed, externalPartnerlistEdited, capacity,\r\n    capacityValidationFailed, capacityEdited, BDAP, BDAPValidationFailed, BDAPEdited, BBLP, BBLPValidationFailed,\r\n    BBLPEdited, BDLP, BDLPValidationFailed, BDLPEdited, PDL, PDLValidationFailed, PDLEdited, language,\r\n    languageValidationFailed, languageEdited, room, roomValidationFailed, roomEdited, specialRoom,\r\n    specialRoomValidationFailed, specialRoomEdited, status, statusValidationFailed, statusEdited, projectType,\r\n    projectTypeValidationFailed, projectTypeEdited, owner, ownerValidationFailed, ownerEdited, addingInProgress,\r\n      addingError, updatingInProgress, updatingError } = this.state;\r\n\r\n    let title = '';\r\n    let header = '';\r\n\r\n    if (project) {\r\n      // project defindet, so ist an edit dialog\r\n      title = 'Update a project';\r\n      header = `Project ID: ${project.getID()}`;\r\n    } else {\r\n      title = 'Create a new project';\r\n      header = 'Enter project data';\r\n    }\r\n\r\n    return (\r\n      show ?\r\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\r\n          <DialogTitle id='form-dialog-title'>{title}\r\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              {header}\r\n            </DialogContentText>\r\n            <form className={classes.root} noValidate autoComplete='off'>\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='name' label='Name:' value={name}\r\n                onChange={this.textFieldValueChange} error={nameValidationFailed}\r\n                helperText={nameValidationFailed ? 'The name must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='semester' label='Semester:' value={semester}\r\n                onChange={this.textFieldValueChange} error={semesterValidationFailed}\r\n                helperText={semesterValidationFailed ? 'The semester must contain at least one character' : ' '} />\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='module' label='Module:' value={module}\r\n                onChange={this.textFieldValueChange} error={moduleValidationFailed}\r\n                helperText={moduleValidationFailed ? 'The Module must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='shortDescription' label='Short Description:' value={shortDescription}\r\n                onChange={this.textFieldValueChange} error={shortDescriptionValidationFailed}\r\n                helperText={shortDescriptionValidationFailed ? 'The short description must contain at least one character' : ' '} />\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='externalPartnerlist' label='External Partnerlist:' value={externalPartnerlist}\r\n                onChange={this.textFieldValueChange} error={externalPartnerlistValidationFailed}\r\n                helperText={externalPartnerlistValidationFailed ? 'The external Partnerlist must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='capacity' label='Capacity:' value={capacity}\r\n                onChange={this.textFieldValueChange} error={capacityValidationFailed}\r\n                helperText={capacityValidationFailed ? 'The capacity must contain at least one character' : ' '} />\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='bdap' label='Blockdays during exam period :' value={bdap}\r\n                onChange={this.textFieldValueChange} error={bdapValidationFailed}\r\n                helperText={bdapValidationFailed ? 'You must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='bblp' label='Blockdays before lecture period:' value={bblp}\r\n                onChange={this.textFieldValueChange} error={bblpValidationFailed}\r\n                helperText={bblpValidationFailed ? 'You must contain at least one character' : ' '} />\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='bdlp' label='Blockdays during lecture period:' value={bdlp}\r\n                onChange={this.textFieldValueChange} error={bdlpValidationFailed}\r\n                helperText={bdlpValidationFailed ? 'You must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='pdl' label='Preferred blockdays during lecture period:' value={pdl}\r\n                onChange={this.textFieldValueChange} error={pdlValidationFailed}\r\n                helperText={pdlValidationFailed ? 'You must contain at least one character' : ' '} />\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='language' label='Language:' value={language}\r\n                onChange={this.textFieldValueChange} error={languageValidationFailed}\r\n                helperText={languageValidationFailed ? 'The language must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='room' label='Room:' value={room}\r\n                onChange={this.textFieldValueChange} error={roomValidationFailed}\r\n                helperText={roomValidationFailed ? 'The room must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='room' label='Room:' value={room}\r\n                onChange={this.textFieldValueChange} error={roomValidationFailed}\r\n                helperText={roomValidationFailed ? 'The room must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='specialRoom' label='Special room:' value={specialRoom}\r\n                onChange={this.textFieldValueChange} error={specialRoomValidationFailed}\r\n                helperText={specialRoomValidationFailed ? 'The special room must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='status' label='Status:' value={status}\r\n                onChange={this.textFieldValueChange} error={statusValidationFailed}\r\n                helperText={statusValidationFailed ? 'The status must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='projectType' label='Project Type:' value={projectType}\r\n                onChange={this.textFieldValueChange} error={projectTypeValidationFailed}\r\n                helperText={projectTypeValidationFailed ? 'The project type must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='owner' label='Owner:' value={owner}\r\n                onChange={this.textFieldValueChange} error={ownerValidationFailed}\r\n                helperText={ownerValidationFailed ? 'The owner must contain at least one character' : ' '} />\r\n            </form>\r\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n            {\r\n              // Show error message in dependency of project prop\r\n              project ?\r\n                <ContextErrorMessage error={updatingError} contextErrorMsg={`The project ${project.getID()} could not be updated.`} onReload={this.updateProject} />\r\n                :\r\n                <ContextErrorMessage error={addingError} contextErrorMsg={`The project could not be added.`} onReload={this.addProject} />\r\n            }\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color='secondary'>\r\n              Cancel\r\n            </Button>\r\n            {\r\n              // If a project is given, show an update button, else an add button\r\n              customer ?\r\n                <Button disabled={nameValidationFailed || semesterValidationFailed || moduleValidationFailed ||\r\n                shortDescriptionValidationFailed || externalPartnerlistValidationFailed || capacityValidationFailed ||\r\n                BDAPValidationFailed || BBLPValidationFailed || BDLPValidationFailed || PDLValidationFailed ||\r\n                languageValidationFailed || roomValidationFailed || specialRoomValidationFailed || statusValidationFailed ||\r\n                projectTypeValidationFailed || ownerValidationFailed} variant='contained' onClick={this.updateCustomer} color='primary'>\r\n                  Update\r\n              </Button>\r\n                : <Button disabled={nameValidationFailed || !nameEdited || semesterValidationFailed || !semesterEdited ||\r\n                moduleValidationFailed || !moduleEdited || shortDescriptionValidationFailed || !shortDescriptionEdited ||\r\n                externalPartnerlistValidationFailed || !externalPartnerlistEdited || capacityValidationFailed ||\r\n                !capacityEdited || BDAPValidationFailed || !BDAPEdited || BBLPValidationFailed || !BBLPEdited ||\r\n                BDLPValidationFailed || !BDLPEdited || PDLValidationFailed || !PDLEdited || languageValidationFailed ||\r\n                !languageEdited || roomValidationFailed || !roomEdited || specialRoomValidationFailed || !specialRoomEdited ||\r\n                statusValidationFailed || !statusEdited || projectTypeValidationFailed || !projectTypeEdited ||\r\n                ownerValidationFailed || !ownerEdited} variant='contained' onClick={this.addCustomer} color='primary'>\r\n                  Add\r\n             </Button>\r\n            }\r\n          </DialogActions>\r\n        </Dialog>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\n/** PropTypes */\r\nProjectForm.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ProjectBO to be edited */\r\n  project: PropTypes.object,\r\n  /** If true, the form is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**\r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the edited or created CustomerBO as parameter or null, if cancel was pressed.\r\n   *\r\n   * Signature: onClose(ProjectBO project);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ProjectForm);","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\PersonListEntry.js",["302"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport PersonForm from './dialogs/PersonForm';\r\nimport PersonDeleteDialog from './dialogs/PersonDeleteDialog';\r\n\r\n\r\n\r\n/**\r\n * Renders a PersonBO object within a expandable/collapsible PersonListEntry with the person manipulation\r\n * functions. If expanded, it renders a PersonList.\r\n *\r\n *\r\n *\r\n\r\n */\r\nclass PersonListEntry extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init the state\r\n    this.state = {\r\n      Person: props.Person,\r\n      showPersonForm: false,\r\n      showPersonDeleteDialog: false,\r\n    };\r\n  }\r\n\r\n  /** Handles onChange events of the underlying ExpansionPanel */\r\n  expansionPanelStateChanged = () => {\r\n    this.props.onExpandedStateChange(this.props.Person);\r\n  }\r\n\r\n\r\n\r\n  /** Handles the onClick event of the edit Person button */\r\n  editPersonButtonClicked = (event) => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      showPersonForm: true\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the PersonForm */\r\n  personFormClosed = (person) => {\r\n    // person is not null and there for changed\r\n    if (person) {\r\n      this.setState({\r\n        person: person,\r\n        showPersonForm: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showPersonForm: false\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handles the onClick event of the delete person button */\r\n  deletePersonButtonClicked = (event) => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      showPersonDeleteDialog: true\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the PersonDeleteDialog */\r\n  deletePersonDialogClosed = (person) => {\r\n    // if person is not null, delete it\r\n    if (person) {\r\n      this.props.onPersonDeleted(person);\r\n    };\r\n\r\n    // Don´t show the dialog\r\n    this.setState({\r\n      showPersonDeleteDialog: false\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, expandedState } = this.props;\r\n    // Use the states customer\r\n    const { person, showPersonForm, showPersonDeleteDialog } = this.state;\r\n\r\n    // console.log(this.state);\r\n    return (\r\n      <div>\r\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            id={`person${person.getID()}accountpanel-header`}\r\n          >\r\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n              <Grid item>\r\n                <Typography variant='body1' className={classes.heading}>{person.getRole()}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <ButtonGroup variant='text' size='small'>\r\n                  <Button color='primary' onClick={this.editPersonButtonClicked}>\r\n                    edit\r\n                  </Button>\r\n                  <Button color='secondary' onClick={this.deletePersonButtonClicked}>\r\n                    delete\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Grid>\r\n              <Grid item xs />\r\n              <Grid item>\r\n                <Typography variant='body2' color={'textSecondary'}>List of project</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <AccountList show={expandedState} person={person} />\r\n          </AccordionDetails>\r\n        </Accordion>\r\n        <PersonForm show={showPersonForm} person={person} onClose={this.personFormClosed} />\r\n        <PersonDeleteDialog show={showPersonDeleteDialog} person={person} onClose={this.deletePersonDialogClosed} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nPersonListEntry.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The PersonBO to be rendered */\r\n  person: PropTypes.object.isRequired,\r\n  /** The state of this PersonListEntry. If true the person is shown with its accounts */\r\n  expandedState: PropTypes.bool.isRequired,\r\n  /** The handler responsible for handle expanded state changes (exanding/collapsing) of this PersonListEntry\r\n   *\r\n   * Signature: onExpandedStateChange(PersonBO person)\r\n   */\r\n  onExpandedStateChange: PropTypes.func.isRequired,\r\n  /**\r\n   *  Event Handler function which is called after a sucessfull delete of this person.\r\n   *\r\n   * Signature: onPersonDelete(PersonBO person)\r\n   */\r\n  onPersonDeleted: PropTypes.func.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(PersonListEntry);\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\ParticipationList.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\PersonDeleteDialog.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\PersonForm.js",["303","304","305","306"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { ManagementAPI, PersonBO } from '../../api/ManagementAPI';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\n\r\n/**\r\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured\r\n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object.\r\n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\r\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer.\r\n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.\r\n * When the dialog is canceled, onClose is called with null.\r\n *\r\n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\r\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass PersonForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let na = '', ro = '';\r\n    if (props.person) {\r\n      na = props.person.getName();\r\n      ro = props.person.getRole();\r\n    }\r\n\r\n    // Init the state\r\n    this.state = {\r\n      name: na,\r\n      nameValidationFailed: false,\r\n      nameEdited: false,\r\n      role: ro,\r\n      roleValidationFailed: false,\r\n      roleEdited: false,\r\n      addingInProgress: false,\r\n      updatingInProgress: false,\r\n      addingError: null,\r\n      updatingError: null\r\n    };\r\n    // save this state for canceling\r\n    this.baseState = this.state;\r\n  }\r\n\r\n  /** Adds the person */\r\n  addPerson = () => {\r\n    let newPerson = new PersonBO(this.state.name, this.state.role);\r\n    ProjectAPI.getAPI().addPerson(newPerson).then(person => {\r\n      // Backend call sucessfull\r\n      // reinit the dialogs state for a new empty person\r\n      this.setState(this.baseState);\r\n      this.props.onClose(person); // call the parent with the person object from backend\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,    // disable loading indicator\r\n        updatingError: e              // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,       // show loading indicator\r\n      updatingError: null             // disable error message\r\n    });\r\n  }\r\n\r\n  /** Updates the person */\r\n  updatePerson = () => {\r\n    // clone the original person, in case the backend call fails\r\n    let updatedPerson = Object.assign(new PersonBO(), this.props.person);\r\n    // set the new attributes from our dialog\r\n    updatedPerson.setName(this.state.name);\r\n    updatedPerson.setRole(this.state.role);\r\n    ProjectAPI.getAPI().updatePerson(updatedPerson).then(person => {\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: null                     // no error message\r\n      });\r\n      // keep the new state as base state\r\n      this.baseState.name = this.state.name;\r\n      this.baseState.role = this.state.role;\r\n      this.props.onClose(updatedPerson);      // call the parent with the new person\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,                 // show loading indicator\r\n      updatingError: null                       // disable error message\r\n    });\r\n  }\r\n\r\n  /** Handles value changes of the forms textfields and validates them */\r\n  textFieldValueChange = (event) => {\r\n    const value = event.target.value;\r\n\r\n    let error = false;\r\n    if (value.trim().length === 0) {\r\n      error = true;\r\n    }\r\n\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n      [event.target.id + 'ValidationFailed']: error,\r\n      [event.target.id + 'Edited']: true\r\n    });\r\n  }\r\n\r\n  /** Handles the close / cancel button click event */\r\n  handleClose = () => {\r\n    // Reset the state\r\n    this.setState(this.baseState);\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, person, show } = this.props;\r\n    const { name, nameValidationFailed, nameEdited, role, roleValidationFailed, roleEdited, addingInProgress,\r\n      addingError, updatingInProgress, updatingError } = this.state;\r\n\r\n    let title = '';\r\n    let header = '';\r\n\r\n    if (person) {\r\n      // person defindet, so ist an edit dialog\r\n      title = 'Update a person';\r\n      header = `Person ID: ${person.getID()}`;\r\n    } else {\r\n      title = 'Create a new person';\r\n      header = 'Enter person data';\r\n    }\r\n\r\n    return (\r\n      show ?\r\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\r\n          <DialogTitle id='form-dialog-title'>{title}\r\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              {header}\r\n            </DialogContentText>\r\n            <form className={classes.root} noValidate autoComplete='off'>\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='name' label='Name:' value={name}\r\n                onChange={this.textFieldValueChange} error={nameValidationFailed}\r\n                helperText={nameValidationFailed ? 'The name must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='role' label='Role:' value={role}\r\n                onChange={this.textFieldValueChange} error={roleValidationFailed}\r\n                helperText={roleValidationFailed ? 'The role must contain at least one character' : ' '} />\r\n            </form>\r\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n            {\r\n              // Show error message in dependency of person prop\r\n              person ?\r\n                <ContextErrorMessage error={updatingError} contextErrorMsg={`The person ${person.getID()} could not be updated.`} onReload={this.updatePerson} />\r\n                :\r\n                <ContextErrorMessage error={addingError} contextErrorMsg={`The person could not be added.`} onReload={this.addPerson} />\r\n            }\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color='secondary'>\r\n              Cancel\r\n            </Button>\r\n            {\r\n              // If a person is given, show an update button, else an add button\r\n              customer ?\r\n                <Button disabled={nameValidationFailed || roleValidationFailed} variant='contained' onClick={this.updatePerson} color='primary'>\r\n                  Update\r\n              </Button>\r\n                : <Button disabled={nameValidationFailed || !nameEdited || roleValidationFailed || !roleEdited} variant='contained' onClick={this.addPerson} color='primary'>\r\n                  Add\r\n             </Button>\r\n            }\r\n          </DialogActions>\r\n        </Dialog>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\n/** PropTypes */\r\nPersonForm.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The PersonBO to be edited */\r\n  person: PropTypes.object,\r\n  /** If true, the form is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**\r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the edited or created CustomerBO as parameter or null, if cancel was pressed.\r\n   *\r\n   * Signature: onClose(PersonBO person);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(PersonForm);","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\ProjectDeleteDialog.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllModuleList.js",["307"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core';\r\nimport ManagementAPI from '../api/ManagementAPI';\r\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\r\nimport LoadingProgress from './dialogs/LoadingProgress';\r\n\r\n\r\nclass AllModuleList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init an empty state\r\n    this.state = {\r\n      modules: [],\r\n      loadingInProgress: false,\r\n      loadingError: null,\r\n    };\r\n  }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    this.loadModules();\r\n  }\r\n\r\n  /** gets the module list for this module */\r\n  loadModules = () => {\r\n    ManagementAPI.getAPI().getAllModules().then(modules =>\r\n      this.setState({\r\n        modules: modules,\r\n        loadingInProgress: false, // loading indicator\r\n        loadingError: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch\r\n          loadingInProgress: false,\r\n          loadingError: e\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { modules, loadingInProgress, loadingError } = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n          {\r\n            modules.map(module => <ModuleDetail key={module.getID()}\r\n            personID={module.getOwner().toString()} moduleID={module.getID().toString()} />)\r\n          }\r\n          <LoadingProgress show={loadingInProgress} />\r\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The list of all modules of the project management system could not be loaded.`} onReload={this.loadModules} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nAllModuleList.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(AllModuleList);\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\AllParticipationList.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ParticipationBO.js",["308"],"import  BusinessObject from './BusinessObject';\r\n\r\n/**\r\n * Zeigt eine Teilnahme  am Project an.\r\n */\r\nexport default class ParticipationBO extends BusinessObject {\r\n\r\n/**\r\n   *\r\n   *\r\n   */\r\n  constructor(aProject, aStudent) {\r\n    super();\r\n    this.project = aProject;\r\n    this.student = aStudent;\r\n  }\r\n\r\n  setProject(aProject) {\r\n  this.project = aProject;\r\n  }\r\n\r\n  getProject() {\r\n    return this.project;\r\n  }\r\n\r\n  setStudent(aStudent) {\r\n  this.student = aStudent;\r\n  }\r\n\r\n  getStudent() {\r\n    return this.student;\r\n\r\n\r\n  static fromJSON(participations) {\r\n\r\n    let result = [];\r\n\r\n    if (Array.isArray(participations)) {\r\n      participations.forEach((p) => {\r\n        Object.setPrototypeOf(p, ParticipationBO.prototype);\r\n        result.push(p);\r\n      })\r\n    } else {\r\n      //\r\n      let p = participations;\r\n      Object.setPrototypeOf(p, ParticipationBO.prototype);\r\n      result.push(p);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\StatusBO.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ProjectTypeBO.js",["309","310","311","312","313","314"],"import NamedBusinessObject from './NamedBusinessObject';\r\n\r\n/**\r\n * R\r\n */\r\nexport default class ProjectTypeBO extends NamedBusinessObject {\r\n\r\nconstructor(aSws,aEcts) {\r\n    super();\r\n    this.sws = aSws;\r\n    this.ects = aEcts;\r\n  }\r\n\r\n  setSws(aSws) {\r\n  this.sws = aSws;\r\n  }\r\n\r\n  getSws() {\r\n    return this.sws;\r\n  }\r\n  setEcts(aEcts) {\r\n  this.ects = aEcts;\r\n  }\r\n\r\n  getEcts() {\r\n    return this.Ects;\r\n  }\r\n\r\n  static fromJSON(ProjectType) {\r\n    let result = [];\r\n\r\n    if (Array.isArray(projectTypes)) {\r\n      projectTypes.forEach((t) => {\r\n        Object.setPrototypeOf(t, ProjectTypeBO.prototype);\r\n        result.push(t);\r\n      })\r\n    } else {\r\n      //\r\n      let c = projectTypes;\r\n      Object.setPrototypeOf(t, ProjectTypeBO.prototype);\r\n      result.push(t);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n}\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\StudentBO.js",["315","316","317"],"import PersonBO from './PersonBO';\r\n\r\n/**\r\n * Represents a customer of the bank.\r\n */\r\nexport default class StudentBO extends PersonBO {\r\n\r\nconstructor(aCourse_abbr,aMatriculation_nr) {\r\n    super();\r\n    this.course_abbr = aCourseAbbr;\r\n    this.matriculation_nr = aMatriculationNr;\r\n\r\n  }\r\n\r\n\r\n  setCourseAbbr(aCourseAbbr) {\r\n    this.course_abbr = aCourse_abbr;\r\n  }\r\n\r\n  getCourseAbbr() {\r\n    return this.course_abbr;\r\n  }\r\n\r\n\r\n  setMatriculationNr(aMatriculationNr) {\r\n    this.matriculation_nr = aMatriculationNr;\r\n  }\r\n\r\n\r\n  getMatriculationNr() {\r\n    return this.matriculation_nr;\r\n  }\r\n\r\n\r\n  static fromJSON(students) {\r\n    let result = [];\r\n\r\n    if (Array.isArray(students)) {\r\n      students.forEach((u) => {\r\n        Object.setPrototypeOf(u, StudentBO.prototype);\r\n        result.push(u);\r\n      })\r\n    } else {\r\n      // Es handelt sich offenbar um ein singuläres Objekt\r\n      let u = students\r\n      Object.setPrototypeOf(u, StudentBO.prototype);\r\n      result.push(u);\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\Role.js",[],["318","319"],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ProjectBO.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\PersonBO.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\ModuleBO.js",["320","321","322"],"import  NamedBusinessObject from './NamedBusinessObject';\r\n\r\n/**\r\n * .\r\n */\r\nexport default class ModuleBO extends NamedBusinessObject {\r\n\r\n/**\r\n   *\r\n   *\r\n   */\r\n  constructor(aEdv_nr) {\r\n    super();\r\n    this.edv_nr = aEdv_nr;\r\n  }\r\n\r\n  setEdvNr(aEdv_nr) {\r\n  this.edv_nr = aEdv_nr;\r\n  }\r\n\r\n  getEdvNr() {\r\n    return this.edv_nr;\r\n  }\r\n\r\n  static fromJSON(modules) {\r\n    let result = [];\r\n\r\n    if (Array.isArray(modules)) {\r\n      modules.forEach((m) => {\r\n        Object.setPrototypeOf(m, ModuleBO.prototype);\r\n        result.push(m);\r\n      })\r\n    } else {\r\n      //\r\n      let c = modules;\r\n      Object.setPrototypeOf(m, ModuleBO.prototype);\r\n      result.push(m);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\SemesterBO.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\RatingBO.js",["323"],"import BusinessObject from './BusinessObject';\r\n\r\n/**\r\n * Represents a customer of the bank.\r\n */\r\nexport default class RatingBO extends BusinessObject {\r\n\r\nconstructor(aProject,aEvaluator,ToBeAssessed,aGrade,aPassed) {\r\n    super();\r\n    this.project = null;\r\n    this.evaluator = null;\r\n    this.to_be_assessed = null;\r\n    this.grade = aGrade;\r\n    this.passed = true;\r\n\r\n  }\r\n\r\n  setProject(aProject) {\r\n  this.project = aProject ;\r\n  }\r\n\r\n  getProject() {\r\n    return this.project;\r\n  }\r\n\r\n  setEvaluator(aEvaluator) {\r\n  this.evaluator = aEvaluator ;\r\n  }\r\n\r\n  getEvaluator() {\r\n    return this.evaluator;\r\n  }\r\n\r\n  setToBeAssessed(aToBeAssessed) {\r\n  this.to_be_assessed = aToBeAssessed ;\r\n  }\r\n\r\n  getToBeAssessed() {\r\n    return this.to_be_assessed;\r\n  }\r\n\r\n  setGrade(aGrade) {\r\n  this.grade = aGrade;\r\n  }\r\n\r\n  getGrade() {\r\n    return this.grade;\r\n  }\r\n\r\n  setPassed(aPassed) {\r\n  this.passed = aPassed;\r\n  }\r\n\r\n  getPassed() {\r\n    return this.passed;\r\n  }\r\n\r\n\r\n\r\n  static fromJSON(ratings) {\r\n    let result = [];\r\n\r\n    if (Array.isArray(ratings)) {\r\n      ratings.forEach((i) => {\r\n        Object.setPrototypeOf(i, RatingBO.prototype);\r\n        result.push(i);\r\n      })\r\n    } else {\r\n      // Es handelt sich offenbar um ein singuläres Objekt\r\n      let i = ratings;\r\n      Object.setPrototypeOf(i, RatingBO.prototype);\r\n      result.push(i);\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\NamedBusinessObject.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\api\\BusinessObject.js",["324","325"],"export default class BusinessObject {\r\n\r\n\r\n\r\n    constructor() {\r\n        this.id = 0;\r\n        this.creationTime = aDateTime.now();\r\n    }\r\n\r\n\r\n    setCreationTime(aDateTime) {\r\n        this.creationTime = aDateTime.now();\r\n    }\r\n\r\n    getCreationTime() {\r\n        return this.creationTime;\r\n    }\r\n\r\n\r\n    setID(aId) {\r\n        this.id = aId;\r\n    }\r\n\r\n    getID() {\r\n        return this.id;\r\n    }\r\n\r\n    toString() {\r\n        let result = \" \";\r\n        for (var prop in this) {\r\n        result += prop + \":\" + this [prop] +\" \";\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\RatingDeleteDialog.js",[],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\RatingForm.js",["326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { ManagementAPI, RatingBO } from '../../api/ManagementAPI';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\n\r\n/**\r\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured\r\n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object.\r\n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\r\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer.\r\n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.\r\n * When the dialog is canceled, onClose is called with null.\r\n *\r\n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\r\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\r\n *\r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass RatingForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let pr = '', ev = ''; tb; gr= ''; pa= '';\r\n    if (props.rating) {\r\n      pr = props.rating.getProject();\r\n      ev = props.rating.getEvaluator();\r\n      tb = props.rating.getToBeAssessed();\r\n      gr = props.rating.getGrade();\r\n      pa = props.rating.getPassed();\r\n    }\r\n\r\n    // Init the state\r\n    this.state = {\r\n      project: pr,\r\n      projectValidationFailed: false,\r\n      projectEdited: false,\r\n      evaluator: ev,\r\n      evaluatorValidationFailed: false,\r\n      evaluatorEdited: false,\r\n      toBeAssessed: tb,\r\n      toBeAssessedValidationFailed: false,\r\n      toBeAssessedEdited: false,\r\n      grade: gr,\r\n      gradeValidationFailed: false,\r\n      gradeEdited: false,\r\n      passed: pa,\r\n      passedValidationFailed: false,\r\n      passedEdited: false,\r\n      addingInProgress: false,\r\n      updatingInProgress: false,\r\n      addingError: null,\r\n      updatingError: null\r\n    };\r\n    // save this state for canceling\r\n    this.baseState = this.state;\r\n  }\r\n\r\n  /** Adds the rating */\r\n  addRating = () => {\r\n    let newRating = new RatingBO(this.state.project, this.state.evaluator, this.state.toBeAssessed, this.state.grade, this.state.passed);\r\n    ProjectAPI.getAPI().addRating(newRating).then(rating => {\r\n      // Backend call sucessfull\r\n      // reinit the dialogs state for a new empty projecttype\r\n      this.setState(this.baseState);\r\n      this.props.onClose(rating); // call the parent with the rating object from backend\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,    // disable loading indicator\r\n        updatingError: e              // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,       // show loading indicator\r\n      updatingError: null             // disable error message\r\n    });\r\n  }\r\n\r\n  /** Updates the rating */\r\n  updateRating = () => {\r\n    // clone the original rating, in case the backend call fails\r\n    let updatedRating = Object.assign(new RatingBO(), this.props.rating);\r\n    // set the new attributes from our dialog\r\n    updatedRating.setProject(this.state.project);\r\n    updatedRating.setEvaluator(this.state.evaluator);\r\n    updatedRating.setToBeAssessed(this.state.toBeAssessed);\r\n    updatedRating.setGrade(this.state.grade);\r\n    updatedRating.setPassed(this.state.passed);\r\n    ProjectAPI.getAPI().updateProjectType(updatedProjectType).then(rating => {\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: null                     // no error message\r\n      });\r\n      // keep the new state as base state\r\n      this.baseState.project = this.state.project;\r\n      this.baseState.evaluator = this.state.evaluator;\r\n      this.baseState.toBeAssessed = this.state.toBeAssessed;\r\n      this.baseState.grade = this.state.grade;\r\n      this.baseState.passed = this.state.passed;\r\n      this.props.onClose(updatedRating);      // call the parent with the new projecttype\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator\r\n        updatingError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,                 // show loading indicator\r\n      updatingError: null                       // disable error message\r\n    });\r\n  }\r\n\r\n  /** Handles value changes of the forms textfields and validates them */\r\n  textFieldValueChange = (event) => {\r\n    const value = event.target.value;\r\n\r\n    let error = false;\r\n    if (value.trim().length === 0) {\r\n      error = true;\r\n    }\r\n\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n      [event.target.id + 'ValidationFailed']: error,\r\n      [event.target.id + 'Edited']: true\r\n    });\r\n  }\r\n\r\n  /** Handles the close / cancel button click event */\r\n  handleClose = () => {\r\n    // Reset the state\r\n    this.setState(this.baseState);\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, rating, show } = this.props;\r\n    const { project, projectValidationFailed, projectEdited, evaluator, evaluatorValidationFailed, evaluatorEdited,\r\n    toBeAssessed, toBeAssessedValidationFailed, toBeAssessedEdited, grade, gradeValidationFailed, gradeEdited,\r\n    passed, passedValidationFailed, passedEdited, addingInProgress, addingError, updatingInProgress, updatingError } = this.state;\r\n\r\n    let title = '';\r\n    let header = '';\r\n\r\n    if (rating) {\r\n      // customer defindet, so ist an edit dialog\r\n      title = 'Update a rating';\r\n      header = `Rating ID: ${rating.getID()}`;\r\n    } else {\r\n      title = 'Create a new rating';\r\n      header = 'Enter rating data';\r\n    }\r\n\r\n    return (\r\n      show ?\r\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\r\n          <DialogTitle id='form-dialog-title'>{title}\r\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              {header}\r\n            </DialogContentText>\r\n            <form className={classes.root} noValidate autoComplete='off'>\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='project' label='Project:' value={project}\r\n                onChange={this.textFieldValueChange} error={projectValidationFailed}\r\n                helperText={projectValidationFailed ? 'The project must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='evaluator' label='Evaluator:' value={evaluator}\r\n                onChange={this.textFieldValueChange} error={evaluatorValidationFailed}\r\n                helperText={swsValidationFailed ? 'The evaluator must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='toBeAssessed' label='To be assessed' value={toBeAssessed}\r\n                onChange={this.textFieldValueChange} error={toBeAssessedValidationFailed}\r\n                helperText={toBeAssessedValidationFailed ? 'To be assessed must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='grade' label='Grade' value={grade}\r\n                onChange={this.textFieldValueChange} error={gradeValidationFailed}\r\n                helperText={gradeValidationFailed ? 'The grade must contain at least one character' : ' '} />\r\n              <TextField type='text' required fullWidth margin='normal' id='passed' label='Passed' value={passed}\r\n                onChange={this.textFieldValueChange} error={passedValidationFailed}\r\n                helperText={passedValidationFailed ? 'Passed must contain at least one character' : ' '} />\r\n            </form>\r\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n            {\r\n              // Show error message in dependency of rating prop\r\n              rating ?\r\n                <ContextErrorMessage error={updatingError} contextErrorMsg={`The rating ${rating.getID()} could not be updated.`} onReload={this.updateRating} />\r\n                :\r\n                <ContextErrorMessage error={addingError} contextErrorMsg={`The rating could not be added.`} onReload={this.addRating} />\r\n            }\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color='secondary'>\r\n              Cancel\r\n            </Button>\r\n            {\r\n              // If a rating is given, show an update button, else an add button\r\n              customer ?\r\n                <Button disabled={projectValidationFailed || evaluatorValidationFailed || toBeAssessedValidationFailed||\r\n                gradeValidationFailed || passedValidationFailed} variant='contained' onClick={this.updateRating} color='primary'>\r\n                  Update\r\n              </Button>\r\n                : <Button disabled={projectValidationFailed || !projectEdited || evaluatorValidationFailed || !evaluatorEdited ||\r\n                toBeAssessedValidationFailed || !toBeAssessedEdited || gradeValidationFailed || !gradeEdited ||\r\n                passedValidationFailed || !passedEdited} variant='contained' onClick={this.addProjectType} color='primary'>\r\n                  Add\r\n             </Button>\r\n            }\r\n          </DialogActions>\r\n        </Dialog>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\n/** PropTypes */\r\nRating.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The RatingBO to be edited */\r\n  rating: PropTypes.object,\r\n  /** If true, the form is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**\r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the edited or created ProjectTypeBO as parameter or null, if cancel was pressed.\r\n   *\r\n   * Signature: onClose(RatingBO rating);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(RatingForm);","C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\StudentListEntry.js",["343","344","345"],"C:\\Users\\saeid\\PycharmProjects\\SW-Praktikum-Gruppe-10\\E-ProjectManagement\\frontend\\src\\components\\dialogs\\StudentForm.js",["346","347","348","349","350","351"],{"ruleId":"352","replacedBy":"353"},{"ruleId":"354","replacedBy":"355"},{"ruleId":"356","severity":1,"message":"357","line":4,"column":8,"nodeType":"358","messageId":"359","endLine":4,"endColumn":21},{"ruleId":"356","severity":1,"message":"360","line":15,"column":8,"nodeType":"358","messageId":"359","endLine":15,"endColumn":22},{"ruleId":"356","severity":1,"message":"361","line":16,"column":8,"nodeType":"358","messageId":"359","endLine":16,"endColumn":21},{"ruleId":"356","severity":1,"message":"362","line":17,"column":8,"nodeType":"358","messageId":"359","endLine":17,"endColumn":21},{"ruleId":"356","severity":1,"message":"363","line":18,"column":8,"nodeType":"358","messageId":"359","endLine":18,"endColumn":28},{"ruleId":"356","severity":1,"message":"364","line":19,"column":8,"nodeType":"358","messageId":"359","endLine":19,"endColumn":19},{"ruleId":"356","severity":1,"message":"365","line":20,"column":8,"nodeType":"358","messageId":"359","endLine":20,"endColumn":18},{"ruleId":"356","severity":1,"message":"366","line":21,"column":8,"nodeType":"358","messageId":"359","endLine":21,"endColumn":18},{"ruleId":"356","severity":1,"message":"367","line":22,"column":8,"nodeType":"358","messageId":"359","endLine":22,"endColumn":19},{"ruleId":null,"fatal":true,"severity":2,"message":"368","line":261,"column":17},{"ruleId":"369","severity":2,"message":"370","line":104,"column":16,"nodeType":"358","messageId":"371","endLine":104,"endColumn":30},{"ruleId":"356","severity":1,"message":"372","line":8,"column":8,"nodeType":"358","messageId":"359","endLine":8,"endColumn":19},{"ruleId":"373","severity":1,"message":"374","line":62,"column":52,"nodeType":"375","endLine":62,"endColumn":88},{"ruleId":"356","severity":1,"message":"376","line":56,"column":13,"nodeType":"358","messageId":"359","endLine":56,"endColumn":21},{"ruleId":"369","severity":2,"message":"377","line":61,"column":13,"nodeType":"358","messageId":"371","endLine":61,"endColumn":20},{"ruleId":"378","severity":2,"message":"379","line":61,"column":36,"nodeType":"380","endLine":61,"endColumn":48},{"ruleId":"373","severity":1,"message":"374","line":62,"column":53,"nodeType":"375","endLine":62,"endColumn":90},{"ruleId":"369","severity":2,"message":"381","line":62,"column":63,"nodeType":"358","messageId":"371","endLine":62,"endColumn":70},{"ruleId":"369","severity":2,"message":"382","line":126,"column":53,"nodeType":"358","messageId":"371","endLine":126,"endColumn":59},{"ruleId":"356","severity":1,"message":"383","line":164,"column":13,"nodeType":"358","messageId":"359","endLine":164,"endColumn":28},{"ruleId":"356","severity":1,"message":"384","line":164,"column":29,"nodeType":"358","messageId":"359","endLine":164,"endColumn":41},{"ruleId":"369","severity":2,"message":"385","line":180,"column":22,"nodeType":"358","messageId":"371","endLine":180,"endColumn":33},{"ruleId":"369","severity":2,"message":"386","line":201,"column":11,"nodeType":"358","messageId":"371","endLine":201,"endColumn":25},{"ruleId":"356","severity":1,"message":"387","line":58,"column":33,"nodeType":"358","messageId":"359","endLine":58,"endColumn":40},{"ruleId":"388","severity":1,"message":"389","line":109,"column":3,"nodeType":"390","messageId":"391","endLine":109,"endColumn":12},{"ruleId":"356","severity":1,"message":"392","line":58,"column":22,"nodeType":"358","messageId":"359","endLine":58,"endColumn":30},{"ruleId":null,"fatal":true,"severity":2,"message":"393","line":69,"column":3},{"ruleId":"356","severity":1,"message":"357","line":8,"column":9,"nodeType":"358","messageId":"359","endLine":8,"endColumn":22},{"ruleId":"356","severity":1,"message":"394","line":9,"column":9,"nodeType":"358","messageId":"359","endLine":9,"endColumn":18},{"ruleId":"378","severity":2,"message":"395","line":134,"column":10,"nodeType":"380","endLine":134,"endColumn":21},{"ruleId":"378","severity":2,"message":"396","line":135,"column":10,"nodeType":"380","endLine":135,"endColumn":29},{"ruleId":"356","severity":1,"message":"357","line":5,"column":10,"nodeType":"358","messageId":"359","endLine":5,"endColumn":23},{"ruleId":"369","severity":2,"message":"397","line":28,"column":26,"nodeType":"358","messageId":"371","endLine":28,"endColumn":28},{"ruleId":"369","severity":2,"message":"398","line":28,"column":34,"nodeType":"358","messageId":"371","endLine":28,"endColumn":36},{"ruleId":"369","severity":2,"message":"399","line":28,"column":41,"nodeType":"358","messageId":"371","endLine":28,"endColumn":43},{"ruleId":"369","severity":2,"message":"400","line":28,"column":48,"nodeType":"358","messageId":"371","endLine":28,"endColumn":49},{"ruleId":"369","severity":2,"message":"401","line":28,"column":54,"nodeType":"358","messageId":"371","endLine":28,"endColumn":58},{"ruleId":"369","severity":2,"message":"402","line":28,"column":63,"nodeType":"358","messageId":"371","endLine":28,"endColumn":67},{"ruleId":"369","severity":2,"message":"403","line":28,"column":72,"nodeType":"358","messageId":"371","endLine":28,"endColumn":76},{"ruleId":"369","severity":2,"message":"404","line":28,"column":81,"nodeType":"358","messageId":"371","endLine":28,"endColumn":84},{"ruleId":"369","severity":2,"message":"405","line":28,"column":89,"nodeType":"358","messageId":"371","endLine":28,"endColumn":91},{"ruleId":"369","severity":2,"message":"406","line":28,"column":96,"nodeType":"358","messageId":"371","endLine":28,"endColumn":98},{"ruleId":"369","severity":2,"message":"407","line":28,"column":103,"nodeType":"358","messageId":"371","endLine":28,"endColumn":105},{"ruleId":"369","severity":2,"message":"408","line":28,"column":109,"nodeType":"358","messageId":"371","endLine":28,"endColumn":111},{"ruleId":"369","severity":2,"message":"409","line":29,"column":5,"nodeType":"358","messageId":"371","endLine":29,"endColumn":7},{"ruleId":"369","severity":2,"message":"410","line":29,"column":12,"nodeType":"358","messageId":"371","endLine":29,"endColumn":14},{"ruleId":"369","severity":2,"message":"411","line":29,"column":19,"nodeType":"358","messageId":"371","endLine":29,"endColumn":21},{"ruleId":"369","severity":2,"message":"397","line":33,"column":7,"nodeType":"358","messageId":"371","endLine":33,"endColumn":9},{"ruleId":"369","severity":2,"message":"398","line":34,"column":7,"nodeType":"358","messageId":"371","endLine":34,"endColumn":9},{"ruleId":"369","severity":2,"message":"399","line":35,"column":7,"nodeType":"358","messageId":"371","endLine":35,"endColumn":9},{"ruleId":"369","severity":2,"message":"400","line":36,"column":7,"nodeType":"358","messageId":"371","endLine":36,"endColumn":8},{"ruleId":"369","severity":2,"message":"401","line":37,"column":7,"nodeType":"358","messageId":"371","endLine":37,"endColumn":11},{"ruleId":"369","severity":2,"message":"402","line":38,"column":7,"nodeType":"358","messageId":"371","endLine":38,"endColumn":11},{"ruleId":"369","severity":2,"message":"403","line":39,"column":7,"nodeType":"358","messageId":"371","endLine":39,"endColumn":11},{"ruleId":"369","severity":2,"message":"404","line":40,"column":7,"nodeType":"358","messageId":"371","endLine":40,"endColumn":10},{"ruleId":"369","severity":2,"message":"405","line":41,"column":7,"nodeType":"358","messageId":"371","endLine":41,"endColumn":9},{"ruleId":"369","severity":2,"message":"406","line":42,"column":7,"nodeType":"358","messageId":"371","endLine":42,"endColumn":9},{"ruleId":"369","severity":2,"message":"407","line":43,"column":7,"nodeType":"358","messageId":"371","endLine":43,"endColumn":9},{"ruleId":"369","severity":2,"message":"408","line":44,"column":7,"nodeType":"358","messageId":"371","endLine":44,"endColumn":9},{"ruleId":"369","severity":2,"message":"409","line":45,"column":7,"nodeType":"358","messageId":"371","endLine":45,"endColumn":9},{"ruleId":"369","severity":2,"message":"410","line":46,"column":7,"nodeType":"358","messageId":"371","endLine":46,"endColumn":9},{"ruleId":"369","severity":2,"message":"411","line":47,"column":7,"nodeType":"358","messageId":"371","endLine":47,"endColumn":9},{"ruleId":"369","severity":2,"message":"397","line":58,"column":15,"nodeType":"358","messageId":"371","endLine":58,"endColumn":17},{"ruleId":"369","severity":2,"message":"398","line":61,"column":25,"nodeType":"358","messageId":"371","endLine":61,"endColumn":27},{"ruleId":"369","severity":2,"message":"399","line":64,"column":28,"nodeType":"358","messageId":"371","endLine":64,"endColumn":30},{"ruleId":"369","severity":2,"message":"400","line":67,"column":17,"nodeType":"358","messageId":"371","endLine":67,"endColumn":18},{"ruleId":"369","severity":2,"message":"401","line":70,"column":13,"nodeType":"358","messageId":"371","endLine":70,"endColumn":17},{"ruleId":"369","severity":2,"message":"402","line":73,"column":13,"nodeType":"358","messageId":"371","endLine":73,"endColumn":17},{"ruleId":"369","severity":2,"message":"403","line":76,"column":13,"nodeType":"358","messageId":"371","endLine":76,"endColumn":17},{"ruleId":"369","severity":2,"message":"404","line":79,"column":12,"nodeType":"358","messageId":"371","endLine":79,"endColumn":15},{"ruleId":"369","severity":2,"message":"405","line":82,"column":17,"nodeType":"358","messageId":"371","endLine":82,"endColumn":19},{"ruleId":"369","severity":2,"message":"406","line":85,"column":13,"nodeType":"358","messageId":"371","endLine":85,"endColumn":15},{"ruleId":"369","severity":2,"message":"407","line":88,"column":20,"nodeType":"358","messageId":"371","endLine":88,"endColumn":22},{"ruleId":"369","severity":2,"message":"409","line":91,"column":15,"nodeType":"358","messageId":"371","endLine":91,"endColumn":17},{"ruleId":"369","severity":2,"message":"410","line":94,"column":20,"nodeType":"358","messageId":"371","endLine":94,"endColumn":22},{"ruleId":"369","severity":2,"message":"411","line":97,"column":14,"nodeType":"358","messageId":"371","endLine":97,"endColumn":16},{"ruleId":"369","severity":2,"message":"412","line":117,"column":5,"nodeType":"358","messageId":"371","endLine":117,"endColumn":15},{"ruleId":"369","severity":2,"message":"412","line":158,"column":5,"nodeType":"358","messageId":"371","endLine":158,"endColumn":15},{"ruleId":"356","severity":1,"message":"413","line":224,"column":47,"nodeType":"358","messageId":"359","endLine":224,"endColumn":51},{"ruleId":"356","severity":1,"message":"414","line":224,"column":87,"nodeType":"358","messageId":"359","endLine":224,"endColumn":91},{"ruleId":"356","severity":1,"message":"415","line":225,"column":17,"nodeType":"358","messageId":"359","endLine":225,"endColumn":21},{"ruleId":"356","severity":1,"message":"416","line":225,"column":57,"nodeType":"358","messageId":"359","endLine":225,"endColumn":60},{"ruleId":"369","severity":2,"message":"401","line":274,"column":139,"nodeType":"358","messageId":"371","endLine":274,"endColumn":143},{"ruleId":"369","severity":2,"message":"417","line":275,"column":61,"nodeType":"358","messageId":"371","endLine":275,"endColumn":81},{"ruleId":"369","severity":2,"message":"417","line":276,"column":29,"nodeType":"358","messageId":"371","endLine":276,"endColumn":49},{"ruleId":"369","severity":2,"message":"402","line":277,"column":131,"nodeType":"358","messageId":"371","endLine":277,"endColumn":135},{"ruleId":"369","severity":2,"message":"418","line":278,"column":61,"nodeType":"358","messageId":"371","endLine":278,"endColumn":81},{"ruleId":"369","severity":2,"message":"418","line":279,"column":29,"nodeType":"358","messageId":"371","endLine":279,"endColumn":49},{"ruleId":"369","severity":2,"message":"403","line":280,"column":141,"nodeType":"358","messageId":"371","endLine":280,"endColumn":145},{"ruleId":"369","severity":2,"message":"419","line":281,"column":61,"nodeType":"358","messageId":"371","endLine":281,"endColumn":81},{"ruleId":"369","severity":2,"message":"419","line":282,"column":29,"nodeType":"358","messageId":"371","endLine":282,"endColumn":49},{"ruleId":"369","severity":2,"message":"404","line":283,"column":140,"nodeType":"358","messageId":"371","endLine":283,"endColumn":143},{"ruleId":"369","severity":2,"message":"420","line":284,"column":61,"nodeType":"358","messageId":"371","endLine":284,"endColumn":80},{"ruleId":"369","severity":2,"message":"420","line":285,"column":29,"nodeType":"358","messageId":"371","endLine":285,"endColumn":48},{"ruleId":"369","severity":2,"message":"421","line":323,"column":15,"nodeType":"358","messageId":"371","endLine":323,"endColumn":23},{"ruleId":"378","severity":2,"message":"422","line":119,"column":14,"nodeType":"380","endLine":119,"endColumn":25},{"ruleId":"356","severity":1,"message":"357","line":5,"column":10,"nodeType":"358","messageId":"359","endLine":5,"endColumn":23},{"ruleId":"369","severity":2,"message":"412","line":54,"column":5,"nodeType":"358","messageId":"371","endLine":54,"endColumn":15},{"ruleId":"369","severity":2,"message":"412","line":80,"column":5,"nodeType":"358","messageId":"371","endLine":80,"endColumn":15},{"ruleId":"369","severity":2,"message":"421","line":179,"column":15,"nodeType":"358","messageId":"371","endLine":179,"endColumn":23},{"ruleId":"378","severity":2,"message":"423","line":56,"column":36,"nodeType":"380","endLine":56,"endColumn":48},{"ruleId":null,"fatal":true,"severity":2,"message":"424","line":34,"column":3},{"ruleId":"369","severity":2,"message":"425","line":32,"column":23,"nodeType":"358","messageId":"371","endLine":32,"endColumn":35},{"ruleId":"369","severity":2,"message":"425","line":33,"column":7,"nodeType":"358","messageId":"371","endLine":33,"endColumn":19},{"ruleId":"356","severity":1,"message":"426","line":39,"column":11,"nodeType":"358","messageId":"359","endLine":39,"endColumn":12},{"ruleId":"369","severity":2,"message":"425","line":39,"column":15,"nodeType":"358","messageId":"371","endLine":39,"endColumn":27},{"ruleId":"369","severity":2,"message":"427","line":40,"column":29,"nodeType":"358","messageId":"371","endLine":40,"endColumn":30},{"ruleId":"369","severity":2,"message":"427","line":41,"column":19,"nodeType":"358","messageId":"371","endLine":41,"endColumn":20},{"ruleId":"369","severity":2,"message":"428","line":10,"column":24,"nodeType":"358","messageId":"371","endLine":10,"endColumn":35},{"ruleId":"369","severity":2,"message":"429","line":11,"column":29,"nodeType":"358","messageId":"371","endLine":11,"endColumn":45},{"ruleId":"369","severity":2,"message":"430","line":17,"column":24,"nodeType":"358","messageId":"371","endLine":17,"endColumn":36},{"ruleId":"352","replacedBy":"431"},{"ruleId":"354","replacedBy":"432"},{"ruleId":"356","severity":1,"message":"426","line":35,"column":11,"nodeType":"358","messageId":"359","endLine":35,"endColumn":12},{"ruleId":"369","severity":2,"message":"433","line":36,"column":29,"nodeType":"358","messageId":"371","endLine":36,"endColumn":30},{"ruleId":"369","severity":2,"message":"433","line":37,"column":19,"nodeType":"358","messageId":"371","endLine":37,"endColumn":20},{"ruleId":"369","severity":2,"message":"434","line":12,"column":27,"nodeType":"358","messageId":"371","endLine":12,"endColumn":40},{"ruleId":"369","severity":2,"message":"435","line":7,"column":29,"nodeType":"358","messageId":"371","endLine":7,"endColumn":38},{"ruleId":"436","severity":1,"message":"437","line":31,"column":32,"nodeType":"438","messageId":"439","endLine":31,"endColumn":43,"fix":"440"},{"ruleId":"356","severity":1,"message":"357","line":5,"column":10,"nodeType":"358","messageId":"359","endLine":5,"endColumn":23},{"ruleId":"441","severity":2,"message":"442","line":28,"column":27,"nodeType":"443","messageId":"444","endLine":28,"endColumn":30},{"ruleId":"369","severity":2,"message":"445","line":28,"column":27,"nodeType":"358","messageId":"371","endLine":28,"endColumn":29},{"ruleId":"369","severity":2,"message":"446","line":28,"column":31,"nodeType":"358","messageId":"371","endLine":28,"endColumn":33},{"ruleId":"369","severity":2,"message":"447","line":28,"column":39,"nodeType":"358","messageId":"371","endLine":28,"endColumn":41},{"ruleId":"369","severity":2,"message":"445","line":32,"column":7,"nodeType":"358","messageId":"371","endLine":32,"endColumn":9},{"ruleId":"369","severity":2,"message":"446","line":33,"column":7,"nodeType":"358","messageId":"371","endLine":33,"endColumn":9},{"ruleId":"369","severity":2,"message":"447","line":34,"column":7,"nodeType":"358","messageId":"371","endLine":34,"endColumn":9},{"ruleId":"369","severity":2,"message":"445","line":45,"column":21,"nodeType":"358","messageId":"371","endLine":45,"endColumn":23},{"ruleId":"369","severity":2,"message":"446","line":48,"column":14,"nodeType":"358","messageId":"371","endLine":48,"endColumn":16},{"ruleId":"369","severity":2,"message":"447","line":51,"column":15,"nodeType":"358","messageId":"371","endLine":51,"endColumn":17},{"ruleId":"369","severity":2,"message":"412","line":66,"column":5,"nodeType":"358","messageId":"371","endLine":66,"endColumn":15},{"ruleId":"369","severity":2,"message":"412","line":95,"column":5,"nodeType":"358","messageId":"371","endLine":95,"endColumn":15},{"ruleId":"369","severity":2,"message":"448","line":95,"column":43,"nodeType":"358","messageId":"371","endLine":95,"endColumn":61},{"ruleId":"369","severity":2,"message":"449","line":181,"column":29,"nodeType":"358","messageId":"371","endLine":181,"endColumn":48},{"ruleId":"369","severity":2,"message":"421","line":207,"column":15,"nodeType":"358","messageId":"371","endLine":207,"endColumn":23},{"ruleId":"369","severity":2,"message":"450","line":239,"column":1,"nodeType":"358","messageId":"371","endLine":239,"endColumn":7},{"ruleId":"356","severity":1,"message":"451","line":93,"column":22,"nodeType":"358","messageId":"359","endLine":93,"endColumn":37},{"ruleId":"378","severity":2,"message":"452","line":125,"column":14,"nodeType":"380","endLine":125,"endColumn":25},{"ruleId":"369","severity":2,"message":"453","line":128,"column":28,"nodeType":"358","messageId":"371","endLine":128,"endColumn":44},{"ruleId":"356","severity":1,"message":"454","line":136,"column":13,"nodeType":"358","messageId":"359","endLine":136,"endColumn":17},{"ruleId":"369","severity":2,"message":"455","line":165,"column":114,"nodeType":"358","messageId":"371","endLine":165,"endColumn":118},{"ruleId":"369","severity":2,"message":"456","line":166,"column":61,"nodeType":"358","messageId":"371","endLine":166,"endColumn":81},{"ruleId":"369","severity":2,"message":"456","line":167,"column":29,"nodeType":"358","messageId":"371","endLine":167,"endColumn":49},{"ruleId":"369","severity":2,"message":"421","line":178,"column":15,"nodeType":"358","messageId":"371","endLine":178,"endColumn":23},{"ruleId":"369","severity":2,"message":"421","line":190,"column":15,"nodeType":"358","messageId":"371","endLine":190,"endColumn":23},"no-native-reassign",["457"],"no-negated-in-lhs",["458"],"no-unused-vars","'ManagementAPI' is defined but never used.","Identifier","unusedVar","'AllProjectList' is defined but never used.","'AllRatingList' is defined but never used.","'AllModuleList' is defined but never used.","'AllParticipationList' is defined but never used.","'ProjectList' is defined but never used.","'PersonList' is defined but never used.","'RatingList' is defined but never used.","'StudentList' is defined but never used.","Parsing error: Unexpected token, expected \";\"\n\n\u001b[0m \u001b[90m 259 | \u001b[39m\u001b[90m//Jetzt kommt Project\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 260 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 261 | \u001b[39m  getProjects() {\u001b[0m\n\u001b[0m \u001b[90m     | \u001b[39m                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 262 | \u001b[39m    \u001b[0m\n\u001b[0m \u001b[90m 263 | \u001b[39m    \u001b[36mreturn\u001b[39m \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33m#\u001b[39mfetchAdvanced(\u001b[36mthis\u001b[39m\u001b[33m.\u001b[39m\u001b[33m#\u001b[39mgetProjectsURL())\u001b[33m.\u001b[39mthen((responseJSON) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 264 | \u001b[39m      let projectBOs \u001b[33m=\u001b[39m \u001b[33mProjectBO\u001b[39m\u001b[33m.\u001b[39mfromJSON(responseJSON)\u001b[33m;\u001b[39m\u001b[0m","no-undef","'newCustomrList' is not defined.","undef","'ProjectForm' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'accounts' is assigned a value but never used.","'ratings' is not defined.","react/jsx-no-undef","'RatingDetail' is not defined.","JSXIdentifier","'account' is not defined.","'person' is not defined.","'filteredRatings' is assigned a value but never used.","'ratingFilter' is assigned a value but never used.","'ratingilter' is not defined.","'filteredRating' is not defined.","'ownerID' is assigned a value but never used.","no-dupe-keys","Duplicate key 'projectID'.","ObjectExpression","unexpected","'PersonID' is assigned a value but never used.","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 67 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 68 | \u001b[39m  \u001b[90m/** Handles the onClick event of the delete rating button */\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 69 | \u001b[39m  deleteRatingButtonClicked \u001b[33m=\u001b[39m (event) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 70 | \u001b[39m    event\u001b[33m.\u001b[39mstopPropagation()\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 71 | \u001b[39m    \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39msetState({\u001b[0m\n\u001b[0m \u001b[90m 72 | \u001b[39m      showRatingDeleteDialog\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m\u001b[0m","'ProjectBO' is defined but never used.","'ProjectForm' is not defined.","'ProjectDeleteDialog' is not defined.","'mo' is not defined.","'sd' is not defined.","'ep' is not defined.","'c' is not defined.","'bdap' is not defined.","'bblp' is not defined.","'bdlp' is not defined.","'pdl' is not defined.","'la' is not defined.","'ro' is not defined.","'sr' is not defined.","'fl' is not defined.","'st' is not defined.","'pt' is not defined.","'ow' is not defined.","'ProjectAPI' is not defined.","'BDAP' is assigned a value but never used.","'BBLP' is assigned a value but never used.","'BDLP' is assigned a value but never used.","'PDL' is assigned a value but never used.","'bdapValidationFailed' is not defined.","'bblpValidationFailed' is not defined.","'bdlpValidationFailed' is not defined.","'pdlValidationFailed' is not defined.","'customer' is not defined.","'AccountList' is not defined.","'ModuleDetail' is not defined.","Parsing error: Unexpected reserved word 'static'\n\n\u001b[0m \u001b[90m 32 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 33 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 34 | \u001b[39m  static fromJSON(participations) {\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 35 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 36 | \u001b[39m    let result \u001b[33m=\u001b[39m []\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 37 | \u001b[39m\u001b[0m","'projectTypes' is not defined.","'c' is assigned a value but never used.","'t' is not defined.","'aCourseAbbr' is not defined.","'aMatriculationNr' is not defined.","'aCourse_abbr' is not defined.",["457"],["458"],"'m' is not defined.","'aToBeAssessed' is not defined.","'aDateTime' is not defined.","no-whitespace-before-property","Unexpected whitespace before property prop.","MemberExpression","unexpectedWhitespace",{"range":"459","text":"460"},"no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","'tb' is not defined.","'gr' is not defined.","'pa' is not defined.","'updatedProjectType' is not defined.","'swsValidationFailed' is not defined.","'Rating' is not defined.","'showStudentForm' is assigned a value but never used.","'ProjectList' is not defined.","'showStudentrForm' is not defined.","'name' is assigned a value but never used.","'Name' is not defined.","'NameValidationFailed' is not defined.","no-global-assign","no-unsafe-negation",[519,520],""]