{"version":3,"sources":["components/dialogs/ProfileDropDown.js","components/layout/Header.js","api/BusinessObject.js","api/CustomerBO.js","api/TransactionBO.js","api/AccountBO.js","api/BankAPI.js","components/dialogs/ContextErrorMessage.js","components/dialogs/LoadingProgress.js","components/dialogs/CustomerForm.js","components/dialogs/CustomerDeleteDialog.js","components/dialogs/MoneyTransferDialog.js","components/AccountListEntry.js","components/AccountList.js","components/CustomerListEntry.js","components/CustomerList.js","components/TransactionList.js","components/pages/About.js","components/AccountDetail.js","components/AllAccountList.js","Theme.js","components/pages/SignIn.js","firebaseconfig.js","App.js","index.js"],"names":["ProfileDropDown","props","createRef","handleAvatarButtonClick","setState","open","state","handleClose","handleSignOutButtonClicked","firebase","auth","signOut","this","classes","user","IconButton","className","avatarButton","ref","onClick","Avatar","src","photoURL","Popover","anchorEl","current","onClose","anchorOrigin","vertical","horizontal","transformOrigin","ClickAwayListener","onClickAway","Paper","profileBox","Typography","align","Divider","divider","variant","displayName","email","Grid","container","justify","item","Button","color","Component","withStyles","theme","float","margin","spacing","padding","background","palette","default","Header","handleTabChange","e","newIndex","tabindex","component","Tabs","indicatorColor","textColor","centered","value","onChange","Tab","label","RouterLink","to","BusinessObject","id","aId","result","prop","CustomerBO","aFirstname","aLastname","first_name","last_name","customers","Array","isArray","forEach","c","Object","setPrototypeOf","prototype","push","TransactionBO","aSourceID","aTargetID","aAmount","source_account","target_account","amount","transactions","t","AccountBO","aOwner","owner","accounts","a","BankAPI","Intl","NumberFormat","style","currency","customerName","url","init","fetch","then","res","ok","Error","status","statusText","json","responseJSON","customerBOs","fromJSON","Promise","resolve","customerID","responseCustomerBO","customerBO","method","headers","body","JSON","stringify","getID","accountBOs","accountID","accountBO","transactionBOs","transaction","tansactionBO","ContextErrorMessage","error","contextErrorMsg","onReload","Alert","severity","root","AlertTitle","margins","message","startIcon","marginTop","LoadingProgress","show","LinearProgress","width","CustomerForm","addCustomer","newCustomer","firstName","lastName","getAPI","customer","baseState","catch","updatingInProgress","updatingError","updateCustomer","updatedCustomer","assign","setFirstName","setLastName","textFieldValueChange","event","target","trim","length","fn","ln","getFirstName","getLastName","firstNameValidationFailed","firstNameEdited","lastNameValidationFailed","lastNameEdited","addingInProgress","addingError","title","header","Dialog","maxWidth","DialogTitle","closeButton","DialogContent","DialogContentText","noValidate","autoComplete","TextField","autoFocus","type","required","fullWidth","helperText","DialogActions","disabled","position","right","top","grey","CustomerDeleteDialog","deleteCustomer","deletingInProgress","deletingError","MoneyTransferDialog","initialState","transferAmount","targetCustomers","selectedCustomer","selectedAccount","transferAmountValidationFailed","transferAmountFieldEdited","loadingInProgress","customerSearchError","transactionError","searchCustomer","getAccountsForCustomer","customerNotFound","transferMoney","account","replace","addTransaction","val","isNaN","customerSelectionChange","accountSelectionChange","xs","onBlur","InputProps","endAdornment","InputAdornment","select","map","MenuItem","key","startAdornment","getCurrency","AccountListEntry","getBalance","getBalanceOfAccount","balance","loadingError","deleteAccount","onAccountDeleted","showMoneyTransferDialog","moneyTransferDialogClosed","prevProps","ListItem","accountEntry","Link","pathname","getCurrencyFormatter","format","ListItemSecondaryAction","buttonMargin","size","marginRight","fontSize","typography","pxToRem","flexBasis","flexShrink","AccountList","getAccounts","loadingAccountError","addAccount","addAccountForCustomer","addingAccountError","deleteAccountHandler","deletedAccount","filter","List","accountList","addAccountButton","marginBottom","bottom","CustomerListEntry","expansionPanelStateChanged","onExpandedStateChange","editCustomerButtonClicked","stopPropagation","showCustomerForm","customerFormClosed","deleteCustomerButtonClicked","showCustomerDeleteDialog","deleteCustomerDialogClosed","onCustomerDeleted","expandedState","Accordion","defaultExpanded","expanded","AccordionSummary","expandIcon","alignItems","heading","ButtonGroup","AccordionDetails","CustomerList","getCustomers","filteredCustomers","newID","expandedCustomerID","customerDeleted","newCustomrList","customerFromState","addCustomerButtonClicked","filterFieldValueChange","toLowerCase","firstNameContainsValue","includes","lastNameContainsValue","customerFilter","clearFilterFieldButtonClicked","expandedID","location","expandCustomer","withRouter","TransactionList","getTransactions","getCreditsForAccount","creditTransactionBOs","getDebitsForAccount","debitTransactionBOs","concat","sort","transactionComparator","transactionsLoadingInProgress","debitsLoadingError","creditsLoadingError","transactionA","transactionB","currencyFormatter","TableRow","TableCell","scope","getSourceAccount","getTargetAccount","getAccount","Fragment","getAmount","renderTransactionRow","TableContainer","tableHeader","Table","TableHead","TableBody","renderTransactions","subNav","renderTransactionTable","marginLeft","useStyles","makeStyles","content","About","elevation","href","AccountDetail","getCustomer","AllAccountList","loadAccounts","getAllAccounts","getOwner","toString","white","createMuiTheme","black","primary","contrastText","dark","colors","indigo","main","light","secondary","blue","success","green","info","warning","orange","red","text","blueGrey","link","paper","icon","SignIn","handleSignInButtonClicked","onSignIn","firebaseConfig","App","handleAuthStateChange","authLoading","getIdToken","token","document","cookie","currentUser","authError","handleSignIn","provider","GoogleAuthProvider","signInWithRedirect","appError","initializeApp","languageCode","onAuthStateChanged","ThemeProvider","Theme","CssBaseline","basename","process","Container","from","exact","path","React","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2f78571b.chunk.js","sourcesContent":["import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Popover, IconButton, Avatar, ClickAwayListener, withStyles, Typography, Paper, Button, Grid, Divider } from '@material-ui/core';\nimport firebase from 'firebase/app';\n\n/**\n * Shows a drop down list for the account infos and a possibility to log out. For closing the pop up menu if \n * the mouse is clicked outside the menu, the ClickAwayListener component is used.For logging out,\n * firebase.auth().signOut() method is used.\n * \n * @see See Material-UIs [Popover](https://material-ui.com/components/popover/)\n * @see See Material-UIs [ClickAwayListener](https://material-ui.com/components/click-away-listener/)\n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass ProfileDropDown extends Component {\n\n  // a refernce to the avatar button\n  #avatarButtonRef = createRef();\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      open: false,\n    }\n  }\n\n  /** Handles click events on the avatar button and toggels visibility */\n  handleAvatarButtonClick = () => {\n    this.setState({\n      open: !this.state.open\n    });\n  }\n\n  /** \n   * Handles click events from the ClickAwayListener.\n   * \n   * @see See Material-UIs [ClickAwayListener](https://material-ui.com/components/click-away-listener/)\n   */\n  handleClose = () => {\n    this.setState({\n      open: false\n    });\n  }\n\n  /** \n\t * Handles the click event of the sign in button and uses the firebase.auth() component to sign in.\n\t * \n\t * @see See Google [firebase.auth](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\n\t * @see See Google [firebase.auth().signOut](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signout)\n\t */\n  handleSignOutButtonClicked = () => {\n    firebase.auth().signOut();\n  }\n\n  /** Renders the profile drop down if a loggin user is given as a prop */\n  render() {\n    const { classes, user } = this.props;\n    const { open } = this.state;\n\n    return (\n      user ?\n        <div>\n          <IconButton className={classes.avatarButton} ref={this.#avatarButtonRef} onClick={this.handleAvatarButtonClick}>\n            <Avatar src={user.photoURL} />\n          </IconButton>\n\n          <Popover open={open} anchorEl={this.#avatarButtonRef.current} onClose={this.handleClose}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}>\n            <ClickAwayListener onClickAway={this.handleClose}>\n              <Paper className={classes.profileBox}>\n                <Typography align='center'>Hello</Typography>\n                <Divider className={classes.divider} />\n                <Typography align='center' variant='body2'>{user.displayName}</Typography>\n                <Typography align='center' variant='body2'>{user.email}</Typography>\n                <Divider className={classes.divider} />\n                <Grid container justify='center'>\n                  <Grid item>\n                    <Button color='primary' onClick={this.handleSignOutButtonClicked}>Logout</Button>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </ClickAwayListener>\n          </Popover>\n        </div>\n        : null\n    )\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  avatarButton: {\n    float: 'right'\n  },\n  divider: {\n    margin: theme.spacing(1),\n  },\n  profileBox: {\n    padding: theme.spacing(1),\n    background: theme.palette.background.default,\n  }\n});\n\n/** PropTypes */\nProfileDropDown.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The logged in firesbase user */\n  user: PropTypes.object,\n}\n\nexport default withStyles(styles)(ProfileDropDown)\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paper, Typography, Tabs, Tab } from '@material-ui/core';\nimport { Link as RouterLink } from 'react-router-dom';\nimport ProfileDropDown from '../dialogs/ProfileDropDown';\n\n/**\n * Shows the header with the main navigation Tabs within a Paper.\n * \n * @see See Material-UIs [Tabs](https://material-ui.com/components/tabs/)\n * @see See Material-UIs [Paper](https://material-ui.com/components/paper/)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass Header extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init an empty state\n    this.state = {\n      tabindex: 0\n    };\n  }\n\n  /** Handles onChange events of the Tabs component */\n  handleTabChange = (e, newIndex) => {\n    // console.log(newValue)\n    this.setState({\n      tabindex: newIndex\n    })\n  };\n\n  /** Renders the component */\n  render() {\n    const { user } = this.props;\n\n    return (\n      <Paper variant='outlined' >\n        <ProfileDropDown user={user} />\n        <Typography variant='h3' component='h1' align='center'>\n          HdM Bank Administration\n        </Typography>\n        <Typography variant='h4' component='h2' align='center'>\n          Client Advisor Home\n        </Typography>\n        {\n          user ?\n            <Tabs indicatorColor='primary' textColor='primary' centered value={this.state.tabindex} onChange={this.handleTabChange} >\n              <Tab label='Customers' component={RouterLink} to={`/customers`} />\n              <Tab label='All Accounts' component={RouterLink} to={`/accounts`} />\n              <Tab label='About' component={RouterLink} to={`/about`} />\n            </Tabs>\n            : null\n        }\n      </Paper>\n    )\n  }\n}\n\n/** PropTypes */\nHeader.propTypes = {\n  /** The logged in firesbase user */\n  user: PropTypes.object,\n}\n\nexport default Header;","/**\n * Base class for all BusinessObjects, which has an ID field by default.\n */\nexport default class BusinessObject {\n\n  /**\n   * The null constructor.\n   */\n  constructor() {\n    this.id = 0;\n  }\n\n  /**\n   * Sets the ID of this BusinessObject.\n   * \n   * @param {*} aId - the new ID of this BusinessObject\n   */\n  setID(aId) {\n    this.id = aId;\n  }\n\n  /**\n   * Returns the ID of this BusinessObject.\n   */\n  getID() {\n    return this.id;\n  }\n\n  /**\n   * Returns a string representation of this Object. This is useful for debugging purposes.\n   */\n  toString() {\n    let result = '';\n    for (var prop in this) {\n      result += prop + ': ' + this[prop] + ' ';\n    }\n    return result;\n  }\n}","import BusinessObject from './BusinessObject';\n\n/**\n * Represents a customer of the bank.\n */\nexport default class CustomerBO extends BusinessObject {\n\n  /**\n   * Constructs a CustomerBO object with a given firstname and lastname.\n   * \n   * @param {String} aFirstname - the firstname of this CustomerBO.\n   * @param {String} aFirstname - the firstname of this CustomerBO.\n   */\n  constructor(aFirstname, aLastname) {\n    super();\n    this.first_name = aFirstname;\n    this.last_name = aLastname;\n  }\n\n  /**\n   * Sets a new firstname.\n   * \n   * @param {String} aFirstname - the new firstname of this CustomerBO.\n   */\n  setFirstName(aFirstname) {\n    this.first_name = aFirstname;\n  }\n\n  /**\n   * Gets the firstname.\n   */\n  getFirstName() {\n    return this.first_name;\n  }\n\n  /**\n   * Sets a new lastname.\n   * \n   * @param {*} aLastname - the new lastname of this CustomerBO.\n   */\n  setLastName(aLastname) {\n    this.last_name = aLastname;\n  }\n\n  /**\n   * Gets the lastname.\n   */\n  getLastName() {\n    return this.last_name;\n  }\n\n  /** \n   * Returns an Array of CustomerBOs from a given JSON structure.\n   */\n  static fromJSON(customers) {\n    let result = [];\n\n    if (Array.isArray(customers)) {\n      customers.forEach((c) => {\n        Object.setPrototypeOf(c, CustomerBO.prototype);\n        result.push(c);\n      })\n    } else {\n      // Es handelt sich offenbar um ein singuläres Objekt\n      let c = customers;\n      Object.setPrototypeOf(c, CustomerBO.prototype);\n      result.push(c);\n    }\n\n    return result;\n  }\n}","import BusinessObject from './BusinessObject';\n\n/**\n * Reresents a transaction.\n */ \n export default class TransactionBO extends BusinessObject {\n\n  /**\n   * Constructs a new TransactionBO object.\n   * \n   * @param {*} aSourceID - the ID of the source account.\n   * @param {*} aTargetID - the ID of the target account.\n   * @param {*} aAmount - the amount of money to transfer.\n   */\n  constructor(aSourceID, aTargetID, aAmount) {\n    super();\n    this.source_account = aSourceID;\n    this.target_account = aTargetID;\n    this.amount = aAmount;\n  }\n\n  /**\n   * Sets the source account id.\n   * \n   * @param {*} aSourceID - the new ID of the source account.\n   */\n  setSourceAccount(aSourceID) {\n    this.source_account = aSourceID;\n  }\n\n  /**\n   * Gets the source account id.\n   */\n  getSourceAccount() {\n    return this.source_account;\n  }\n\n  /**\n   * Sets the source target account id.\n   * \n   * @param {*} aTargetID - the new ID of the target account.\n   */\n  setTargetAccount(aTargetID) {\n    this.target_account = aTargetID;\n  }\n\n  /**\n   * Gets the target account id.\n   */\n  getTargetAccount() {\n    return this.target_account;\n  }\n\n  /**\n   * Sets the amount of money to transfer.\n   * \n   * @param {*} aAmount - the amount of money to transfer.\n   */\n  setAmount(aAmount) {\n    this.amount = aAmount;\n  }\n\n  /**\n   * Gets the amount of money of the transaction.\n   */\n  getAmount() {\n    return this.amount;\n  }\n\n  /**\n   * Returns an Array of TransactionBOs from a given JSON structure.\n   */\n  static fromJSON(transactions) {\n    let result = [];\n\n    if (Array.isArray(transactions)) {\n      transactions.forEach((t) => {\n        Object.setPrototypeOf(t, TransactionBO.prototype);\n        result.push(t);\n      })\n    } else {\n      // Es handelt sich offenbar um ein singuläres Objekt\n      let t = transactions\n      Object.setPrototypeOf(t, TransactionBO.prototype);\n      result.push(t);\n    }\n\n    return result;\n  }\n}\n\n","import BusinessObject from './BusinessObject';\n\n/**\n * Represents an account object of a customer.\n */\nexport default class AccountBO extends BusinessObject {\n\n  /**\n   * Constructs a new AccountBO object with a given owner.\n   * \n   * @param {*} aOwner - the owner of this AccountBO.\n   */\n  constructor(aOwner) {\n    super();\n    this.owner = aOwner;\n  }\n\n  /**\n   * Sets the owner of this AccountBO.\n   * \n   * @param {*} aOwner - the new owner of this AccountBO.\n   */\n  setOwner(aOwner) {\n    this.owner = aOwner;\n  }\n\n  /**\n   * Gets the owner of this AccountBO.\n   */\n  getOwner() {\n    return this.owner;\n  }\n\n  /**\n   * Returns an Array of AccountBOs from a given JSON structure\n   */\n  static fromJSON(accounts) {\n    let result = [];\n\n    if (Array.isArray(accounts)) {\n      accounts.forEach((a) => {\n        Object.setPrototypeOf(a, AccountBO.prototype);\n        result.push(a);\n      })\n    } else {\n      // Es handelt sich offenbar um ein singuläres Objekt\n      let a = accounts;\n      Object.setPrototypeOf(a, AccountBO.prototype);\n      result.push(a);\n    }\n\n    return result;\n  }\n}","import CustomerBO from './CustomerBO';\nimport TransactionBO from './TransactionBO';\nimport AccountBO from './AccountBO';\n\n/**\n * Abstracts the REST interface of the Python backend with convenient access methods.\n * The class is implemented as a singleton. \n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nexport default class BankAPI {\n\n  // Singelton instance\n  static #api = null;\n\n\n  // Local Python backend\n  #bankServerBaseURL = '/bank';\n\n  // Local http-fake-backend \n  //#bankServerBaseURL = '/api/bank';\n\n  #currencyFormatter = new Intl.NumberFormat('de-DE', {\n    style: 'currency',\n    currency: 'EUR'\n  });\n\n  #currency = '€';\n\n  // Customer related\n  #getCustomersURL = () => `${this.#bankServerBaseURL}/customers`;\n  #addCustomerURL = () => `${this.#bankServerBaseURL}/customers`;\n  #getCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}`;\n  #updateCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}`;\n  #deleteCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}`;\n  #searchCustomerURL = (customerName) => `${this.#bankServerBaseURL}/customers-by-name/${customerName}`;\n\n\n  // Account related\n  #getAllAccountsURL = () => `${this.#bankServerBaseURL}/accounts`;\n  #getAccountsForCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}/accounts`;\n  #addAccountsForCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}/accounts`;\n  #getBalanceForAccountURL = (id) => `${this.#bankServerBaseURL}/accounts/${id}/balance`;\n  #deleteAccountIdURL = (id) => `${this.#bankServerBaseURL}/accounts/${id}`;\n\n  // Transaction related\n  #getCreditsForAccountIdURL = (id) => `${this.#bankServerBaseURL}/account/${id}/credits`;\n  #getDebitsForAccountIdURL = (id) => `${this.#bankServerBaseURL}/account/${id}/debits`;\n  #addTransactionURL = () => `${this.#bankServerBaseURL}/transactions`;\n\n  /** \n   * Get the Singelton instance \n   * \n   * @public\n   */\n  static getAPI() {\n    if (this.#api == null) {\n      this.#api = new BankAPI();\n    }\n    return this.#api;\n  }\n\n  /**\n   *  Returns a Promise which resolves to a json object. \n   *  The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \n   *  fetchAdvanced throws an Error also an server status errors\n   */\n  #fetchAdvanced = (url, init) => fetch(url, init)\n    .then(res => {\n      // The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \n      if (!res.ok) {\n        throw Error(`${res.status} ${res.statusText}`);\n      }\n      return res.json();\n    }\n    )\n\n  /**\n   * Returns a formatter to format currencys of the transactions\n   * \n   * @public\n   */\n  getCurrencyFormatter() {\n    return this.#currencyFormatter;\n  }\n\n  /**\n   * Returns the code for the currency\n   * \n   * @public \n   */\n  getCurrency() {\n    return this.#currency;\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of CustomerBOs\n   * \n   * @public\n   */\n  getCustomers() {\n    return this.#fetchAdvanced(this.#getCustomersURL()).then((responseJSON) => {\n      let customerBOs = CustomerBO.fromJSON(responseJSON);\n      // console.info(customerBOs);\n      return new Promise(function (resolve) {\n        resolve(customerBOs);\n      })\n    })\n  }\n\n  /**\n   * Returns a Promise, which resolves to a CustomerBO\n   * \n   * @param {Number} customerID to be retrieved\n   * @public\n   */\n  getCustomer(customerID) {\n    return this.#fetchAdvanced(this.#getCustomerURL(customerID)).then((responseJSON) => {\n      // We always get an array of CustomerBOs.fromJSON, but only need one object\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n      // console.info(responseCustomerBO);\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      })\n    })\n  }\n\n  /**\n   * Adds a customer and returns a Promise, which resolves to a new CustomerBO object with the \n   * firstName and lastName of the parameter customerBO object.\n   * \n   * @param {CustomerBO} customerBO to be added. The ID of the new customer is set by the backend\n   * @public\n   */\n  addCustomer(customerBO) {\n    return this.#fetchAdvanced(this.#addCustomerURL(), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain',\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(customerBO)\n    }).then((responseJSON) => {\n      // We always get an array of CustomerBOs.fromJSON, but only need one object\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n      // console.info(accountBOs);\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      })\n    })\n  }\n\n  /**\n   * Updates a customer and returns a Promise, which resolves to a CustomerBO.\n   * \n   * @param {CustomerBO} customerBO to be updated\n   * @public\n   */\n  updateCustomer(customerBO) {\n    return this.#fetchAdvanced(this.#updateCustomerURL(customerBO.getID()), {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json, text/plain',\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(customerBO)\n    }).then((responseJSON) => {\n      // We always get an array of CustomerBOs.fromJSON\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n      // console.info(accountBOs);\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      })\n    })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID to be deleted\n   * @public\n   */\n  deleteCustomer(customerID) {\n    return this.#fetchAdvanced(this.#deleteCustomerURL(customerID), {\n      method: 'DELETE'\n    }).then((responseJSON) => {\n      // We always get an array of CustomerBOs.fromJSON\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n      // console.info(accountBOs);\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      })\n    })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID to be deleted\n   * @public\n   */\n  searchCustomer(customerName) {\n    return this.#fetchAdvanced(this.#searchCustomerURL(customerName)).then((responseJSON) => {\n      let customerBOs = CustomerBO.fromJSON(responseJSON);\n      // console.info(customerBOs);\n      return new Promise(function (resolve) {\n        resolve(customerBOs);\n      })\n    })\n  }\n\n\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be retrieved\n   * @public\n   */\n  getAllAccounts() {\n    return this.#fetchAdvanced(this.#getAllAccountsURL())\n      .then((responseJSON) => {\n        let accountBOs = AccountBO.fromJSON(responseJSON);\n        // console.info(accountBOs);\n        return new Promise(function (resolve) {\n          resolve(accountBOs);\n        })\n      })\n  }\n\n\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be retrieved\n   * @public\n   */\n  getAccountsForCustomer(customerID) {\n    return this.#fetchAdvanced(this.#getAccountsForCustomerURL(customerID))\n      .then((responseJSON) => {\n        let accountBOs = AccountBO.fromJSON(responseJSON);\n        // console.info(accountBOs);\n        return new Promise(function (resolve) {\n          resolve(accountBOs);\n        })\n      })\n  }\n\n  /**\n   * Deletes the given account and returns a Promise, which resolves to an AccountBO\n   * \n   * @param accountID to be deleted\n   * @public\n   */\n  deleteAccount(accountID) {\n    return this.#fetchAdvanced(this.#deleteAccountIdURL(accountID), {\n      method: 'DELETE'\n    })\n      .then((responseJSON) => {\n        // We always get an array of AccountBO.fromJSON, but only need one object\n        let accountBOs = AccountBO.fromJSON(responseJSON)[0];\n        // console.info(accountBOs);\n        return new Promise(function (resolve) {\n          resolve(accountBOs);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be added to\n   * @public\n   */\n  addAccountForCustomer(customerID) {\n    return this.#fetchAdvanced(this.#addAccountsForCustomerURL(customerID), {\n      method: 'POST'\n    })\n      .then((responseJSON) => {\n        // We always get an array of AccountBO.fromJSON, but only need one object\n        let accountBO = AccountBO.fromJSON(responseJSON)[0];\n        // console.info(accountBO);\n        return new Promise(function (resolve) {\n          // We expect only one new account\n          resolve(accountBO);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to a balance\n   * \n   * @param {Number} accountID for which the balance should be retrieved\n   * @public\n   */\n  getBalanceOfAccount(accountBO) {\n    return this.#fetchAdvanced(this.#getBalanceForAccountURL(accountBO))\n      .then(responseJSON => {\n        // console.log(responseJSON)\n        return new Promise(function (resolve) {\n          resolve(responseJSON);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of TransactionBOs\n   * \n   * @param {Number} accountID for which the credit transactions should be retrieved\n   * @public\n   */\n  getCreditsForAccount(accountID) {\n    return this.#fetchAdvanced(this.#getCreditsForAccountIdURL(accountID))\n      .then(responseJSON => {\n        let transactionBOs = TransactionBO.fromJSON(responseJSON);\n        // console.info(transactionBOs);\n        return new Promise(function (resolve) {\n          resolve(transactionBOs);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of TransactionBOs\n   * \n   * @param {Number} accountID for which the debit transactions should be retrieved\n   * @public\n   */\n  getDebitsForAccount(accountID) {\n    return this.#fetchAdvanced(this.#getDebitsForAccountIdURL(accountID))\n      .then(responseJSON => {\n        let transactionBOs = TransactionBO.fromJSON(responseJSON);\n        // console.info(transactionBOs);\n        return new Promise(function (resolve) {\n          resolve(transactionBOs);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to the new TransactionBO\n   * \n   * @param {TransactionBO} transaction object \n   * @public\n   */\n  addTransaction(transaction) {\n    return this.#fetchAdvanced(this.#addTransactionURL(), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain',\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(transaction)\n    }).then((responseJSON) => {\n      // We always get an array of TransactionBO.fromJSON, but only need one object\n      let tansactionBO = TransactionBO.fromJSON(responseJSON)[0];\n      // console.info(accountBO);\n      return new Promise(function (resolve) {\n        // We expect only one new account\n        resolve(tansactionBO);\n      })\n    })\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport AlertTitle from '@material-ui/lab/AlertTitle';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\n\n/**\n * Shows an in-line error message in a given component context,\n * if the error obejct is not null\n * \n * @See See Material-UIs [Alert](https://material-ui.com/api/alert/)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass ContextErrorMessage extends Component {\n  #standardText = 'This should not have happend. Soooo sorry...';\n\n  /** Renders the ContextErrorMessage if error object is not null  */\n  render() {\n    const { classes, error, contextErrorMsg, onReload } = this.props;\n\n    return (\n      (error !== null) ?\n        <Alert severity='error' className={classes.root}>\n          <div>\n            {this.#standardText}\n          </div>\n          <AlertTitle>\n            {contextErrorMsg}\n          </AlertTitle>\n          <div className={classes.margins}>\n            Error message (for debugging only) is:\n        </div>\n          <div>\n            {error.message}\n          </div>\n          {\n            onReload ?\n              <div className={classes.margins}>\n                <Button variant='contained' color='primary' startIcon={<AutorenewIcon />} onClick={onReload}>\n                  Reload\n            </Button>\n              </div>\n              : null\n          }\n        </Alert>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  margins: {\n    marginTop: theme.spacing(2)\n  }\n});\n\n/** PropTypes */ \nContextErrorMessage.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** \n   * The error object, which drives the error message \n   * If not null, the error message is shown \n   */\n  error: PropTypes.object,\n  /**  A contextual error message to be shown */\n  contextErrorMsg: PropTypes.string,\n  /** \n   * A reload handler for the onReload event, which occurs if the reload button is clicked. \n   * If given a reload button is shown \n   */\n  onReload: PropTypes.func\n}\n\nexport default withStyles(styles)(ContextErrorMessage);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, LinearProgress } from '@material-ui/core';\n\n/**\n * Shows a loading progress, if the show prop is true.\n * \n * @See See Materiel-UIs [Progress](https://material-ui.com/components/progress/)\n * @See See Materiel-UIs [LinearProgress](https://material-ui.com/api/linear-progress/)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass LoadingProgress extends Component {\n\n  /** Renders the component */\n  render() {\n    const { classes, show } = this.props;\n\n    return (\n      show ?\n        <div className={classes.root}>\n          <LinearProgress color='secondary' />\n        </div>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n  }\n});\n\n/** PropTypes */\nLoadingProgress.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** If true, the loading progress is rendered */\n  show: PropTypes.bool.isRequired,\n}\n\nexport default withStyles(styles)(LoadingProgress);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { BankAPI, CustomerBO } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n\n/**\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured \n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object. \n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer. \n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.  \n * When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerForm extends Component {\n\n  constructor(props) {\n    super(props);\n\n    let fn = '', ln = '';\n    if (props.customer) {\n      fn = props.customer.getFirstName();\n      ln = props.customer.getLastName();\n    }\n\n    // Init the state\n    this.state = {\n      firstName: fn,\n      firstNameValidationFailed: false,\n      firstNameEdited: false,\n      lastName: ln,\n      lastNameValidationFailed: false,\n      lastNameEdited: false,\n      addingInProgress: false,\n      updatingInProgress: false,\n      addingError: null,\n      updatingError: null\n    };\n    // save this state for canceling\n    this.baseState = this.state;\n  }\n\n  /** Adds the customer */\n  addCustomer = () => {\n    let newCustomer = new CustomerBO(this.state.firstName, this.state.lastName);\n    BankAPI.getAPI().addCustomer(newCustomer).then(customer => {\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n      this.setState(this.baseState);\n      this.props.onClose(customer); // call the parent with the customer object from backend\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator \n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n  /** Updates the customer */\n  updateCustomer = () => {\n    // clone the original cutomer, in case the backend call fails\n    let updatedCustomer = Object.assign(new CustomerBO(), this.props.customer);\n    // set the new attributes from our dialog\n    updatedCustomer.setFirstName(this.state.firstName);\n    updatedCustomer.setLastName(this.state.lastName);\n    BankAPI.getAPI().updateCustomer(updatedCustomer).then(customer => {\n      this.setState({\n        updatingInProgress: false,              // disable loading indicator  \n        updatingError: null                     // no error message\n      });\n      // keep the new state as base state\n      this.baseState.firstName = this.state.firstName;\n      this.baseState.lastName = this.state.lastName;\n      this.props.onClose(updatedCustomer);      // call the parent with the new customer\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,              // disable loading indicator \n        updatingError: e                        // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,                 // show loading indicator\n      updatingError: null                       // disable error message\n    });\n  }\n\n  /** Handles value changes of the forms textfields and validates them */\n  textFieldValueChange = (event) => {\n    const value = event.target.value;\n\n    let error = false;\n    if (value.trim().length === 0) {\n      error = true;\n    }\n\n    this.setState({\n      [event.target.id]: event.target.value,\n      [event.target.id + 'ValidationFailed']: error,\n      [event.target.id + 'Edited']: true\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // Reset the state\n    this.setState(this.baseState);\n    this.props.onClose(null);\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer, show } = this.props;\n    const { firstName, firstNameValidationFailed, firstNameEdited, lastName, lastNameValidationFailed, lastNameEdited, addingInProgress,\n      addingError, updatingInProgress, updatingError } = this.state;\n\n    let title = '';\n    let header = '';\n\n    if (customer) {\n      // customer defindet, so ist an edit dialog\n      title = 'Update a customer';\n      header = `Customer ID: ${customer.getID()}`;\n    } else {\n      title = 'Create a new customer';\n      header = 'Enter customer data';\n    }\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\n          <DialogTitle id='form-dialog-title'>{title}\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              {header}\n            </DialogContentText>\n            <form className={classes.root} noValidate autoComplete='off'>\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='firstName' label='First name:' value={firstName} \n                onChange={this.textFieldValueChange} error={firstNameValidationFailed} \n                helperText={firstNameValidationFailed ? 'The first name must contain at least one character' : ' '} />\n              <TextField type='text' required fullWidth margin='normal' id='lastName' label='Last name:' value={lastName}\n                onChange={this.textFieldValueChange} error={lastNameValidationFailed}\n                helperText={lastNameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n            </form>\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\n            {\n              // Show error message in dependency of customer prop\n              customer ?\n                <ContextErrorMessage error={updatingError} contextErrorMsg={`The customer ${customer.getID()} could not be updated.`} onReload={this.updateCustomer} />\n                :\n                <ContextErrorMessage error={addingError} contextErrorMsg={`The customer could not be added.`} onReload={this.addCustomer} />\n            }\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Cancel\n            </Button>\n            {\n              // If a customer is given, show an update button, else an add button\n              customer ?\n                <Button disabled={firstNameValidationFailed || lastNameValidationFailed} variant='contained' onClick={this.updateCustomer} color='primary'>\n                  Update\n              </Button>\n                : <Button disabled={firstNameValidationFailed || !firstNameEdited || lastNameValidationFailed || !lastNameEdited} variant='contained' onClick={this.addCustomer} color='primary'>\n                  Add\n             </Button>\n            }\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\n/** PropTypes */\nCustomerForm.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO to be edited */\n  customer: PropTypes.object,\n  /** If true, the form is rendered */\n  show: PropTypes.bool.isRequired,\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the edited or created CustomerBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(CustomerBO customer);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(CustomerForm);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { BankAPI } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n/**\n * Shows a modal delete/cancle dialog, which asks for deleting a customer. The CustomerBO to be deleted must be given in prop customer. \n * In dependency of the user interaction (delete/cancel) the respective backendcall is made. After that, the function of the onClose prop \n * is called with the deleted CustomerBO object as parameter. When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerDeleteDialog extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      deletingInProgress: false,\n      deletingError: null\n    };\n  }\n\n  /** Delete the customer */\n  deleteCustomer = () => {\n    BankAPI.getAPI().deleteCustomer(this.props.customer.getID()).then(customer => {\n      this.setState({\n        deletingInProgress: false,              // disable loading indicator  \n        deletingError: null                     // no error message\n      });\n      this.props.onClose(this.props.customer);  // call the parent with the deleted customer\n    }).catch(e =>\n      this.setState({\n        deletingInProgress: false,              // disable loading indicator \n        deletingError: e                        // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      deletingInProgress: true,                 // show loading indicator\n      deletingError: null                       // disable error message\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // console.log(event);\n    this.props.onClose(null);\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer, show } = this.props;\n    const { deletingInProgress, deletingError } = this.state;\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose}>\n          <DialogTitle id='delete-dialog-title'>Delete customer\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Really delete customer '{customer.getFirstName()} {customer.getLastName()}' (ID: {customer.getID()})?\n            </DialogContentText>\n            <LoadingProgress show={deletingInProgress} />\n            <ContextErrorMessage error={deletingError} contextErrorMsg={`The customer '${customer.getFirstName()} ${customer.getLastName()}' (ID: ${customer.getID()}) could not be deleted.`}\n              onReload={this.deleteCustomer} />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Cancel\n            </Button>\n            <Button variant='contained' onClick={this.deleteCustomer} color='primary'>\n              Delete\n            </Button> \n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n});\n\n/** PropTypes */\nCustomerDeleteDialog.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO to be deleted */\n  customer: PropTypes.object.isRequired,\n  /** If true, the dialog is rendered */\n  show: PropTypes.bool.isRequired,\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the deleted CustomerBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(CustomerBO customer);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(CustomerDeleteDialog);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogContent, DialogTitle, TextField, Typography, InputAdornment, MenuItem, DialogActions, Grid } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { BankAPI, TransactionBO } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n\n/**\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured \n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object. \n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer. \n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.  \n * When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass MoneyTransferDialog extends Component {\n\n  initialState = {\n    // TextField values\n    customerName: '',\n    transferAmount: '',\n    // search state is null\n    targetCustomers: [],\n    // The selected CustomerBO\n    selectedCustomer: null,\n    // Selected accountBO in the accounts array\n    selectedAccount: null,\n    // TextField validation errors\n    transferAmountValidationFailed: false,\n    transferAmountFieldEdited: false,\n    // Network states\n    loadingInProgress: false,\n    customerSearchError: null,\n    transactionError: null\n  };\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = this.initialState;\n  }\n\n  /** Searches for customers with a customerName and loads the corresponding accounts */\n  searchCustomer = async () => {\n    const { customerName } = this.state;\n    if (customerName.length > 0) {\n      try {\n        // set loading to true\n        this.setState({\n          targetCustomers: [],              // Set empty array\n          selectedCustomer: null,               // the initial customer\n          loadingInProgress: true,              // show loading indicator\n          customerSearchError: null             // disable error message\n        });\n\n        // Load customers first\n        const customers = await BankAPI.getAPI().searchCustomer(customerName);\n\n        // load accounts of each customers step by step and inject the acounts into the CustomerBO\n        for (const customer of customers) {\n          // Load account for each found customer\n          let accounts = await BankAPI.getAPI().getAccountsForCustomer(customer.getID());\n          // Call sucessfull \n          customer.accounts = accounts;\n        }\n\n        // Init the selections \n        let selectedCustomer = null;\n        let selectedAccount = null;\n\n        if (customers.length > 0) {\n          selectedCustomer = customers[0];\n        }\n\n        if (selectedCustomer.accounts.length > 0) {\n          selectedAccount = selectedCustomer.accounts[0];\n        }\n\n        // Set the final state\n        this.setState({\n          targetCustomers: customers,\n          selectedCustomer: selectedCustomer, // the initially selected customer\n          selectedAccount: selectedAccount,   // the initially selected account\n          loadingInProgress: false,           // disable loading indicator \n          customerSearchError: null           // no error message\n        });\n      } catch (e) {\n        this.setState({\n          targetCustomers: [],              // Set empty array\n          selectedCustomer: null,\n          loadingInProgress: false,           // disable loading indicator \n          customerSearchError: e              // show error message\n        });\n      }\n    } else {\n      this.setState({\n        customerNotFound: true\n      });\n    }\n  }\n\n  /** Executes the requested transfer transaction */\n  transferMoney = () => {\n    const { account } = this.props;\n    const { selectedAccount, transferAmount } = this.state;\n    let amount = transferAmount.replace(/,/g, '.');\n\n    const transaction = new TransactionBO(account.getID(), selectedAccount.getID(), amount);\n\n    BankAPI.getAPI().addTransaction(transaction).then(transaction => {\n      this.setState({\n        loadingInProgress: false,        // disable loading indicator \n        transactionError: null             // show error message\n      });\n      this.handleClose(transaction);\n    }).catch(e => {\n      this.setState({\n        loadingInProgress: false,        // disable loading indicator \n        transactionError: e              // show error message\n      });\n    });\n    this.setState({\n      loadingInProgress: true,        // disable loading indicator \n      transactionError: null          // show error message\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = (transaction) => {\n    // Reset the state\n    this.setState(this.initialState);\n    this.props.onClose(transaction);\n  }\n\n  /** Handles value changes of the forms textfields and validates the transferAmout field */\n  textFieldValueChange = (event) => {\n    const val = event.target.value;\n    // Validate the amount field\n    if (event.target.id === 'transferAmount') {\n      let result = false;\n      let amount = val.replace(/,/g, '.');\n      if (amount.length === 0) {\n        // length must not be 0\n        result = true;\n      }\n      if (isNaN(amount)) {\n        // Its not a numer in the text field\n        result = true;\n      }\n      this.setState({\n        transferAmountValidationFailed: result,\n        transferAmountFieldEdited: true\n      });\n    }\n    this.setState({\n      [event.target.id]: val\n    });\n  }\n\n  /** Handles value changes of the customer select textfield */\n  customerSelectionChange = (event) => {\n    let customer = event.target.value;\n    let selectedAccount = null;\n\n    if (customer.accounts.length > 0) {\n      selectedAccount = customer.accounts[0]\n    }\n\n    this.setState({\n      selectedCustomer: customer,\n      selectedAccount: selectedAccount,\n    });\n  }\n\n  /** Handles value changes of the customer select textfield */\n  accountSelectionChange = (event) => {\n    let selectedAccount = event.target.value;\n    this.setState({\n      selectedAccount: selectedAccount\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, show, customer, account } = this.props;\n    const { customerName, targetCustomers, selectedCustomer, customerNotFound, selectedAccount, loadingInProgress,\n      transferAmountValidationFailed, transferAmountFieldEdited, customerSearchError, transactionError } = this.state;\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose} maxWidth='md'>\n          <DialogTitle id='form-dialog-title'>Transfer money\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <Grid container spacing={1}>\n              <Grid item xs={6}>\n                <Typography variant='body1'>\n                  From customer: {customer.getLastName()}, {customer.getFirstName()}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant='body1'>\n                  Account: {account.getID()}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Typography variant='body1'>\n              <br/>\n              to customer:\n            </Typography>\n\n            <form noValidate autoComplete='off'>\n              {\n                // show a search text field if there are no searchedCustomer yet\n                (targetCustomers.length === 0) ?\n                  <TextField autoFocus fullWidth margin='normal' type='text' required id='customerName' label='Customer name:'\n                    onChange={this.textFieldValueChange}\n                    onBlur={this.searchCustomer}\n                    error={customerNotFound}\n                    helperText={customerNotFound ? 'No customers with the given name have been found' : ' '}\n                    InputProps={{\n                      endAdornment: <InputAdornment position='end'>\n                        <IconButton onClick={this.searchCustomer}>\n                          <SearchIcon />\n                        </IconButton>\n                      </InputAdornment>,\n                    }} />\n                  :\n                  // Show a selection of targetCustomers, if there are any. Provide no search button. \n                  <TextField select autoFocus fullWidth margin='normal' type='text' required id='customerName' label='Customer name:'\n                    value={selectedCustomer}\n                    onChange={this.customerSelectionChange}>\n                    {\n                      this.state.targetCustomers.map((customer) => (\n                        <MenuItem key={customer.getID()} value={customer}>\n                          {customer.getLastName()}, {customer.getFirstName()}\n                        </MenuItem>\n                      ))\n                    }\n                  </TextField>\n              }\n              {\n                // Render the account select field\n                selectedAccount ?\n                  <TextField select fullWidth margin='normal' type='text' required id='account' label='Target account:'\n                    value={selectedAccount}\n                    onChange={this.accountSelectionChange}>\n                    {\n                      selectedCustomer.accounts.map((account) => (\n                        <MenuItem key={account.getID()} value={account}>\n                          {account.getID()}\n                        </MenuItem>\n                      ))\n                    }\n                  </TextField>\n                  :\n                  <TextField select fullWidth margin='normal' type='text' required id='account' label='Target account:'\n                    value={0}\n                    onChange={this.accountSelectionChange}>\n                    <MenuItem value={0}>\n                      No accounts found\n                  </MenuItem>\n                  </TextField>\n              }\n\n              <TextField fullWidth margin='normal' type='text' required id='transferAmount' label='Amount:'\n                onChange={this.textFieldValueChange}\n                error={transferAmountValidationFailed}\n                helperText={transferAmountValidationFailed ? 'The amount must be a number' : ' '}\n                InputProps={{\n                  startAdornment: <InputAdornment position='start'>{BankAPI.getAPI().getCurrency()}\n                  </InputAdornment>,\n                }}\n              />\n            </form>\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={customerSearchError} contextErrorMsg={`Customer ${customerName} could not be searched.`} onReload={this.searchCustomer} />\n            <ContextErrorMessage error={transactionError} contextErrorMsg={`Transaction could not be executed.`} onReload={this.transferMoney} />\n\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Cancel\n            </Button>\n            <Button disabled={!selectedCustomer || !selectedAccount || !transferAmountFieldEdited || transferAmountValidationFailed} variant='contained' color='primary' onClick={this.transferMoney}>\n              Transfer\n            </Button>\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n});\n\n/** PropTypes */\nMoneyTransferDialog.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO for whom to transfer */\n  customer: PropTypes.object.isRequired,\n  /** The AccountBO from which to transfer */\n  account: PropTypes.object.isRequired,\n  /** If true, the form is rendered */\n  show: PropTypes.bool.isRequired,\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the performed TransactionBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(TransactionBO transaction);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(MoneyTransferDialog);\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, ListItem, ListItemSecondaryAction, Link, Typography } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SwapHoriz from '@material-ui/icons/SwapHoriz';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport MoneyTransferDialog from './dialogs/MoneyTransferDialog';\n\n\n/**\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it. Links accounts \n * to a list of transactions. This is done by routing the link to /transactions and passing the CustomerBO and\n * the AccountBO as props to the AccountList component. It also shows a MoneyTransferDialog to transfer money.\n * \n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\n * @see See Material-UIs [Link](https://material-ui.com/components/links/)\n * @see See Material-UIs React Router integration [Composition](https://material-ui.com/guides/composition/#link)\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\n * \n * @see See [MoneyTransferDialog](#moneytransferdialog)\n * @see See [TransactionList](#transactionlist)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass AccountListEntry extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init an empty state\n    this.state = {\n      balance: '',\n      loadingInProgress: false,\n      deletingInProgress: false,\n      loadingError: null,\n      deletingError: null,\n      showMoneyTransferDialog: false,\n    };\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    // load initial balance\n    this.getBalance();\n  }\n\n  /** Lifecycle method, which is called when the component was updated */\n  componentDidUpdate(prevProps) {\n    if ((this.props.show) && (this.props.show !== prevProps.show)) {\n      this.getBalance();\n    }\n  }\n\n  /** gets the balance for this account */\n  getBalance = () => {\n    BankAPI.getAPI().getBalanceOfAccount(this.props.account.getID()).then(balance =>\n      this.setState({\n        balance: balance,\n        loadingInProgress: false, // loading indicator \n        loadingError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          balance: null,\n          loadingInProgress: false,\n          loadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      balance: 'loading',\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  /** Deletes this account */\n  deleteAccount = () => {\n    const { account } = this.props;\n    BankAPI.getAPI().deleteAccount(account.getID()).then(() => {\n      this.setState({  // Set new state when AccountBOs have been fetched\n        deletingInProgress: false, // loading indicator \n        deletingError: null\n      })\n      // console.log(account);\n      this.props.onAccountDeleted(account);\n    }).catch(e =>\n      this.setState({ // Reset state with error from catch \n        deletingInProgress: false,\n        deletingError: e\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      deletingInProgress: true,\n      deletingError: null\n    });\n  }\n\n  /** Handles click events from the transfer money button */\n  transferMoney = () => {\n    this.setState({\n      showMoneyTransferDialog: true\n    });\n  }\n\n  /** Handles the onClose event from the transfer money dialog */\n  moneyTransferDialogClosed = (transaction) => {\n    this.setState({\n      showMoneyTransferDialog: false\n    });\n    if (transaction) {\n      // Transaction is not null and therefore was performed\n      this.getBalance();\n    }\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer, account } = this.props;\n    const { loadingInProgress, deletingInProgress, loadingError, deletingError, balance, showMoneyTransferDialog } = this.state;\n\n    return (\n      <div>\n        <ListItem>\n          <Typography className={classes.accountEntry}>\n            <Link component={RouterLink} to={{\n              pathname: '/transactions',\n              owner: {\n                customer: customer,\n                account: account\n              }\n            }} >\n              Account ID: {account.getID()}\n            </Link>\n\n          </Typography>\n          <Typography color='textSecondary'>\n            Balance: {!isNaN(balance) ? BankAPI.getAPI().getCurrencyFormatter().format(balance) : balance}\n          </Typography>\n          <ListItemSecondaryAction>\n            <Button className={classes.buttonMargin} variant='outlined' color='primary' size='small' startIcon={<SwapHoriz />} onClick={this.transferMoney}>\n              Transfer\n            </Button>\n            <Button color='secondary' size='small' startIcon={<DeleteIcon />} onClick={this.deleteAccount}>\n              Delete\n            </Button>\n          </ListItemSecondaryAction>\n        </ListItem>\n        <ListItem>\n          <LoadingProgress show={loadingInProgress || deletingInProgress} />\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The balance of account ${account.getID()} could not be loaded.`} onReload={this.getBalance} />\n          <ContextErrorMessage error={deletingError} contextErrorMsg={`The account ${account.getID()} could not be deleted.`} onReload={this.deleteAccount} />\n        </ListItem>\n        <MoneyTransferDialog show={showMoneyTransferDialog} customer={customer} account={account} onClose={this.moneyTransferDialogClosed} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  }, \n  buttonMargin: {\n    marginRight: theme.spacing(2),\n  },\n  accountEntry: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  }\n});\n\n/** PropTypes */\nAccountListEntry.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO of this AccountListEntry */\n  customer: PropTypes.object.isRequired,\n  /** The AccountBO to be rendered */\n  account: PropTypes.object.isRequired,\n  /**  \n   * Event Handler function which is called after a sucessfull delete of this account. \n   * \n   * Signature: onAccountDeleted(AccountBO account); \n   */\n  onAccountDeleted: PropTypes.func.isRequired,\n  /** If true, balance is (re)loaded */\n  show: PropTypes.bool.isRequired\n}\n\nexport default withStyles(styles)(AccountListEntry);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, ListItem } from '@material-ui/core';\nimport { Button, List } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport AccountListEntry from './AccountListEntry';\n\n/**\n * Renders a list of AccountListEntry objects.\n * \n * @see See [AccountListEntry](#accountlistentry)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass AccountList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      accounts: [],\n      loadingInProgress: false,\n      loadingAccountError: null,\n      addingAccountError: null,\n    };\n  }\n\n  /** Fetches AccountBOs for the current customer */\n  getAccounts = () => {\n    BankAPI.getAPI().getAccountsForCustomer(this.props.customer.getID()).then(accountBOs =>\n      this.setState({  // Set new state when AccountBOs have been fetched\n        accounts: accountBOs,\n        loadingInProgress: false, // loading indicator \n        loadingAccountError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          accounts: [],\n          loadingInProgress: false,\n          loadingAccountError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingAccountError: null\n    });\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.getAccounts();\n  }\n\n  /** Lifecycle method, which is called when the component was updated */\n  componentDidUpdate(prevProps) {\n    // reload accounts if shown state changed. Occures if the CustomerListEntrys ExpansionPanel was expanded\n    // if ((this.props.show !== prevProps.show)) {\n    //   this.getAccounts();\n    // }\n  }\n\n  /** Adds an account for the current customer */\n  addAccount = () => {\n    BankAPI.getAPI().addAccountForCustomer(this.props.customer.getID()).then(accountBO => {\n      // console.log(accountBO)\n      this.setState({  // Set new state when AccountBOs have been fetched\n        accounts: [...this.state.accounts, accountBO],\n        loadingInProgress: false, // loading indicator \n        addingAccountError: null\n      })\n    }).catch(e =>\n      this.setState({ // Reset state with error from catch \n        accounts: [],\n        loadingInProgress: false,\n        addingAccountError: e\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      addingAccountError: null\n    });\n  }\n\n  /** Handles onAccountDelete events from an AccountListEntry  */\n  deleteAccountHandler = (deletedAccount) => {\n    // console.log(deletedAccount.getID());\n    this.setState({\n      accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\n    })\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer } = this.props;\n    // Use the states customer\n    const { accounts, loadingInProgress, loadingAccountError, addingAccountError } = this.state;\n\n    // console.log(this.props);\n    return (\n      <div className={classes.root}>\n        <List className={classes.accountList}>\n          {\n            accounts.map(account => <AccountListEntry key={account.getID()} customer={customer} account={account} onAccountDeleted={this.deleteAccountHandler}\n              show={this.props.show} />)\n          }\n          <ListItem>\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={loadingAccountError} contextErrorMsg={`List of accounts for customer ${customer.getID()} could not be loaded.`} onReload={this.getAccounts} />\n            <ContextErrorMessage error={addingAccountError} contextErrorMsg={`Account for customer ${customer.getID()} could not be added.`} onReload={this.addAccount} />\n          </ListItem>\n        </List>\n        <Button className={classes.addAccountButton} variant='contained' color='primary' startIcon={<AddIcon />} onClick={this.addAccount}>\n          Add Account\n        </Button>\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  accountList: {\n    marginBottom: theme.spacing(2),\n  },\n  addAccountButton: {\n    position: 'absolute',\n    right: theme.spacing(3),\n    bottom: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nAccountList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO of this AccountList */\n  customer: PropTypes.object.isRequired,\n  /** If true, accounts are (re)loaded */\n  show: PropTypes.bool.isRequired\n}\n\nexport default withStyles(styles)(AccountList);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CustomerForm from './dialogs/CustomerForm';\nimport CustomerDeleteDialog from './dialogs/CustomerDeleteDialog';\nimport AccountList from './AccountList';\n\n\n/**\n * Renders a CustomerBO object within a expandable/collapsible CustomerListEntry with the customer manipulation\n * functions. If expanded, it renders a AccountList.\n * \n * @see See [AccountList](#accountlist)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerListEntry extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      customer: props.customer,\n      showCustomerForm: false,\n      showCustomerDeleteDialog: false,\n    };\n  }\n\n  /** Handles onChange events of the underlying ExpansionPanel */\n  expansionPanelStateChanged = () => {\n    this.props.onExpandedStateChange(this.props.customer);\n  }\n\n  /** Handles onAccountDelete events from an AccountListEntry  */\n  deleteAccountHandler = (deletedAccount) => {\n    // console.log(deletedAccount.getID());\n    this.setState({\n      accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\n    })\n  }\n\n  /** Handles the onClick event of the edit customer button */\n  editCustomerButtonClicked = (event) => {\n    event.stopPropagation();\n    this.setState({\n      showCustomerForm: true\n    });\n  }\n\n  /** Handles the onClose event of the CustomerForm */\n  customerFormClosed = (customer) => {\n    // customer is not null and therefor changed\n    if (customer) {\n      this.setState({\n        customer: customer,\n        showCustomerForm: false\n      });\n    } else {\n      this.setState({\n        showCustomerForm: false\n      });\n    }\n  }\n\n  /** Handles the onClick event of the delete customer button */\n  deleteCustomerButtonClicked = (event) => {\n    event.stopPropagation();\n    this.setState({\n      showCustomerDeleteDialog: true\n    });\n  }\n\n  /** Handles the onClose event of the CustomerDeleteDialog */\n  deleteCustomerDialogClosed = (customer) => {\n    // if customer is not null, delete it\n    if (customer) {\n      this.props.onCustomerDeleted(customer);\n    };\n\n    // Don´t show the dialog\n    this.setState({\n      showCustomerDeleteDialog: false\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, expandedState } = this.props;\n    // Use the states customer\n    const { customer, showCustomerForm, showCustomerDeleteDialog } = this.state;\n\n    // console.log(this.state);\n    return (\n      <div>\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            id={`customer${customer.getID()}accountpanel-header`}\n          >\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\n              <Grid item>\n                <Typography variant='body1' className={classes.heading}>{customer.getLastName()}, {customer.getFirstName()}\n                </Typography>\n              </Grid>\n              <Grid item>\n                <ButtonGroup variant='text' size='small'>\n                  <Button color='primary' onClick={this.editCustomerButtonClicked}>\n                    edit\n                  </Button>\n                  <Button color='secondary' onClick={this.deleteCustomerButtonClicked}>\n                    delete\n                  </Button>\n                </ButtonGroup>\n              </Grid>\n              <Grid item xs />\n              <Grid item>\n                <Typography variant='body2' color={'textSecondary'}>List of accounts</Typography>\n              </Grid>\n            </Grid>\n          </AccordionSummary>\n          <AccordionDetails>\n            <AccountList show={expandedState} customer={customer} />\n          </AccordionDetails>\n        </Accordion>\n        <CustomerForm show={showCustomerForm} customer={customer} onClose={this.customerFormClosed} />\n        <CustomerDeleteDialog show={showCustomerDeleteDialog} customer={customer} onClose={this.deleteCustomerDialogClosed} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  }\n});\n\n/** PropTypes */\nCustomerListEntry.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO to be rendered */\n  customer: PropTypes.object.isRequired,\n  /** The state of this CustomerListEntry. If true the customer is shown with its accounts */\n  expandedState: PropTypes.bool.isRequired,\n  /** The handler responsible for handle expanded state changes (exanding/collapsing) of this CustomerListEntry \n   * \n   * Signature: onExpandedStateChange(CustomerBO customer)\n   */\n  onExpandedStateChange: PropTypes.func.isRequired,\n  /** \n   *  Event Handler function which is called after a sucessfull delete of this customer.\n   * \n   * Signature: onCustomerDelete(CustomerBO customer)\n   */\n  onCustomerDeleted: PropTypes.func.isRequired\n}\n\nexport default withStyles(styles)(CustomerListEntry);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear'\nimport { withRouter } from 'react-router-dom';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport CustomerForm from './dialogs/CustomerForm';\nimport CustomerListEntry from './CustomerListEntry';\n\n/**\n * Controlls a list of CustomerListEntrys to create a accordion for each customer.  \n * \n * @see See [CustomerListEntry](#customerlistentry)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // console.log(props);\n    let expandedID = null;\n\n    if (this.props.location.expandCustomer) {\n      expandedID = this.props.location.expandCustomer.getID();\n    }\n\n    // Init an empty state\n    this.state = {\n      customers: [],\n      filteredCustomers: [],\n      customerFilter: '',\n      error: null,\n      loadingInProgress: false,\n      expandedCustomerID: expandedID,\n      showCustomerForm: false\n    };\n  }\n\n  /** Fetches all CustomerBOs from the backend */\n  getCustomers = () => {\n    BankAPI.getAPI().getCustomers()\n      .then(customerBOs =>\n        this.setState({               // Set new state when CustomerBOs have been fetched\n          customers: customerBOs,\n          filteredCustomers: [...customerBOs], // store a copy\n          loadingInProgress: false,   // disable loading indicator \n          error: null\n        })).catch(e =>\n          this.setState({             // Reset state with error from catch \n            customers: [],\n            loadingInProgress: false, // disable loading indicator \n            error: e\n          })\n        );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      error: null\n    });\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.getCustomers();\n  }\n\n  /** \n   * Handles onExpandedStateChange events from the CustomerListEntry component. Toggels the expanded state of \n   * the CustomerListEntry of the given CustomerBO.\n   * \n   * @param {customer} CustomerBO of the CustomerListEntry to be toggeled\n   */\n  onExpandedStateChange = customer => {\n    // console.log(customerID);\n    // Set expandend customer entry to null by default\n    let newID = null;\n\n    // If same customer entry is clicked, collapse it else expand a new one\n    if (customer.getID() !== this.state.expandedCustomerID) {\n      // Expand the customer entry with customerID\n      newID = customer.getID();\n    }\n    // console.log(newID);\n    this.setState({\n      expandedCustomerID: newID,\n    });\n  }\n\n  /** \n   * Handles onCustomerDeleted events from the CustomerListEntry component\n   * \n   * @param {customer} CustomerBO of the CustomerListEntry to be deleted\n   */\n  customerDeleted = customer => {\n    const newCustomrList = this.state.customers.filter(customerFromState => customerFromState.getID() !== customer.getID());\n    this.setState({\n      customers: newCustomrList,\n      filteredCustomers: [...newCustomrList],\n      showCustomerForm: false\n    });\n  }\n\n  /** Handles the onClick event of the add customer button */\n  addCustomerButtonClicked = event => {\n    // Do not toggle the expanded state\n    event.stopPropagation();\n    //Show the CustmerForm\n    this.setState({\n      showCustomerForm: true\n    });\n  }\n\n  /** Handles the onClose event of the CustomerForm */\n  customerFormClosed = customer => {\n    // customer is not null and therefore created\n    if (customer) {\n      const newCustomrList = [...this.state.customers, customer];\n      this.setState({\n        customers: newCustomrList,\n        filteredCustomers: [...newCustomrList],\n        showCustomerForm: false\n      });\n    } else {\n      this.setState({\n        showCustomerForm: false\n      });\n    }\n  }\n\n  /** Handels onChange events of the customer filter text field */\n  filterFieldValueChange = event => {\n    const value = event.target.value.toLowerCase();\n    this.setState({\n      filteredCustomers: this.state.customers.filter(customer => {\n        let firstNameContainsValue = customer.getFirstName().toLowerCase().includes(value);\n        let lastNameContainsValue = customer.getLastName().toLowerCase().includes(value);\n        return firstNameContainsValue || lastNameContainsValue;\n      }),\n      customerFilter: value\n    });\n  }\n\n  /** Handles the onClose event of the clear filter button */\n  clearFilterFieldButtonClicked = () => {\n    // Reset the filter\n    this.setState({\n      filteredCustomers: [...this.state.customers],\n      customerFilter: ''\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    const { filteredCustomers, customerFilter, expandedCustomerID, loadingInProgress, error, showCustomerForm } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <Grid className={classes.customerFilter} container spacing={1} justify='flex-start' alignItems='center'>\n          <Grid item>\n            <Typography>\n              Filter customer list by name:\n              </Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              autoFocus\n              fullWidth\n              id='customerFilter'\n              type='text'\n              value={customerFilter}\n              onChange={this.filterFieldValueChange}\n              InputProps={{\n                endAdornment: <InputAdornment position='end'>\n                  <IconButton onClick={this.clearFilterFieldButtonClicked}>\n                    <ClearIcon />\n                  </IconButton>\n                </InputAdornment>,\n              }}\n            />\n          </Grid>\n          <Grid item xs />\n          <Grid item>\n            <Button variant='contained' color='primary' startIcon={<AddIcon />} onClick={this.addCustomerButtonClicked}>\n              Add Customer\n          </Button>\n          </Grid>\n        </Grid>\n        { \n          // Show the list of CustomerListEntry components\n          // Do not use strict comparison, since expandedCustomerID maybe a string if given from the URL parameters\n          filteredCustomers.map(customer =>\n            <CustomerListEntry key={customer.getID()} customer={customer} expandedState={expandedCustomerID === customer.getID()}\n              onExpandedStateChange={this.onExpandedStateChange}\n              onCustomerDeleted={this.customerDeleted}\n            />)\n        }\n        <LoadingProgress show={loadingInProgress} />\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of customers could not be loaded.`} onReload={this.getCustomers} />\n        <CustomerForm show={showCustomerForm} onClose={this.customerFormClosed} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  customerFilter: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nCustomerList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(CustomerList));","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { withRouter, Redirect } from 'react-router';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\n/**\n * Querys lists of credit and debit TransactionBOs for an account of a customer from the backend.\n * The customers CustomerBO and AccountBO is recieved in the this.props.location.owner object as passed\n * by the AccountListEntry component through the React Router Link. \n * \n * @see See [AccountListEntry](#accountlistentry)\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass TransactionList extends Component {\n\n  #myAccount = null;\n\n  constructor(props) {\n    super(props);\n\n    // Store the underlying AccountBO given from the calling link of the RouterLink of React Router\n    this.#myAccount = this.props.location.owner.account;\n\n    // Init an empty state\n    this.state = {\n      transactions: [],\n      transactionsLoadingInProgress: false,\n      creditsLoadingError: null,\n      debitsLoadingError: null,\n    };\n  }\n\n \n  /**\n   * Returns the underlying AccountBO given from the calling link of the RouterLink of React Router\n   */\n  getAccount() {\n    return this.#myAccount;\n  }\n\n  /**\n   * Compares two TransactioBOs to sort them by their id field. Sorts the lowest id first. \n   * The ID is used as replacement a timestamp.\n   * \n   * Returns -1 if a < b\n   * Returns 1 if a > b\n   * Returns 0 if a = b\n   * \n   * @param {TransactionBO} transactionA \n   * @param {TransactionBO} transactionB \n   */\n  transactionComparator(transactionA, transactionB) {\n    let result = 0;\n\n    if (transactionA.getID() < transactionB.getID()) {\n      result = -1;\n    }\n    if (transactionA.getID() > transactionB.getID()) {\n      result = 1;\n    }\n\n    return result;\n  }\n\n  /** \n   * Fetches credit and debit TransactionBOs from the backend. The two operations are chained. \n   * Credit and debit transactions are marked with the transaction type and then concatinated into one array \n   * of transactions. This array is then sorted with the transactionComparator function. \n   */\n  getTransactions = () => {\n    const { account } = this.props.location.owner;\n\n    BankAPI.getAPI().getCreditsForAccount(account.getID())\n      .then(creditTransactionBOs => {\n        BankAPI.getAPI().getDebitsForAccount(account.getID()).then(debitTransactionBOs => {\n          let transactions = creditTransactionBOs.concat(debitTransactionBOs);\n\n          // Sorts the transactions by ascending ID, since the ID can serve as a timestamp. \n          // A higher ID indicates a newer transaction.\n          transactions.sort(this.transactionComparator);\n\n          // set final state\n          this.setState({\n            transactions: transactions,\n            transactionsLoadingInProgress: false,\n            debitsLoadingError: null\n          })\n        }).catch(e => this.setState({\n          transactions: [],\n          debitsLoadingError: e,\n          transactionsLoadingInProgress: false,\n        }));\n\n        // set inter state\n        this.setState({\n          creditsLoadingError: null,\n        })\n      }).catch(e =>\n        this.setState({\n          transactions: [],\n          transactionsLoadingInProgress: false,\n          creditsLoadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      transactionsLoadingInProgress: true,\n      creditsLoadingError: null,\n      debitsLoadingError: null\n    });\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    // load only if the owner object is given\n    if (this.props.location.owner) {\n      this.getTransactions();\n    }\n  }\n\n  /** Render a single row in the transaction table */\n  renderTransactionRow(transaction, balance) {\n    // For accessibility, the first column is set to be a <th> element, with a scope of 'row'. \n    // This enables screen readers to identify a cell's value by it's row and column name.\n\n    let currencyFormatter = BankAPI.getAPI().getCurrencyFormatter();\n\n    return (\n      <TableRow key={transaction.getID()}>\n        <TableCell align='center' component='th' scope='row'>\n          {transaction.getID()}\n        </TableCell>\n        <TableCell align='center'>{transaction.getSourceAccount()}</TableCell>\n        <TableCell align='center'>{transaction.getTargetAccount()}</TableCell>\n\n        {\n          // Its a credit if this account is the target of the transaction\n          this.getAccount().getID() === transaction.getTargetAccount() ?\n            <React.Fragment>\n              <TableCell align='right'>{currencyFormatter.format(transaction.getAmount())}</TableCell>\n              <TableCell align='right'>{}</TableCell>\n            </React.Fragment>\n            :\n            <React.Fragment>\n              <TableCell align='left'>{}</TableCell>\n              <TableCell align='left'>{currencyFormatter.format(transaction.getAmount())}</TableCell>\n            </React.Fragment>\n        }\n        <TableCell align='center'>{currencyFormatter.format(balance)}</TableCell>\n      </TableRow>\n    );\n  }\n\n  /** Render the body of the table with all transactions */\n  renderTransactions() {\n    let balance = 0;\n\n    return this.state.transactions.map(transaction => {\n      if (this.getAccount().getID() === transaction.getTargetAccount()) {\n        // Its a credit, since this account is the target of the transaction\n        balance += transaction.getAmount();\n      } else {\n        balance -= transaction.getAmount();\n      }\n      return this.renderTransactionRow(transaction, balance);\n    });\n  }\n\n  /** Render the transaction table  */\n  renderTransactionTable() {\n    const { transactionsLoadingInProgress, creditsLoadingError, debitsLoadingError } = this.state;\n\n    if (!transactionsLoadingInProgress && !creditsLoadingError && !debitsLoadingError) {\n      return (\n        <TableContainer component={Paper}>\n          <Typography className={this.props.classes.tableHeader}>\n            List of transactions:\n          </Typography>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell align='center'>ID</TableCell>\n                <TableCell align='center'>Source account</TableCell>\n                <TableCell align='center'>Target account</TableCell>\n                <TableCell align='right'>Credit</TableCell>\n                <TableCell align='left'>Debit</TableCell>\n                <TableCell align='center'>Balance</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.renderTransactions()}\n            </TableBody>\n          </Table>\n        </TableContainer>);\n    }\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    let owner = null;\n    if (this.props.location.owner) {\n      // owner object exists\n      owner = this.props.location.owner\n    } else {\n      // owner object does not exist, we are called directly by route URL \n      // or the page has been refreshed -> put the user back to start page\n      return (<Redirect to='/' />);\n    }\n\n    const { customer, account } = owner;\n    const { transactionsLoadingInProgress, creditsLoadingError, debitsLoadingError } = this.state;\n\n    return (\n      <div>\n        <Typography component='div' className={classes.subNav}>\n          <Link component={RouterLink} to={{\n            pathname: '/customers',\n            expandCustomer: customer\n          }}>\n            <Grid container spacing={1} justify='flex-start' alignItems='stretch'>\n              <Grid item>\n                <ArrowBackIcon />\n              </Grid>\n              <Grid item>\n                Back to customer list\n              </Grid>\n            </Grid>\n          </Link>\n        </Typography>\n\n        <Paper className={classes.root}>\n          <Typography variant='h6'>\n            Account\n          </Typography>\n          <Typography className={classes.accountEntry}>\n            ID: {account.getID()}\n          </Typography>\n          <Typography>\n            Customer: {customer.getLastName()}, {customer.getFirstName()}\n          </Typography>\n        </Paper>\n\n        {this.renderTransactionTable()}\n\n        <LoadingProgress show={transactionsLoadingInProgress} />\n        <ContextErrorMessage error={creditsLoadingError} contextErrorMsg={`The credits of account ${this.accountID} could not be loaded.`} onReload={this.getTransactions} />\n        <ContextErrorMessage error={debitsLoadingError} contextErrorMsg={`The debits of account ${this.accountID} could not be loaded.`} onReload={this.getTransactions} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    padding: theme.spacing(1),\n  },\n  subNav: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  tableHeader: {\n    marginLeft: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  }\n});\n\n/** PropTypes */\nTransactionList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  match: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(TransactionList));","import React from 'react'\nimport { makeStyles, Paper, Typography, Link } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1)\n  },\n  content: {\n    margin: theme.spacing(1),\n  }\n}));\n\n/**\n * Shows the about page with the impressum\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nfunction About() {\n\n  const classes = useStyles();\n\n  return (\n    <Paper elevation={0} className={classes.root}>\n      <div className={classes.content}>\n        <Typography variant='h6'>\n          Python Bank Administration Example Project\n        </Typography>\n        <br />\n        <Typography>\n          React Frontend written by <Link href='https://github.com/christophkunz'>Christoph Kunz</Link>\n        </Typography>\n        <Typography>\n          Python Backend written by <Link href='https://github.com/PeterThies'>Peter Thies</Link>\n        </Typography>\n        <br />\n        <Typography variant='body2'>\n          © Hochschule der Medien 2020, all rights reserved.\n        </Typography>\n      </div>\n    </Paper>\n  )\n}\n\nexport default About;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, Paper } from '@material-ui/core';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\n/**\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it.\n * \n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass AccountDetail extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init state\n    this.state = {\n      customer: null,\n      loadingInProgress: false,\n      loadingError: null,\n    };\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.getCustomer();\n  }\n\n  /** gets the balance for this account */\n  getCustomer = () => {\n    BankAPI.getAPI().getCustomer(this.props.customerID).then(customer =>\n      this.setState({\n        customer: customer,\n        loadingInProgress: false,\n        loadingError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          customer: null,\n          loadingInProgress: false,\n          loadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customerID, accountID } = this.props;\n    const { customer, loadingInProgress, loadingError } = this.state;\n\n    return (\n      <Paper variant='outlined' className={classes.root}>\n\n        <Typography variant='h6'>\n          Account\n        </Typography>\n        <Typography className={classes.accountEntry}>\n          ID: {accountID}\n        </Typography>\n        {\n          customer ?\n            <Typography>\n              Customer: {customer.getLastName()}, {customer.getFirstName()}\n            </Typography>\n            : null\n        }\n        <LoadingProgress show={loadingInProgress} />\n        <ContextErrorMessage error={loadingError} contextErrorMsg={`The data of customer id ${customerID} could not be loaded.`} onReload={this.getCustomer} />\n      </Paper>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(1)\n  },\n  accountEntry: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  }\n});\n\n/** PropTypes */\nAccountDetail.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The customerID to be rendered */\n  customerID: PropTypes.string.isRequired,\n  /** The accountID to be rendered */\n  accountID: PropTypes.string.isRequired,\n}\n\nexport default withStyles(styles)(AccountDetail);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport AccountDetail from './AccountDetail';\n\n/**\n * Shows all accounts of the bank.\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass AllAccountList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init an empty state\n    this.state = {\n      accounts: [],\n      loadingInProgress: false,\n      loadingError: null,\n    };\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.loadAccounts();\n  }\n\n  /** gets the account list for this account */\n  loadAccounts = () => {\n    BankAPI.getAPI().getAllAccounts().then(accounts =>\n      this.setState({\n        accounts: accounts,\n        loadingInProgress: false, // loading indicator \n        loadingError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          loadingInProgress: false,\n          loadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    const { accounts, loadingInProgress, loadingError } = this.state;\n\n    return (\n      <div className={classes.root}>\n          {\n            accounts.map(account => <AccountDetail key={account.getID()} \n            customerID={account.getOwner().toString()} accountID={account.getID().toString()} />)\n          }\n          <LoadingProgress show={loadingInProgress} />\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The list of all accounts of the bank could not be loaded.`} onReload={this.loadAccounts} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  }\n});\n\n/** PropTypes */\nAllAccountList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(AllAccountList);\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { colors } from '@material-ui/core';\n\nconst white = '#FFFFFF';\nconst black = '#000000';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    black,\n    white,\n    primary: {\n      contrastText: white,\n      dark: colors.indigo[900],\n      main: colors.indigo[500],\n      light: colors.indigo[100]\n    },\n    secondary: {\n      contrastText: white,\n      dark: colors.blue[900],\n      main: colors.blue['A400'],\n      light: colors.blue['A400']\n    },\n    success: {\n      contrastText: white,\n      dark: colors.green[900],\n      main: colors.green[600],\n      light: colors.green[400]\n    },\n    info: {\n      contrastText: white,\n      dark: colors.blue[900],\n      main: colors.blue[600],\n      light: colors.blue[400]\n    },\n    warning: {\n      contrastText: white,\n      dark: colors.orange[900],\n      main: colors.orange[600],\n      light: colors.orange[400]\n    },\n    error: {\n      contrastText: white,\n      dark: colors.red[900],\n      main: colors.red[600],\n      light: colors.red[400]\n    },\n    text: {\n      primary: colors.blueGrey[800],\n      secondary: colors.blueGrey[600],\n      link: colors.blue[600]\n    },\n    background: {\n      default: '#F4F6F8',\n      paper: white\n    },\n    icon: colors.blueGrey[600],\n    divider: colors.grey[200]\n  }, \n});\n\n\n// A custom theme for this app\n// const theme = createMuiTheme({\n//   palette: {\n//     primary: {\n//       main: '#556cd6',\n//     },\n//     secondary: {\n//       main: '#19857b',\n//     },\n//     error: {\n//       main: red.A400,\n//     },\n//     background: {\n//       default: '#fff',\n//     },\n//   },\n// });\n\n\nexport default theme;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Grid, Typography, withStyles } from '@material-ui/core';\n\n/** \n * Renders a landing page for users who are not signed in. Provides a sign in button \n * for using an existing google account to sign in. The component uses firebase to \n * do redirect based signin process.\n * \n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\n * \n */\nclass SignIn extends Component {\n\n\n\t/** \n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\n\t */\n\thandleSignInButtonClicked = () => {\n\t\tthis.props.onSignIn();\n\t}\n\n\t/** Renders the sign in page, if user objext is null */\n\trender() {\n\t\tconst { classes } = this.props;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Typography className={classes.root} align='center' variant='h6'>Welcome to the HdM React/Python Project Showcase</Typography>\n\t\t\t\t<Typography className={classes.root} align='center'>It appears, that you are not signed in.</Typography>\n\t\t\t\t<Typography className={classes.root} align='center'>To use the services of the HdM Bank please</Typography>\n\t\t\t\t<Grid container justify='center'>\n\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t<Button variant='contained' color='primary' onClick={this.handleSignInButtonClicked}>\n\t\t\t\t\t\t\tSign in with Google\n      \t\t\t</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n\t\tmargin: theme.spacing(2)\n\t}\n});\n\n/** PropTypes */\nSignIn.propTypes = {\n\t/** @ignore */\n\tclasses: PropTypes.object.isRequired,\n\t/** \n\t * Handler function, which is called if the user wants to sign in.\n\t */\n\tonSignIn: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(SignIn)","/** The firebase config structure for the Python Bank Project as provided by the firebase admin website */\n\nconst firebaseConfig = {\n\n  /* Fill in your Data ! */\n\n};\n\nexport default firebaseConfig;","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { Container, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport Header from './components/layout/Header';\nimport CustomerList from './components/CustomerList';\nimport TransactionList from './components/TransactionList';\nimport About from './components/pages/About';\nimport AllAccountList from './components/AllAccountList';\nimport Theme from './Theme';\nimport SignIn from './components/pages/SignIn';\nimport LoadingProgress from './components/dialogs/LoadingProgress';\nimport ContextErrorMessage from './components/dialogs/ContextErrorMessage';\nimport firebaseConfig from './firebaseconfig';\n\n/**\n * The main bank administration app. It uses Googles firebase to log into the bank end. For routing the \n * user to the respective pages, react-router-dom ist used.\n * \n * @see See Google [firebase.auth()](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\n * @see See Google [firebase.auth().signInWithRedirect](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signinwithredirect)\n * @see [react-router-dom](https://reacttraining.com/react-router/web/guides/quick-start)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass App extends React.Component {\n\n\t/** Constructor of the app, which initializes firebase  */\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// Init an empty state\n\t\tthis.state = {\n\t\t\tcurrentUser: null,\n\t\t\tappError: null,\n\t\t\tauthError: null,\n\t\t\tauthLoading: false\n\t\t};\n\t}\n\n\t/** \n\t * Create an error boundary for this app and recieve all errors from below the component tree.\n\t * \n\t * @See See Reacts [Error Boundaries](https://reactjs.org/docs/error-boundaries.html)\n \t */\n\tstatic getDerivedStateFromError(error) {\n\t\t// Update state so the next render will show the fallback UI.\n\t\treturn { appError: error };\n\t}\n\n\t/** Handles firebase users logged in state changes  */\n\thandleAuthStateChange = user => {\n\t\tif (user) {\n\t\t\tthis.setState({\n\t\t\t\tauthLoading: true\n\t\t\t});\n\t\t\t// The user is signed in\n\t\t\tuser.getIdToken().then(token => {\n\t\t\t\t// Add the token to the browser's cookies. The server will then be\n\t\t\t\t// able to verify the token against the API.\n\t\t\t\t// SECURITY NOTE: As cookies can easily be modified, only put the\n\t\t\t\t// token (which is verified server-side) in a cookie; do not add other\n\t\t\t\t// user information.\n\t\t\t\tdocument.cookie = `token=${token};path=/`;\n\n\t\t\t\t// Set the user not before the token arrived \n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentUser: user,\n\t\t\t\t\tauthError: null,\n\t\t\t\t\tauthLoading: false\n\t\t\t\t});\n\t\t\t}).catch(e => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tauthError: e,\n\t\t\t\t\tauthLoading: false\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\t// User has logged out, so clear the id token\n\t\t\tdocument.cookie = 'token=;path=/';\n\n\t\t\t// Set the logged out user to null\n\t\t\tthis.setState({\n\t\t\t\tcurrentUser: null,\n\t\t\t\tauthLoading: false\n\t\t\t});\n\t\t}\n\t}\n\n  /** \n   * Handles the sign in request of the SignIn component uses the firebase.auth() component to sign in.\n\t * @see See Google [firebase.auth()](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\n\t * @see See Google [firebase.auth().signInWithRedirect](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signinwithredirect)\n\t */\n\thandleSignIn = () => {\n\t\tthis.setState({\n\t\t\tauthLoading: true\n\t\t});\n\t\tconst provider = new firebase.auth.GoogleAuthProvider();\n\t\tfirebase.auth().signInWithRedirect(provider);\n\t}\n\n\t/**\n\t * Lifecycle method, which is called when the component gets inserted into the browsers DOM.\n\t * Initializes the firebase SDK.\n\t * \n\t * @see See Googles [firebase init process](https://firebase.google.com/docs/web/setup)\n\t */\n\tcomponentDidMount() {\n\t\tfirebase.initializeApp(firebaseConfig);\n\t\tfirebase.auth().languageCode = 'en';\n\t\tfirebase.auth().onAuthStateChanged(this.handleAuthStateChange);\n\t}\n\n\t/** Renders the whole app */\n\trender() {\n\t\tconst { currentUser, appError, authError, authLoading } = this.state;\n\n\t\treturn (\n\t\t\t<ThemeProvider theme={Theme}>\n\t\t\t\t{/* Global CSS reset and browser normalization. CssBaseline kickstarts an elegant, consistent, and simple baseline to build upon. */}\n\t\t\t\t<CssBaseline />\n\t\t\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t\t\t<Container maxWidth='md'>\n\t\t\t\t\t\t<Header user={currentUser} />\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Is a user signed in?\n\t\t\t\t\t\t\tcurrentUser ?\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Redirect from='/' to='customers' />\n\t\t\t\t\t\t\t\t\t<Route exact path='/customers'>\n\t\t\t\t\t\t\t\t\t\t<CustomerList />\n\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t<Route path='/transactions'>\n\t\t\t\t\t\t\t\t\t\t<TransactionList />\n\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t<Route path='/accounts'>\n\t\t\t\t\t\t\t\t\t\t<AllAccountList />\n\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t<Route path='/about' component={About} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t// else show the sign in page\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Redirect to='/index.html' />\n\t\t\t\t\t\t\t\t\t<SignIn onSignIn={this.handleSignIn} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<LoadingProgress show={authLoading} />\n\t\t\t\t\t\t<ContextErrorMessage error={authError} contextErrorMsg={`Something went wrong during sighn in process.`} onReload={this.handleSignIn} />\n\t\t\t\t\t\t<ContextErrorMessage error={appError} contextErrorMsg={`Something went wrong inside the app. Please reload the page.`} />\n\t\t\t\t\t</Container>\n\t\t\t\t</Router>\n\t\t\t</ThemeProvider>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}